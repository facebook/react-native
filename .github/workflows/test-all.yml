name: Test All

on:
  workflow_dispatch:
    inputs:
      run-e2e-tests:
        description: Whether to run E2E tests or not
        type: boolean
        default: false
  pull_request:
  push:
    branches:
      - main
      - "*-stable"

jobs:
  # Shared setup job to reduce redundant Node.js and dependency installations
  setup_shared_environment:
    runs-on: ubuntu-latest
    outputs:
      node-cache-key: ${{ steps.setup.outputs.node-cache-key }}
      yarn-cache-key: ${{ steps.setup.outputs.yarn-cache-key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup shared environment
        id: setup
        uses: ./.github/actions/setup-node
      - name: Install dependencies
        uses: ./.github/actions/yarn-install
      - name: Cache Node modules for reuse
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          restore-keys: |
            node-modules-${{ runner.os }}-
      - name: Output cache keys
        run: |
          echo "node-cache-key=node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}" >> $GITHUB_OUTPUT
          echo "yarn-cache-key=yarn-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}" >> $GITHUB_OUTPUT

  set_release_type:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_TYPE: ${{ steps.set_release_type.outputs.RELEASE_TYPE }}
    env:
      EVENT_NAME: ${{ github.event_name }}
      REF: ${{ github.ref }}
    steps:
      - id: set_release_type
        run: |
          if [[ $EVENT_NAME == "schedule" ]]; then
            echo "Setting release type to nightly"
            echo "RELEASE_TYPE=nightly" >> $GITHUB_OUTPUT
          elif [[ $EVENT_NAME == "push" && $REF == refs/tags/v* ]]; then
            echo "Setting release type to release"
            echo "RELEASE_TYPE=release" >> $GITHUB_OUTPUT
          else
            echo "Setting release type to dry-run"
            echo "RELEASE_TYPE=dry-run" >> $GITHUB_OUTPUT
          fi

          echo "Should I run E2E tests? ${{ inputs.run-e2e-tests }}"

  prepare_hermes_workspace:
    runs-on: ubuntu-latest
    env:
      HERMES_WS_DIR: /tmp/hermes
      HERMES_VERSION_FILE: packages/react-native/sdks/.hermesversion
    outputs:
      react-native-version: ${{ steps.prepare-hermes-workspace.outputs.react-native-version }}
      hermes-version: ${{ steps.prepare-hermes-workspace.outputs.hermes-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Prepare Hermes Workspace
        id: prepare-hermes-workspace
        uses: ./.github/actions/prepare-hermes-workspace
        with:
          hermes-ws-dir: ${{ env.HERMES_WS_DIR }}
          hermes-version-file: ${{ env.HERMES_VERSION_FILE }}

  build_hermesc_apple:
    runs-on: macos-14
    needs: prepare_hermes_workspace
    env:
      HERMES_WS_DIR: /tmp/hermes
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build HermesC Apple
        uses: ./.github/actions/build-hermesc-apple
        with:
          hermes-version: ${{ needs.prepare_hermes_workspace.outputs.hermes-version }}
          react-native-version: ${{ needs.prepare_hermes_workspace.outputs.react-native-version }}

  build_apple_slices_hermes:
    runs-on: macos-14
    needs: [build_hermesc_apple, prepare_hermes_workspace]
    env:
      HERMES_WS_DIR: /tmp/hermes
      HERMES_TARBALL_ARTIFACTS_DIR: /tmp/hermes/hermes-runtime-darwin
      HERMES_OSXBIN_ARTIFACTS_DIR: /tmp/hermes/osx-bin
      IOS_DEPLOYMENT_TARGET: "15.1"
      XROS_DEPLOYMENT_TARGET: "1.0"
      MAC_DEPLOYMENT_TARGET: "10.15"
    strategy:
      fail-fast: false
      matrix:
        flavor: [Debug, Release]
        slice: [macosx, iphoneos, iphonesimulator, appletvos, appletvsimulator, catalyst, xros, xrsimulator]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build Slice
        uses: ./.github/actions/build-apple-slices-hermes
        with:
          flavor: ${{ matrix.flavor }}
          slice: ${{ matrix.slice}}
          hermes-version: ${{ needs.prepare_hermes_workspace.outputs.hermes-version }}
          react-native-version: ${{ needs.prepare_hermes_workspace.outputs.react-native-version }}

  build_hermes_macos:
    runs-on: macos-14
    needs: [build_apple_slices_hermes, prepare_hermes_workspace]
    env:
      HERMES_WS_DIR: /tmp/hermes
      HERMES_TARBALL_ARTIFACTS_DIR: /tmp/hermes/hermes-runtime-darwin
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        flavor: [Debug, Release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build Hermes MacOS
        uses: ./.github/actions/build-hermes-macos
        with:
          hermes-version: ${{ needs.prepare_hermes_workspace.outputs.hermes-version }}
          react-native-version: ${{ needs.prepare_hermes_workspace.outputs.react-native-version }}
          flavor: ${{ matrix.flavor }}

  prebuild_apple_dependencies:
    uses: ./.github/workflows/prebuild-ios-dependencies.yml
    secrets: inherit

  prebuild_react_native_core:
    uses: ./.github/workflows/prebuild-ios-core.yml
    secrets: inherit
    needs: [prebuild_apple_dependencies, build_hermes_macos]

  # Consolidated iOS RNTester test job with matrix strategy to reduce redundancy
  test_ios_rntester:
    needs:
      [build_apple_slices_hermes, prepare_hermes_workspace, build_hermes_macos, prebuild_apple_dependencies]
    env:
      HERMES_WS_DIR: /tmp/hermes
      HERMES_TARBALL_ARTIFACTS_DIR: /tmp/hermes/hermes-runtime-darwin
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ruby 3.2.0 test configuration
          - flavor: Debug
            use-frameworks: StaticLibraries
            ruby-version: "3.2.0"
            run-unit-tests: "true"
            runner: macos-14
          # Dynamic frameworks test configuration  
          - flavor: Debug
            use-frameworks: DynamicFrameworks
            ruby-version: "2.6.10"
            run-unit-tests: "false"
            runner: macos-14
          # Standard Debug and Release configurations
          - flavor: Debug
            use-frameworks: StaticLibraries
            ruby-version: "2.6.10"
            run-unit-tests: "false"
            runner: macos-14-large
          - flavor: Release
            use-frameworks: StaticLibraries
            ruby-version: "2.6.10"
            run-unit-tests: "false"
            runner: macos-14-large
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run iOS RNTester Tests
        uses: ./.github/actions/test-ios-rntester
        with:
          ruby-version: ${{ matrix.ruby-version }}
          use-frameworks: ${{ matrix.use-frameworks }}
          run-unit-tests: ${{ matrix.run-unit-tests }}
          hermes-version: ${{ needs.prepare_hermes_workspace.outputs.hermes-version }}
          react-native-version: ${{ needs.prepare_hermes_workspace.outputs.react-native-version }}
          flavor: ${{ matrix.flavor }}

  # Shared E2E test preparation to reduce redundant setup steps
  prepare_e2e_artifacts:
    if: ${{ github.ref == 'refs/heads/main' || contains(github.ref,  'stable') || inputs.run-e2e-tests }}
    runs-on: ubuntu-latest
    needs: [setup_shared_environment]
    outputs:
      artifacts-ready: ${{ steps.prepare.outputs.artifacts-ready }}
      branch: ${{ steps.prepare.outputs.branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Restore shared environment cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ needs.setup_shared_environment.outputs.node-cache-key }}
      - name: Prepare common E2E configuration
        id: prepare
        run: |
          # Determine branch for template (cached logic)
          BRANCH=${{ github.ref_name }}
          if ! [[ $BRANCH == *-stable* ]]; then
            BRANCH=main
          fi
          echo "BRANCH=$BRANCH" >> $GITHUB_OUTPUT
          echo "artifacts-ready=true" >> $GITHUB_OUTPUT
          echo "Prepared E2E configuration for branch: $BRANCH"

  test_e2e_ios_rntester:
    if: ${{ github.ref == 'refs/heads/main' || contains(github.ref,  'stable') || inputs.run-e2e-tests }}
    runs-on: macos-14-large
    needs: [test_ios_rntester, setup_shared_environment]
    env:
      HERMES_WS_DIR: /tmp/hermes
      HERMES_TARBALL_ARTIFACTS_DIR: /tmp/hermes/hermes-runtime-darwin
    strategy:
      fail-fast: false
      matrix:
        flavor: [Debug, Release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Restore shared environment cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ needs.setup_shared_environment.outputs.node-cache-key }}
      - name: Download App
        uses: actions/download-artifact@v4
        with:
          name: RNTesterApp-NewArch-${{ matrix.flavor }}
          path: /tmp/RNTesterBuild/RNTester.app
      - name: Setup xcode
        uses: ./.github/actions/setup-xcode
      - name: Run E2E Tests
        uses: ./.github/actions/maestro-ios
        with:
          app-path: "/tmp/RNTesterBuild/RNTester.app"
          app-id: com.meta.RNTester.localDevelopment
          maestro-flow: ./packages/rn-tester/.maestro/
          flavor: ${{ matrix.flavor }}

  test_e2e_ios_templateapp:
    if: ${{ github.ref == 'refs/heads/main' || contains(github.ref,  'stable') || inputs.run-e2e-tests }}
    runs-on: macos-14-large
    needs: [build_npm_package, prebuild_apple_dependencies, prepare_e2e_artifacts, setup_shared_environment]
    env:
      HERMES_WS_DIR: /tmp/hermes
      HERMES_TARBALL_ARTIFACTS_DIR: /tmp/hermes/hermes-runtime-darwin
    strategy:
      fail-fast: false
      matrix:
        flavor: [Debug, Release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup xcode
        uses: ./.github/actions/setup-xcode
      - name: Restore shared environment cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ needs.setup_shared_environment.outputs.node-cache-key }}
      - name: Setup ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6.10
      - name: Download React Native Package
        uses: actions/download-artifact@v4
        with:
          name: react-native-package
          path: /tmp/react-native-tmp
      - name: Download Hermes
        uses: actions/download-artifact@v4
        with:
          name: hermes-darwin-bin-${{matrix.flavor}}
          path: /tmp/react-native-tmp
      - name: Download ReactNativeDependencies
        uses: actions/download-artifact@v4
        with:
          name: ReactNativeDependencies${{ matrix.flavor }}.xcframework.tar.gz
          path: /tmp/third-party
      - name: Prepare and build template app
        run: |
          REACT_NATIVE_PKG=$(find /tmp/react-native-tmp -type f -name "*.tgz")
          HERMES_PATH=$(find /tmp/react-native-tmp -type f -name "*.tar.gz")
          
          # Use pre-computed branch from prepare job
          BRANCH=${{ needs.prepare_e2e_artifacts.outputs.branch }}

          node ./scripts/e2e/init-project-e2e.js --projectName RNTestProject --currentBranch $BRANCH --directory /tmp/RNTestProject --pathToLocalReactNative $REACT_NATIVE_PKG

          cd /tmp/RNTestProject/ios
          bundle install
          NEW_ARCH_ENABLED=1

          export RCT_USE_LOCAL_RN_DEP=/tmp/third-party/ReactNativeDependencies${{ matrix.flavor }}.xcframework.tar.gz
          HERMES_ENGINE_TARBALL_PATH=$HERMES_PATH RCT_NEW_ARCH_ENABLED=$NEW_ARCH_ENABLED bundle exec pod install

          xcodebuild \
            -scheme "RNTestProject" \
            -workspace RNTestProject.xcworkspace \
            -configuration "${{ matrix.flavor }}" \
            -sdk "iphonesimulator" \
            -destination "generic/platform=iOS Simulator" \
            -derivedDataPath "/tmp/RNTestProject"
      - name: Run E2E Tests
        uses: ./.github/actions/maestro-ios
        with:
          app-path: "/tmp/RNTestProject/Build/Products/${{ matrix.flavor }}-iphonesimulator/RNTestProject.app"
          app-id: org.reactjs.native.example.RNTestProject
          maestro-flow: ./scripts/e2e/.maestro/
          flavor: ${{ matrix.flavor }}
          working-directory: /tmp/RNTestProject

  test_e2e_android_templateapp:
    if: ${{ github.ref == 'refs/heads/main' || contains(github.ref,  'stable') || inputs.run-e2e-tests }}
    runs-on: 4-core-ubuntu
    needs: [build_npm_package, prepare_e2e_artifacts, setup_shared_environment]
    strategy:
      fail-fast: false
      matrix:
        flavor: [debug, release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Restore shared environment cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ needs.setup_shared_environment.outputs.node-cache-key }}
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'zulu'
      - name: Download Maven Local
        uses: actions/download-artifact@v4
        with:
          name: maven-local
          path: /tmp/react-native-tmp/maven-local
      - name: Download React Native Package
        uses: actions/download-artifact@v4
        with:
          name: react-native-package
          path: /tmp/react-native-tmp
      - name: Prepare and build Android template app
        run: |
          REACT_NATIVE_PKG=$(find /tmp/react-native-tmp -type f -name "*.tgz")
          MAVEN_LOCAL=/tmp/react-native-tmp/maven-local

          # Use pre-computed branch from prepare job
          BRANCH=${{ needs.prepare_e2e_artifacts.outputs.branch }}
          
          node ./scripts/e2e/init-project-e2e.js --projectName RNTestProject --currentBranch $BRANCH --directory /tmp/RNTestProject --pathToLocalReactNative $REACT_NATIVE_PKG

          cd /tmp/RNTestProject
          echo "react.internal.mavenLocalRepo=$MAVEN_LOCAL" >> android/gradle.properties

          # Build
          cd android
          CAPITALIZED_FLAVOR=$(echo "${{ matrix.flavor }}" | awk '{print toupper(substr($0, 1, 1)) substr($0, 2)}')
          ./gradlew assemble$CAPITALIZED_FLAVOR --no-daemon -PreactNativeArchitectures=x86
      - name: Run E2E Tests
        uses: ./.github/actions/maestro-android
        timeout-minutes: 60
        with:
          app-path: /tmp/RNTestProject/android/app/build/outputs/apk/${{ matrix.flavor }}/app-${{ matrix.flavor }}.apk
          app-id: com.rntestproject
          maestro-flow: ./scripts/e2e/.maestro/
          install-java: 'false'
          flavor: ${{ matrix.flavor }}
          working-directory: /tmp/RNTestProject

  build_hermesc_linux:
    runs-on: ubuntu-latest
    needs: prepare_hermes_workspace
    env:
      HERMES_WS_DIR: /tmp/hermes
      HERMES_TARBALL_ARTIFACTS_DIR: /tmp/hermes/hermes-runtime-darwin
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build HermesC Linux
        uses: ./.github/actions/build-hermesc-linux
        with:
          hermes-version: ${{ needs.prepare_hermes_workspace.outputs.hermes-version }}
          react-native-version: ${{ needs.prepare_hermes_workspace.outputs.react-native-version }}

  build_hermesc_windows:
    runs-on: windows-2025
    needs: prepare_hermes_workspace
    env:
      HERMES_WS_DIR: 'D:\tmp\hermes'
      HERMES_TARBALL_ARTIFACTS_DIR: 'D:\tmp\hermes\hermes-runtime-darwin'
      HERMES_OSXBIN_ARTIFACTS_DIR: 'D:\tmp\hermes\osx-bin'
      ICU_URL: "https://github.com/unicode-org/icu/releases/download/release-64-2/icu4c-64_2-Win64-MSVC2017.zip"
      MSBUILD_DIR: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin'
      CMAKE_DIR: 'C:\Program Files\CMake\bin'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build HermesC Windows
        uses: ./.github/actions/build-hermesc-windows
        with:
          hermes-version: ${{ needs.prepare_hermes_workspace.outputs.hermes-version }}
          react-native-version: ${{ needs.prepare_hermes_workspace.outputs.react-native-version }}

  build_android:
    runs-on: 8-core-ubuntu
    needs: [set_release_type]
    container:
      image: reactnativecommunity/react-native-android:latest
      env:
        TERM: "dumb"
        GRADLE_OPTS: "-Dorg.gradle.daemon=false"
        ORG_GRADLE_PROJECT_SIGNING_PWD: ${{ secrets.ORG_GRADLE_PROJECT_SIGNING_PWD }}
        ORG_GRADLE_PROJECT_SIGNING_KEY: ${{ secrets.ORG_GRADLE_PROJECT_SIGNING_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build Android
        uses: ./.github/actions/build-android
        with:
          release-type: ${{ needs.set_release_type.outputs.RELEASE_TYPE }}
          run-e2e-tests: ${{ github.ref == 'refs/heads/main' || contains(github.ref,  'stable') || inputs.run-e2e-tests }}
          gradle-cache-encryption-key: ${{ secrets.GRADLE_CACHE_ENCRYPTION_KEY }}

  test_e2e_android_rntester:
    if: ${{ github.ref == 'refs/heads/main' || contains(github.ref,  'stable') || inputs.run-e2e-tests }}
    runs-on: 4-core-ubuntu
    needs: [build_android, setup_shared_environment]
    strategy:
      fail-fast: false
      matrix:
        flavor: [debug, release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Restore shared environment cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ needs.setup_shared_environment.outputs.node-cache-key }}
      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: rntester-${{ matrix.flavor }}
          path: ./packages/rn-tester/android/app/build/outputs/apk/${{ matrix.flavor }}/
      - name: Run E2E Tests
        uses: ./.github/actions/maestro-android
        timeout-minutes: 60
        with:
          app-path: ./packages/rn-tester/android/app/build/outputs/apk/${{ matrix.flavor }}/app-x86-${{ matrix.flavor }}.apk
          app-id: com.facebook.react.uiapp
          maestro-flow: ./packages/rn-tester/.maestro
          flavor: ${{ matrix.flavor }}

  build_npm_package:
    runs-on: 8-core-ubuntu
    needs:
      [
        set_release_type,
        prepare_hermes_workspace,
        build_hermes_macos,
        build_hermesc_linux,
        build_hermesc_windows,
        build_android,
        prebuild_apple_dependencies,
        prebuild_react_native_core,
      ]
    container:
      image: reactnativecommunity/react-native-android:latest
      env:
        TERM: "dumb"
        GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    env:
      HERMES_WS_DIR: /tmp/hermes
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build NPM Package
        uses: ./.github/actions/build-npm-package
        with:
          hermes-ws-dir: ${{ env.HERMES_WS_DIR }}
          release-type: ${{ needs.set_release_type.outputs.RELEASE_TYPE }}
          gradle-cache-encryption-key: ${{ secrets.GRADLE_CACHE_ENCRYPTION_KEY }}

  test_android_helloworld:
    runs-on: 4-core-ubuntu
    needs: build_npm_package
    container:
      image: reactnativecommunity/react-native-android:latest
    env:
      # Set the encoding to resolve a known character encoding issue with decompressing tar.gz files in conatiners
      # via Gradle: https://github.com/gradle/gradle/issues/23391#issuecomment-1878979127
      LC_ALL: C.UTF8
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
      TERM: "dumb"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false"
      TARGET_ARCHITECTURE: "arm64-v8a"
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        flavor: [Debug, Release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup git safe folders
        run: git config --global --add safe.directory '*'
      - name: Download npm package artifact
        uses: actions/download-artifact@v4.1.3
        with:
          name: react-native-package
          path: build
      - name: Download maven-local artifact
        uses: actions/download-artifact@v4.1.3
        with:
          name: maven-local
          path: /tmp/maven-local
      - name: Setup gradle
        uses: ./.github/actions/setup-gradle
        with:
          cache-encryption-key: ${{ secrets.GRADLE_CACHE_ENCRYPTION_KEY }}
      - name: Run yarn install
        uses: ./.github/actions/yarn-install
      - name: Prepare the Helloworld application
        shell: bash
        run: node ./scripts/e2e/init-project-e2e.js --useHelloWorld --pathToLocalReactNative "$GITHUB_WORKSPACE/build/$(cat build/react-native-package-version)"
      - name: Build the Helloworld application for ${{ matrix.flavor }} with Architecture set to New Architecture.
        shell: bash
        run: |
          cd private/helloworld/android
          args=()
          if [[ ${{ matrix.flavor }} == "Release" ]]; then
            args+=(--prod)
          fi
          yarn build android "${args[@]}" -P reactNativeArchitectures="$TARGET_ARCHITECTURE" -P react.internal.mavenLocalRepo="/tmp/maven-local"
      - name: Upload artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: helloworld-apk-${{ matrix.flavor }}-NewArch-hermes
          path: ./private/helloworld/android/app/build/outputs/apk/
          compression-level: 0

  test_ios_helloworld_with_ruby_3_2_0:
    runs-on: macos-14
    needs: [prepare_hermes_workspace, build_hermes_macos, prebuild_apple_dependencies] # prepare_hermes_workspace must be there because we need its reference to retrieve a couple of outputs
    env:
      PROJECT_NAME: iOSTemplateProject
      HERMES_WS_DIR: /tmp/hermes
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: ./.github/actions/test-ios-helloworld
        with:
          ruby-version: 3.2.0
          flavor: Debug
          hermes-version: ${{ needs.prepare_hermes_workspace.outputs.hermes-version }}
          react-native-version: ${{ needs.prepare_hermes_workspace.outputs.react-native-version }}

  test_ios_helloworld:
    runs-on: macos-14
    needs: [prepare_hermes_workspace, build_hermes_macos, prebuild_apple_dependencies] # prepare_hermes_workspace must be there because we need its reference to retrieve a couple of outputs
    strategy:
      matrix:
        flavor: [Debug, Release]
        use_frameworks: [StaticLibraries, DynamicFrameworks]
        exclude:
          # This config is tested with Ruby 3.2.0. Let's not double test it.
          - flavor: Debug
            use_frameworks: StaticLibraries
    env:
      PROJECT_NAME: iOSTemplateProject
      HERMES_WS_DIR: /tmp/hermes
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: ./.github/actions/test-ios-helloworld
        with:
          flavor: ${{ matrix.flavor }}
          use-frameworks: ${{ matrix.use_frameworks }}
          hermes-version: ${{ needs.prepare_hermes_workspace.outputs.hermes-version }}
          react-native-version: ${{ needs.prepare_hermes_workspace.outputs.react-native-version }}

  # Combined JavaScript testing and linting to reduce redundancy
  test_js_and_lint:
    runs-on: ubuntu-latest
    needs: [setup_shared_environment]
    strategy:
      fail-fast: false
      matrix:
        include:
          - task: test-js
            node-version: "24"
          - task: test-js  
            node-version: "22"
          - task: lint
            node-version: "24"
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Restore shared environment cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ needs.setup_shared_environment.outputs.node-cache-key }}
      - name: Run JS tests
        if: matrix.task == 'test-js'
        uses: ./.github/actions/test-js
        with:
          node-version: ${{ matrix.node-version }}
      - name: Run linting
        if: matrix.task == 'lint'
        uses: ./.github/actions/lint
        with:
          github-token: ${{ env.GH_TOKEN }}

  # This job should help with the E2E flakyness.
  # In case E2E tests fails, it launches a new retry-workflow workflow, passing the current run_id as input.
  # The retry-workflow reruns only the failed jobs of the current test-all workflow using
  # ```
  # gh run rerun ${{ inputs.run_id }} --failed
  # ```
  # From https://stackoverflow.com/a/78314483 it seems like that adding the extra workflow
  # rather then calling directly this command should improve stability of this solution.
  # This is exactly the same as rerunning failed tests from the GH UI, but automated.
  rerun-failed-jobs:
    runs-on: ubuntu-latest
    needs: [test_e2e_ios_rntester, test_e2e_android_rntester, test_e2e_ios_templateapp, test_e2e_android_templateapp]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Rerun failed jobs in the current workflow
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          SHOULD_RETRY=${{fromJSON(github.run_attempt) < 3}}
          if [[ $SHOULD_RETRY == "false" ]]; then
            exit 0
          fi

          RNTESTER_ANDROID_FAILED=${{ needs.test_e2e_android_rntester.result == 'failure' }}
          TEMPLATE_ANDROID_FAILED=${{ needs.test_e2e_android_templateapp.result == 'failure' }}
          RNTESTER_IOS_FAILED=${{ needs.test_e2e_ios_rntester.result == 'failure' }}
          TEMPLATE_IOS_FAILED=${{ needs.test_e2e_ios_templateapp.result == 'failure' }}

          echo "RNTESTER_ANDROID_FAILED: $RNTESTER_ANDROID_FAILED"
          echo "TEMPLATE_ANDROID_FAILED: $TEMPLATE_ANDROID_FAILED"
          echo "RNTESTER_IOS_FAILED: $RNTESTER_IOS_FAILED"
          echo "TEMPLATE_IOS_FAILED: $TEMPLATE_IOS_FAILED"

          if [[ $RNTESTER_ANDROID_FAILED == "true" || $TEMPLATE_ANDROID_FAILED == "true" || $RNTESTER_IOS_FAILED == "true" || $TEMPLATE_IOS_FAILED == "true" ]]; then
            echo "Rerunning failed jobs in the current workflow"
            gh workflow run retry-workflow.yml -F run_id=${{ github.run_id }}
          fi
