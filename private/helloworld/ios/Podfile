# Ensure Yarn PnP is loaded when resolving RN scripts
pnp_path = File.expand_path('../.pnp.cjs', __dir__)
if File.exist?(pnp_path)
  existing_opts = ENV['NODE_OPTIONS']
  pnp_opt = "--require #{pnp_path}"
  ENV['NODE_OPTIONS'] = [pnp_opt, existing_opts].compact.join(' ')
end

require "../../../packages/react-native/scripts/cocoapods/autolinking.rb"

platform :ios, min_ios_version_supported
prepare_react_native_project!

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'HelloWorld' do
  require 'pathname'
config = nil
begin
  config = use_native_modules!(['sh', '../scripts/config.sh'])
rescue => e
  Pod::UI.warn "use_native_modules! failed: #{e}. Falling back to minimal config (no native module autolinking)."
  rn_pkg_json = Pod::Executable.execute_command('node', ['-e', "process.stdout.write(require.resolve('react-native/package.json'))"]).strip
  rn_dir = File.dirname(rn_pkg_json)
  ios_project_root = Pod::Config.instance.installation_root
  rn_rel = Pathname.new(rn_dir).relative_path_from(Pathname.new(ios_project_root)).to_s
  config = { :reactNativePath => rn_rel }
end

  use_react_native!(
    :path => "../../../packages/react-native",
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  target 'HelloWorldTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    # scripts/react_native_pods.rb
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      # :ccache_enabled => true
    )
  end
end
