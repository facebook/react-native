// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`public API should not change unintentionally Libraries/ActionSheetIOS/ActionSheetIOS.js 1`] = `
"declare const ActionSheetIOS: {
  showActionSheetWithOptions(
    options: {|
      +title?: ?string,
      +message?: ?string,
      +options: Array<string>,
      +destructiveButtonIndex?: ?number | ?Array<number>,
      +cancelButtonIndex?: ?number,
      +anchor?: ?number,
      +tintColor?: ColorValue | ProcessedColorValue,
      +cancelButtonTintColor?: ColorValue | ProcessedColorValue,
      +disabledButtonTintColor?: ColorValue | ProcessedColorValue,
      +userInterfaceStyle?: string,
      +disabledButtonIndices?: Array<number>,
    |},
    callback: (buttonIndex: number) => void
  ): void,
  showShareActionSheetWithOptions(
    options: Object,
    failureCallback: Function,
    successCallback: Function
  ): void,
  dismissActionSheet: () => void,
};
declare module.exports: ActionSheetIOS;
"
`;

exports[`public API should not change unintentionally Libraries/ActionSheetIOS/NativeActionSheetManager.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeActionSheetManager\\";
declare export default typeof NativeActionSheetManager;
"
`;

exports[`public API should not change unintentionally Libraries/Alert/Alert.js 1`] = `
"export type AlertType =
  | \\"default\\"
  | \\"plain-text\\"
  | \\"secure-text\\"
  | \\"login-password\\";
export type AlertButtonStyle = \\"default\\" | \\"cancel\\" | \\"destructive\\";
export type Buttons = Array<{
  text?: string,
  onPress?: ?Function,
  isPreferred?: boolean,
  style?: AlertButtonStyle,
  ...
}>;
type Options = {
  cancelable?: ?boolean,
  userInterfaceStyle?: \\"unspecified\\" | \\"light\\" | \\"dark\\",
  onDismiss?: ?() => void,
  ...
};
declare class Alert {
  static alert(
    title: ?string,
    message?: ?string,
    buttons?: Buttons,
    options?: Options
  ): void;
  static prompt(
    title: ?string,
    message?: ?string,
    callbackOrButtons?: ?(((text: string) => void) | Buttons),
    type?: ?AlertType,
    defaultValue?: string,
    keyboardType?: string,
    options?: Options
  ): void;
}
declare module.exports: Alert;
"
`;

exports[`public API should not change unintentionally Libraries/Alert/NativeAlertManager.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeAlertManager\\";
declare export default typeof NativeAlertManager;
"
`;

exports[`public API should not change unintentionally Libraries/Alert/RCTAlertManager.js.flow 1`] = `
"declare module.exports: {
  alertWithArgs(
    args: Args,
    callback: (id: number, value: string) => void
  ): void,
};
"
`;

exports[`public API should not change unintentionally Libraries/Animated/Animated.js 1`] = `
"export type { CompositeAnimation, Numeric } from \\"./AnimatedImplementation\\";
declare const Animated: typeof AnimatedImplementation;
declare export default {
  get FlatList(): AnimatedFlatList,
  get Image(): AnimatedImage,
  get ScrollView(): AnimatedScrollView,
  get SectionList(): AnimatedSectionList,
  get Text(): AnimatedText,
  get View(): AnimatedView,
  ...Animated,
};
"
`;

exports[`public API should not change unintentionally Libraries/Animated/AnimatedEvent.js 1`] = `
"export type Mapping =
  | { [key: string]: Mapping, ... }
  | AnimatedValue
  | AnimatedValueXY;
export type EventConfig = {
  listener?: ?Function,
  useNativeDriver: boolean,
  platformConfig?: PlatformConfig,
};
declare export function attachNativeEvent(
  viewRef: any,
  eventName: string,
  argMapping: $ReadOnlyArray<?Mapping>,
  platformConfig: ?PlatformConfig
): { detach: () => void };
declare export class AnimatedEvent {
  _argMapping: $ReadOnlyArray<?Mapping>;
  _listeners: Array<Function>;
  _attachedEvent: ?{ detach: () => void, ... };
  __isNative: boolean;
  __platformConfig: ?PlatformConfig;
  constructor(argMapping: $ReadOnlyArray<?Mapping>, config: EventConfig): void;
  __addListener(callback: Function): void;
  __removeListener(callback: Function): void;
  __attach(viewRef: any, eventName: string): void;
  __detach(viewTag: any, eventName: string): void;
  __getHandler(): any | ((...args: any) => void);
  _callListeners: $FlowFixMe;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/AnimatedImplementation.js 1`] = `
"export type CompositeAnimation = {
  start: (callback?: ?EndCallback, isLooping?: boolean) => void,
  stop: () => void,
  reset: () => void,
  _startNativeLoop: (iterations?: number) => void,
  _isUsingNativeDriver: () => boolean,
  ...
};
declare const add: (
  a: AnimatedNode | number,
  b: AnimatedNode | number
) => AnimatedAddition;
declare const subtract: (
  a: AnimatedNode | number,
  b: AnimatedNode | number
) => AnimatedSubtraction;
declare const divide: (
  a: AnimatedNode | number,
  b: AnimatedNode | number
) => AnimatedDivision;
declare const multiply: (
  a: AnimatedNode | number,
  b: AnimatedNode | number
) => AnimatedMultiplication;
declare const modulo: (a: AnimatedNode, modulus: number) => AnimatedModulo;
declare const diffClamp: (
  a: AnimatedNode,
  min: number,
  max: number
) => AnimatedDiffClamp;
declare const spring: (
  value: AnimatedValue | AnimatedValueXY | AnimatedColor,
  config: SpringAnimationConfig
) => CompositeAnimation;
declare const timing: (
  value: AnimatedValue | AnimatedValueXY | AnimatedColor,
  config: TimingAnimationConfig
) => CompositeAnimation;
declare const decay: (
  value: AnimatedValue | AnimatedValueXY | AnimatedColor,
  config: DecayAnimationConfig
) => CompositeAnimation;
declare const sequence: (
  animations: Array<CompositeAnimation>
) => CompositeAnimation;
type ParallelConfig = {
  stopTogether?: boolean,
  ...
};
declare const parallel: (
  animations: Array<CompositeAnimation>,
  config?: ?ParallelConfig
) => CompositeAnimation;
declare const delay: (time: number) => CompositeAnimation;
declare const stagger: (
  time: number,
  animations: Array<CompositeAnimation>
) => CompositeAnimation;
type LoopAnimationConfig = {
  iterations: number,
  resetBeforeIteration?: boolean,
  ...
};
declare const loop: (
  animation: CompositeAnimation,
  LoopAnimationConfig
) => CompositeAnimation;
declare function forkEvent(
  event: ?AnimatedEvent | ?Function,
  listener: Function
): AnimatedEvent | Function;
declare function unforkEvent(
  event: ?AnimatedEvent | ?Function,
  listener: Function
): void;
declare const event: (
  argMapping: $ReadOnlyArray<?Mapping>,
  config: EventConfig
) => any;
type AnimatedNumeric =
  | AnimatedAddition
  | AnimatedDiffClamp
  | AnimatedDivision
  | AnimatedInterpolation<number>
  | AnimatedModulo
  | AnimatedMultiplication
  | AnimatedSubtraction
  | AnimatedValue;
export type { AnimatedNumeric as Numeric };
declare export default {
  Value: AnimatedValue,
  ValueXY: AnimatedValueXY,
  Color: AnimatedColor,
  Interpolation: AnimatedInterpolation,
  Node: AnimatedNode,
  decay: decay,
  timing: timing,
  spring: spring,
  add: add,
  subtract: subtract,
  divide: divide,
  multiply: multiply,
  modulo: modulo,
  diffClamp: diffClamp,
  delay: delay,
  sequence: sequence,
  parallel: parallel,
  stagger: stagger,
  loop: loop,
  event: event,
  createAnimatedComponent: createAnimatedComponent,
  attachNativeEvent: attachNativeEvent,
  forkEvent: forkEvent,
  unforkEvent: unforkEvent,
  Event: AnimatedEvent,
};
"
`;

exports[`public API should not change unintentionally Libraries/Animated/AnimatedMock.js 1`] = `
"export type CompositeAnimation = {
  start: (callback?: ?EndCallback) => void,
  stop: () => void,
  reset: () => void,
  _startNativeLoop: (iterations?: number) => void,
  _isUsingNativeDriver: () => boolean,
  ...
};
declare const spring: (
  value: AnimatedValue | AnimatedValueXY | AnimatedColor,
  config: SpringAnimationConfig
) => CompositeAnimation;
declare const timing: (
  value: AnimatedValue | AnimatedValueXY | AnimatedColor,
  config: TimingAnimationConfig
) => CompositeAnimation;
declare const decay: (
  value: AnimatedValue | AnimatedValueXY | AnimatedColor,
  config: DecayAnimationConfig
) => CompositeAnimation;
declare const sequence: (
  animations: Array<CompositeAnimation>
) => CompositeAnimation;
type ParallelConfig = { stopTogether?: boolean, ... };
declare const parallel: (
  animations: Array<CompositeAnimation>,
  config?: ?ParallelConfig
) => CompositeAnimation;
declare const delay: (time: number) => CompositeAnimation;
declare const stagger: (
  time: number,
  animations: Array<CompositeAnimation>
) => CompositeAnimation;
type LoopAnimationConfig = {
  iterations: number,
  resetBeforeIteration?: boolean,
  ...
};
declare const loop: (
  animation: CompositeAnimation,
  LoopAnimationConfig
) => CompositeAnimation;
export type { AnimatedNumeric as Numeric };
declare export default {
  Value: AnimatedValue,
  ValueXY: AnimatedValueXY,
  Color: AnimatedColor,
  Interpolation: AnimatedInterpolation,
  Node: AnimatedNode,
  decay: decay,
  timing: timing,
  spring: spring,
  add: $FlowFixMe,
  subtract: $FlowFixMe,
  divide: $FlowFixMe,
  multiply: $FlowFixMe,
  modulo: $FlowFixMe,
  diffClamp: $FlowFixMe,
  delay: delay,
  sequence: sequence,
  parallel: parallel,
  stagger: stagger,
  loop: loop,
  event: $FlowFixMe,
  createAnimatedComponent: createAnimatedComponent,
  attachNativeEvent: attachNativeEvent,
  forkEvent: $FlowFixMe,
  unforkEvent: $FlowFixMe,
  Event: AnimatedEvent,
};
"
`;

exports[`public API should not change unintentionally Libraries/Animated/AnimatedPlatformConfig.js 1`] = `
"export type PlatformConfig = {};
"
`;

exports[`public API should not change unintentionally Libraries/Animated/AnimatedWeb.js 1`] = `
"declare export default {
  ...AnimatedImplementation,
  div: $FlowFixMe,
  span: $FlowFixMe,
  img: $FlowFixMe,
};
"
`;

exports[`public API should not change unintentionally Libraries/Animated/Easing.js 1`] = `
"declare const Easing: {
  step0(n: number): number,
  step1(n: number): number,
  linear(t: number): number,
  ease(t: number): number,
  quad(t: number): number,
  cubic(t: number): number,
  poly(n: number): (t: number) => number,
  sin(t: number): number,
  circle(t: number): number,
  exp(t: number): number,
  elastic(bounciness: number): (t: number) => number,
  back(s: number): (t: number) => number,
  bounce(t: number): number,
  bezier(x1: number, y1: number, x2: number, y2: number): (t: number) => number,
  in(easing: (t: number) => number): (t: number) => number,
  out(easing: (t: number) => number): (t: number) => number,
  inOut(easing: (t: number) => number): (t: number) => number,
};
declare export default typeof Easing;
"
`;

exports[`public API should not change unintentionally Libraries/Animated/NativeAnimatedAllowlist.js 1`] = `
"declare export default AnimatedPropsAllowlist;
declare export function allowInterpolationParam(param: string): void;
declare export function allowStyleProp(prop: string): void;
declare export function allowTransformProp(prop: string): void;
declare export function isSupportedColorStyleProp(prop: string): boolean;
declare export function isSupportedInterpolationParam(param: string): boolean;
declare export function isSupportedStyleProp(prop: string): boolean;
declare export function isSupportedTransformProp(prop: string): boolean;
"
`;

exports[`public API should not change unintentionally Libraries/Animated/NativeAnimatedModule.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeAnimatedModule\\";
declare export default typeof NativeAnimatedModule;
"
`;

exports[`public API should not change unintentionally Libraries/Animated/NativeAnimatedTurboModule.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeAnimatedTurboModule\\";
declare export default typeof NativeAnimatedTurboModule;
"
`;

exports[`public API should not change unintentionally Libraries/Animated/SpringConfig.js 1`] = `
"type SpringConfigType = {
  stiffness: number,
  damping: number,
  ...
};
declare export function fromOrigamiTensionAndFriction(
  tension: number,
  friction: number
): SpringConfigType;
declare export function fromBouncinessAndSpeed(
  bounciness: number,
  speed: number
): SpringConfigType;
"
`;

exports[`public API should not change unintentionally Libraries/Animated/animations/Animation.js 1`] = `
"export type EndResult = { finished: boolean, value?: number, ... };
export type EndCallback = (result: EndResult) => void;
export type AnimationConfig = $ReadOnly<{
  isInteraction?: boolean,
  useNativeDriver: boolean,
  platformConfig?: PlatformConfig,
  onComplete?: ?EndCallback,
  iterations?: number,
  isLooping?: boolean,
  debugID?: ?string,
  ...
}>;
declare export default class Animation {
  __active: boolean;
  __isInteraction: boolean;
  __isLooping: ?boolean;
  __iterations: number;
  __debugID: ?string;
  constructor(config: AnimationConfig): void;
  start(
    fromValue: number,
    onUpdate: (value: number) => void,
    onEnd: ?EndCallback,
    previousAnimation: ?Animation,
    animatedValue: AnimatedValue
  ): void;
  stop(): void;
  __getNativeAnimationConfig(): $ReadOnly<{
    platformConfig: ?PlatformConfig,
    ...
  }>;
  __findAnimatedPropsNodes(node: AnimatedNode): Array<AnimatedProps>;
  __startAnimationIfNative(animatedValue: AnimatedValue): boolean;
  __notifyAnimationEnd(result: EndResult): void;
  __getDebugID(): ?string;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/animations/DecayAnimation.js 1`] = `
"export type DecayAnimationConfig = $ReadOnly<{
  ...AnimationConfig,
  velocity:
    | number
    | $ReadOnly<{
        x: number,
        y: number,
        ...
      }>,
  deceleration?: number,
  ...
}>;
export type DecayAnimationConfigSingle = $ReadOnly<{
  ...AnimationConfig,
  velocity: number,
  deceleration?: number,
  ...
}>;
declare export default class DecayAnimation extends Animation {
  _startTime: number;
  _lastValue: number;
  _fromValue: number;
  _deceleration: number;
  _velocity: number;
  _onUpdate: (value: number) => void;
  _animationFrame: ?AnimationFrameID;
  _platformConfig: ?PlatformConfig;
  constructor(config: DecayAnimationConfigSingle): void;
  __getNativeAnimationConfig(): $ReadOnly<{
    deceleration: number,
    iterations: number,
    platformConfig: ?PlatformConfig,
    type: \\"decay\\",
    velocity: number,
    ...
  }>;
  start(
    fromValue: number,
    onUpdate: (value: number) => void,
    onEnd: ?EndCallback,
    previousAnimation: ?Animation,
    animatedValue: AnimatedValue
  ): void;
  onUpdate(): void;
  stop(): void;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/animations/SpringAnimation.js 1`] = `
"export type SpringAnimationConfig = $ReadOnly<{
  ...AnimationConfig,
  toValue:
    | number
    | AnimatedValue
    | {
        x: number,
        y: number,
        ...
      }
    | AnimatedValueXY
    | {
        r: number,
        g: number,
        b: number,
        a: number,
        ...
      }
    | AnimatedColor
    | AnimatedInterpolation<number>,
  overshootClamping?: boolean,
  restDisplacementThreshold?: number,
  restSpeedThreshold?: number,
  velocity?:
    | number
    | $ReadOnly<{
        x: number,
        y: number,
        ...
      }>,
  bounciness?: number,
  speed?: number,
  tension?: number,
  friction?: number,
  stiffness?: number,
  damping?: number,
  mass?: number,
  delay?: number,
  ...
}>;
export type SpringAnimationConfigSingle = $ReadOnly<{
  ...AnimationConfig,
  toValue: number,
  overshootClamping?: boolean,
  restDisplacementThreshold?: number,
  restSpeedThreshold?: number,
  velocity?: number,
  bounciness?: number,
  speed?: number,
  tension?: number,
  friction?: number,
  stiffness?: number,
  damping?: number,
  mass?: number,
  delay?: number,
  ...
}>;
declare opaque type SpringAnimationInternalState;
declare export default class SpringAnimation extends Animation {
  _overshootClamping: boolean;
  _restDisplacementThreshold: number;
  _restSpeedThreshold: number;
  _lastVelocity: number;
  _startPosition: number;
  _lastPosition: number;
  _fromValue: number;
  _toValue: number;
  _stiffness: number;
  _damping: number;
  _mass: number;
  _initialVelocity: number;
  _delay: number;
  _timeout: ?TimeoutID;
  _startTime: number;
  _lastTime: number;
  _frameTime: number;
  _onUpdate: (value: number) => void;
  _animationFrame: ?AnimationFrameID;
  _platformConfig: ?PlatformConfig;
  constructor(config: SpringAnimationConfigSingle): void;
  __getNativeAnimationConfig(): $ReadOnly<{
    damping: number,
    initialVelocity: number,
    iterations: number,
    mass: number,
    platformConfig: ?PlatformConfig,
    overshootClamping: boolean,
    restDisplacementThreshold: number,
    restSpeedThreshold: number,
    stiffness: number,
    toValue: number,
    type: \\"spring\\",
    ...
  }>;
  start(
    fromValue: number,
    onUpdate: (value: number) => void,
    onEnd: ?EndCallback,
    previousAnimation: ?Animation,
    animatedValue: AnimatedValue
  ): void;
  getInternalState(): SpringAnimationInternalState;
  onUpdate(): void;
  stop(): void;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/animations/TimingAnimation.js 1`] = `
"export type TimingAnimationConfig = $ReadOnly<{
  ...AnimationConfig,
  toValue:
    | number
    | AnimatedValue
    | $ReadOnly<{
        x: number,
        y: number,
        ...
      }>
    | AnimatedValueXY
    | RgbaValue
    | AnimatedColor
    | AnimatedInterpolation<number>,
  easing?: (value: number) => number,
  duration?: number,
  delay?: number,
  ...
}>;
export type TimingAnimationConfigSingle = $ReadOnly<{
  ...AnimationConfig,
  toValue: number,
  easing?: (value: number) => number,
  duration?: number,
  delay?: number,
  ...
}>;
declare export default class TimingAnimation extends Animation {
  _startTime: number;
  _fromValue: number;
  _toValue: number;
  _duration: number;
  _delay: number;
  _easing: (value: number) => number;
  _onUpdate: (value: number) => void;
  _animationFrame: ?AnimationFrameID;
  _timeout: ?TimeoutID;
  _platformConfig: ?PlatformConfig;
  constructor(config: TimingAnimationConfigSingle): void;
  __getNativeAnimationConfig(): $ReadOnly<{
    type: \\"frames\\",
    frames: $ReadOnlyArray<number>,
    toValue: number,
    iterations: number,
    platformConfig: ?PlatformConfig,
    ...
  }>;
  start(
    fromValue: number,
    onUpdate: (value: number) => void,
    onEnd: ?EndCallback,
    previousAnimation: ?Animation,
    animatedValue: AnimatedValue
  ): void;
  onUpdate(): void;
  stop(): void;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/bezier.js 1`] = `
"declare export default function bezier(
  mX1: number,
  mY1: number,
  mX2: number,
  mY2: number
): (x: number) => number;
"
`;

exports[`public API should not change unintentionally Libraries/Animated/components/AnimatedFlatList.js 1`] = `
"declare export default AnimatedComponentType<
  React.ElementConfig<typeof FlatList>,
  FlatList<mixed>,
>;
"
`;

exports[`public API should not change unintentionally Libraries/Animated/components/AnimatedImage.js 1`] = `
"declare export default AnimatedComponentType<
  React.ElementConfig<typeof Image>,
  React.ElementRef<typeof Image>,
>;
"
`;

exports[`public API should not change unintentionally Libraries/Animated/components/AnimatedScrollView.js 1`] = `
"type Props = React.ElementConfig<typeof ScrollView>;
type Instance = React.ElementRef<typeof ScrollView>;
declare const AnimatedScrollView: AnimatedComponentType<Props, Instance>;
declare export default typeof AnimatedScrollView;
"
`;

exports[`public API should not change unintentionally Libraries/Animated/components/AnimatedSectionList.js 1`] = `
"declare export default AnimatedComponentType<
  React.ElementConfig<typeof SectionList>,
  SectionList<SectionBase<any>>,
>;
"
`;

exports[`public API should not change unintentionally Libraries/Animated/components/AnimatedText.js 1`] = `
"declare export default AnimatedComponentType<
  React.ElementConfig<typeof Text>,
  React.ElementRef<typeof Text>,
>;
"
`;

exports[`public API should not change unintentionally Libraries/Animated/components/AnimatedView.js 1`] = `
"declare export default AnimatedComponentType<
  React.ElementConfig<typeof View>,
  React.ElementRef<typeof View>,
>;
"
`;

exports[`public API should not change unintentionally Libraries/Animated/createAnimatedComponent.js 1`] = `
"export type AnimatedProps<Props: { ... }> = {
  +[_K in keyof (Props &
      $ReadOnly<{
        passthroughAnimatedPropExplicitValues?: React.ElementConfig<
          typeof View,
        >,
      }>)]: any,
};
export type StrictAnimatedProps<Props: { ... }> = $ReadOnly<{
  ...$Exact<Props>,
  passthroughAnimatedPropExplicitValues?: ?Props,
}>;
export type AnimatedComponentType<
  Props: { ... },
  +Instance = mixed,
> = component(ref: React.RefSetter<Instance>, ...AnimatedProps<Props>);
export type StrictAnimatedComponentType<
  Props: { ... },
  +Instance = mixed,
> = component(ref: React.RefSetter<Instance>, ...StrictAnimatedProps<Props>);
declare export default function createAnimatedComponent<
  TProps: { ... },
  TInstance,
>(
  Component: component(ref: React.RefSetter<TInstance>, ...TProps)
): AnimatedComponentType<TProps, TInstance>;
declare export function unstable_createAnimatedComponentWithAllowlist<
  TProps: { ... },
  TInstance,
>(
  Component: component(ref: React.RefSetter<TInstance>, ...TProps),
  allowlist: ?AnimatedPropsAllowlist
): StrictAnimatedComponentType<TProps, TInstance>;
"
`;

exports[`public API should not change unintentionally Libraries/Animated/nodes/AnimatedAddition.js 1`] = `
"declare export default class AnimatedAddition extends AnimatedWithChildren {
  _a: AnimatedNode;
  _b: AnimatedNode;
  constructor(
    a: AnimatedNode | number,
    b: AnimatedNode | number,
    config?: ?AnimatedNodeConfig
  ): void;
  __makeNative(platformConfig: ?PlatformConfig): void;
  __getValue(): number;
  interpolate<OutputT: number | string>(
    config: InterpolationConfigType<OutputT>
  ): AnimatedInterpolation<OutputT>;
  __attach(): void;
  __detach(): void;
  __getNativeConfig(): any;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/nodes/AnimatedColor.js 1`] = `
"export type AnimatedColorConfig = $ReadOnly<{
  ...AnimatedNodeConfig,
  useNativeDriver: boolean,
}>;
type ColorListenerCallback = (value: ColorValue) => mixed;
export type RgbaValue = {
  +r: number,
  +g: number,
  +b: number,
  +a: number,
  ...
};
type RgbaAnimatedValue = {
  +r: AnimatedValue,
  +g: AnimatedValue,
  +b: AnimatedValue,
  +a: AnimatedValue,
  ...
};
export type InputValue = ?(RgbaValue | RgbaAnimatedValue | ColorValue);
declare export default class AnimatedColor extends AnimatedWithChildren {
  r: AnimatedValue;
  g: AnimatedValue;
  b: AnimatedValue;
  a: AnimatedValue;
  nativeColor: ?NativeColorValue;
  _suspendCallbacks: number;
  constructor(valueIn?: InputValue, config?: ?AnimatedColorConfig): void;
  setValue(value: RgbaValue | ColorValue): void;
  setOffset(offset: RgbaValue): void;
  flattenOffset(): void;
  extractOffset(): void;
  stopAnimation(callback?: ColorListenerCallback): void;
  resetAnimation(callback?: ColorListenerCallback): void;
  __getValue(): ColorValue;
  __attach(): void;
  __detach(): void;
  _withSuspendedCallbacks(callback: () => void): void;
  __callListeners(value: number): void;
  __makeNative(platformConfig: ?PlatformConfig): void;
  __getNativeConfig(): { ... };
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/nodes/AnimatedDiffClamp.js 1`] = `
"declare export default class AnimatedDiffClamp extends AnimatedWithChildren {
  _a: AnimatedNode;
  _min: number;
  _max: number;
  _value: number;
  _lastValue: number;
  constructor(
    a: AnimatedNode,
    min: number,
    max: number,
    config?: ?AnimatedNodeConfig
  ): void;
  __makeNative(platformConfig: ?PlatformConfig): void;
  interpolate<OutputT: number | string>(
    config: InterpolationConfigType<OutputT>
  ): AnimatedInterpolation<OutputT>;
  __getValue(): number;
  __attach(): void;
  __detach(): void;
  __getNativeConfig(): any;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/nodes/AnimatedDivision.js 1`] = `
"declare export default class AnimatedDivision extends AnimatedWithChildren {
  _a: AnimatedNode;
  _b: AnimatedNode;
  _warnedAboutDivideByZero: boolean;
  constructor(
    a: AnimatedNode | number,
    b: AnimatedNode | number,
    config?: ?AnimatedNodeConfig
  ): void;
  __makeNative(platformConfig: ?PlatformConfig): void;
  __getValue(): number;
  interpolate<OutputT: number | string>(
    config: InterpolationConfigType<OutputT>
  ): AnimatedInterpolation<OutputT>;
  __attach(): void;
  __detach(): void;
  __getNativeConfig(): any;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/nodes/AnimatedInterpolation.js 1`] = `
"type ExtrapolateType = \\"extend\\" | \\"identity\\" | \\"clamp\\";
export type InterpolationConfigType<OutputT: number | string> = $ReadOnly<{
  ...AnimatedNodeConfig,
  inputRange: $ReadOnlyArray<number>,
  outputRange: $ReadOnlyArray<OutputT>,
  easing?: (input: number) => number,
  extrapolate?: ExtrapolateType,
  extrapolateLeft?: ExtrapolateType,
  extrapolateRight?: ExtrapolateType,
}>;
declare export default class AnimatedInterpolation<OutputT: number | string>
  extends AnimatedWithChildren
{
  _parent: AnimatedNode;
  _config: InterpolationConfigType<OutputT>;
  _interpolation: ?(input: number) => OutputT;
  constructor(
    parent: AnimatedNode,
    config: InterpolationConfigType<OutputT>
  ): void;
  _getInterpolation(): (number) => OutputT;
  __makeNative(platformConfig: ?PlatformConfig): void;
  __getValue(): OutputT;
  interpolate<NewOutputT: number | string>(
    config: InterpolationConfigType<NewOutputT>
  ): AnimatedInterpolation<NewOutputT>;
  __attach(): void;
  __detach(): void;
  __getNativeConfig(): any;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/nodes/AnimatedModulo.js 1`] = `
"declare export default class AnimatedModulo extends AnimatedWithChildren {
  _a: AnimatedNode;
  _modulus: number;
  constructor(
    a: AnimatedNode,
    modulus: number,
    config?: ?AnimatedNodeConfig
  ): void;
  __makeNative(platformConfig: ?PlatformConfig): void;
  __getValue(): number;
  interpolate<OutputT: number | string>(
    config: InterpolationConfigType<OutputT>
  ): AnimatedInterpolation<OutputT>;
  __attach(): void;
  __detach(): void;
  __getNativeConfig(): any;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/nodes/AnimatedMultiplication.js 1`] = `
"declare export default class AnimatedMultiplication
  extends AnimatedWithChildren
{
  _a: AnimatedNode;
  _b: AnimatedNode;
  constructor(
    a: AnimatedNode | number,
    b: AnimatedNode | number,
    config?: ?AnimatedNodeConfig
  ): void;
  __makeNative(platformConfig: ?PlatformConfig): void;
  __getValue(): number;
  interpolate<OutputT: number | string>(
    config: InterpolationConfigType<OutputT>
  ): AnimatedInterpolation<OutputT>;
  __attach(): void;
  __detach(): void;
  __getNativeConfig(): any;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/nodes/AnimatedNode.js 1`] = `
"export type AnimatedNodeConfig = $ReadOnly<{
  debugID?: string,
}>;
declare export default class AnimatedNode {
  _platformConfig: ?PlatformConfig;
  constructor(
    config?: ?$ReadOnly<{
      ...AnimatedNodeConfig,
      ...
    }>
  ): void;
  __attach(): void;
  __detach(): void;
  __getValue(): any;
  __getAnimatedValue(): any;
  __addChild(child: AnimatedNode): void;
  __removeChild(child: AnimatedNode): void;
  __getChildren(): $ReadOnlyArray<AnimatedNode>;
  __isNative: boolean;
  __nativeTag: ?number;
  __makeNative(platformConfig: ?PlatformConfig): void;
  addListener(callback: (value: any) => mixed): string;
  removeListener(id: string): void;
  removeAllListeners(): void;
  hasListeners(): boolean;
  __onAnimatedValueUpdateReceived(value: number): void;
  __callListeners(value: number): void;
  __getNativeTag(): number;
  __getNativeConfig(): Object;
  __getPlatformConfig(): ?PlatformConfig;
  __setPlatformConfig(platformConfig: ?PlatformConfig): void;
  toJSON(): mixed;
  __debugID: ?string;
  __getDebugID(): ?string;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/nodes/AnimatedObject.js 1`] = `
"declare export function isPlainObject(
  value: mixed
): value is $ReadOnly<{ [string]: mixed }>;
declare export default class AnimatedObject extends AnimatedWithChildren {
  _value: mixed;
  static from(value: mixed): ?AnimatedObject;
  constructor(
    nodes: $ReadOnlyArray<AnimatedNode>,
    value: mixed,
    config?: ?AnimatedNodeConfig
  ): void;
  __getValue(): any;
  __getValueWithStaticObject(staticObject: mixed): any;
  __getAnimatedValue(): any;
  __attach(): void;
  __detach(): void;
  __makeNative(platformConfig: ?PlatformConfig): void;
  __getNativeConfig(): any;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/nodes/AnimatedProps.js 1`] = `
"export type AnimatedPropsAllowlist = $ReadOnly<{
  style?: ?AnimatedStyleAllowlist,
  [string]: true,
}>;
declare export default class AnimatedProps extends AnimatedNode {
  constructor(
    inputProps: { [string]: mixed },
    callback: () => void,
    allowlist?: ?AnimatedPropsAllowlist,
    config?: ?AnimatedNodeConfig
  ): void;
  __getValue(): Object;
  __getValueWithStaticProps(staticProps: Object): Object;
  __getAnimatedValue(): Object;
  __attach(): void;
  __detach(): void;
  update(): void;
  __makeNative(platformConfig: ?PlatformConfig): void;
  setNativeView(animatedView: any): void;
  __connectAnimatedView(): void;
  __disconnectAnimatedView(): void;
  __restoreDefaultValues(): void;
  __getNativeConfig(): Object;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/nodes/AnimatedStyle.js 1`] = `
"export type AnimatedStyleAllowlist = $ReadOnly<{ [string]: true }>;
declare export default class AnimatedStyle extends AnimatedWithChildren {
  static from(
    inputStyle: any,
    allowlist: ?AnimatedStyleAllowlist
  ): ?AnimatedStyle;
  constructor(
    nodeKeys: $ReadOnlyArray<string>,
    nodes: $ReadOnlyArray<AnimatedNode>,
    style: { [string]: mixed },
    inputStyle: any,
    config?: ?AnimatedNodeConfig
  ): void;
  __getValue(): Object | Array<Object>;
  __getValueWithStaticStyle(staticStyle: Object): Object | Array<Object>;
  __getAnimatedValue(): Object;
  __attach(): void;
  __detach(): void;
  __makeNative(platformConfig: ?PlatformConfig): void;
  __getNativeConfig(): Object;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/nodes/AnimatedSubtraction.js 1`] = `
"declare export default class AnimatedSubtraction extends AnimatedWithChildren {
  _a: AnimatedNode;
  _b: AnimatedNode;
  constructor(
    a: AnimatedNode | number,
    b: AnimatedNode | number,
    config?: ?AnimatedNodeConfig
  ): void;
  __makeNative(platformConfig: ?PlatformConfig): void;
  __getValue(): number;
  interpolate<OutputT: number | string>(
    config: InterpolationConfigType<OutputT>
  ): AnimatedInterpolation<OutputT>;
  __attach(): void;
  __detach(): void;
  __getNativeConfig(): any;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/nodes/AnimatedTracking.js 1`] = `
"declare export default class AnimatedTracking extends AnimatedNode {
  _value: AnimatedValue;
  _parent: AnimatedNode;
  _callback: ?EndCallback;
  _animationConfig: Object;
  _animationClass: any;
  _useNativeDriver: boolean;
  constructor(
    value: AnimatedValue,
    parent: AnimatedNode,
    animationClass: any,
    animationConfig: Object,
    callback?: ?EndCallback,
    config?: ?AnimatedNodeConfig
  ): void;
  __makeNative(platformConfig: ?PlatformConfig): void;
  __getValue(): Object;
  __attach(): void;
  __detach(): void;
  update(): void;
  __getNativeConfig(): any;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/nodes/AnimatedTransform.js 1`] = `
"type Transform<T = AnimatedNode> = {
  [string]:
    | number
    | string
    | T
    | $ReadOnlyArray<number | string | T>
    | { [string]: number | string | T },
};
declare export default class AnimatedTransform extends AnimatedWithChildren {
  _transforms: $ReadOnlyArray<Transform<>>;
  static from(transforms: $ReadOnlyArray<Transform<>>): ?AnimatedTransform;
  constructor(
    nodes: $ReadOnlyArray<AnimatedNode>,
    transforms: $ReadOnlyArray<Transform<>>,
    config?: ?AnimatedNodeConfig
  ): void;
  __makeNative(platformConfig: ?PlatformConfig): void;
  __getValue(): $ReadOnlyArray<Transform<any>>;
  __getValueWithStaticTransforms(
    staticTransforms: $ReadOnlyArray<Object>
  ): $ReadOnlyArray<Object>;
  __getAnimatedValue(): $ReadOnlyArray<Transform<any>>;
  __attach(): void;
  __detach(): void;
  __getNativeConfig(): any;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/nodes/AnimatedValue.js 1`] = `
"export type AnimatedValueConfig = $ReadOnly<{
  ...AnimatedNodeConfig,
  useNativeDriver: boolean,
}>;
declare export function flushValue(rootNode: AnimatedNode): void;
declare export default class AnimatedValue extends AnimatedWithChildren {
  _value: number;
  _startingValue: number;
  _offset: number;
  _animation: ?Animation;
  _tracking: ?AnimatedTracking;
  constructor(value: number, config?: ?AnimatedValueConfig): void;
  __detach(): void;
  __getValue(): number;
  setValue(value: number): void;
  setOffset(offset: number): void;
  flattenOffset(): void;
  extractOffset(): void;
  stopAnimation(callback?: ?(value: number) => void): void;
  resetAnimation(callback?: ?(value: number) => void): void;
  __onAnimatedValueUpdateReceived(value: number): void;
  interpolate<OutputT: number | string>(
    config: InterpolationConfigType<OutputT>
  ): AnimatedInterpolation<OutputT>;
  animate(animation: Animation, callback: ?EndCallback): void;
  stopTracking(): void;
  track(tracking: AnimatedTracking): void;
  _updateValue(value: number, flush: boolean): void;
  __getNativeConfig(): Object;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/nodes/AnimatedValueXY.js 1`] = `
"export type AnimatedValueXYConfig = $ReadOnly<{
  ...AnimatedNodeConfig,
  useNativeDriver: boolean,
}>;
type ValueXYListenerCallback = (value: { x: number, y: number, ... }) => mixed;
declare export default class AnimatedValueXY extends AnimatedWithChildren {
  x: AnimatedValue;
  y: AnimatedValue;
  _listeners: {
    [key: string]: {
      x: string,
      y: string,
      ...
    },
    ...
  };
  constructor(
    valueIn?: ?{
      +x: number | AnimatedValue,
      +y: number | AnimatedValue,
      ...
    },
    config?: ?AnimatedValueXYConfig
  ): void;
  setValue(value: { x: number, y: number, ... }): void;
  setOffset(offset: { x: number, y: number, ... }): void;
  flattenOffset(): void;
  extractOffset(): void;
  __getValue(): {
    x: number,
    y: number,
    ...
  };
  resetAnimation(
    callback?: (value: { x: number, y: number, ... }) => void
  ): void;
  stopAnimation(
    callback?: (value: { x: number, y: number, ... }) => void
  ): void;
  addListener(callback: ValueXYListenerCallback): string;
  removeListener(id: string): void;
  removeAllListeners(): void;
  getLayout(): { [key: string]: AnimatedValue, ... };
  getTranslateTransform(): Array<{ [key: string]: AnimatedValue, ... }>;
  __attach(): void;
  __detach(): void;
  __makeNative(platformConfig: ?PlatformConfig): void;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/nodes/AnimatedWithChildren.js 1`] = `
"declare export default class AnimatedWithChildren extends AnimatedNode {
  _children: Array<AnimatedNode>;
  __makeNative(platformConfig: ?PlatformConfig): void;
  __addChild(child: AnimatedNode): void;
  __removeChild(child: AnimatedNode): void;
  __getChildren(): $ReadOnlyArray<AnimatedNode>;
  __callListeners(value: number): void;
}
"
`;

exports[`public API should not change unintentionally Libraries/Animated/shouldUseTurboAnimatedModule.js 1`] = `
"declare function shouldUseTurboAnimatedModule(): boolean;
declare export default typeof shouldUseTurboAnimatedModule;
"
`;

exports[`public API should not change unintentionally Libraries/Animated/useAnimatedProps.js 1`] = `
"type ReducedProps<TProps> = {
  ...TProps,
  collapsable: boolean,
  ...
};
type CallbackRef<T> = (T) => mixed;
declare export default function useAnimatedProps<TProps: { ... }, TInstance>(
  props: TProps,
  allowlist?: ?AnimatedPropsAllowlist
): [ReducedProps<TProps>, CallbackRef<TInstance | null>];
"
`;

exports[`public API should not change unintentionally Libraries/Animated/useAnimatedValue.js 1`] = `
"declare export default function useAnimatedValue(
  initialValue: number,
  config?: ?AnimatedValueConfig
): Animated.Value;
"
`;

exports[`public API should not change unintentionally Libraries/AppState/AppState.js 1`] = `
"export type AppStateValues = \\"inactive\\" | \\"background\\" | \\"active\\";
type AppStateEventDefinitions = {
  change: [AppStateValues],
  memoryWarning: [],
  blur: [],
  focus: [],
};
type NativeAppStateEventDefinitions = {
  appStateDidChange: [{ app_state: AppStateValues }],
  appStateFocusChange: [boolean],
  memoryWarning: [],
};
declare class AppState {
  currentState: ?string;
  isAvailable: boolean;
  _emitter: ?NativeEventEmitter<NativeAppStateEventDefinitions>;
  constructor(): void;
  addEventListener<K: $Keys<AppStateEventDefinitions>>(
    type: K,
    handler: (...$ElementType<AppStateEventDefinitions, K>) => void
  ): EventSubscription;
}
declare module.exports: AppState;
"
`;

exports[`public API should not change unintentionally Libraries/AppState/NativeAppState.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeAppState\\";
declare export default typeof NativeAppState;
"
`;

exports[`public API should not change unintentionally Libraries/BatchedBridge/BatchedBridge.js 1`] = `
"declare const BatchedBridge: MessageQueue;
declare module.exports: BatchedBridge;
"
`;

exports[`public API should not change unintentionally Libraries/BatchedBridge/MessageQueue.js 1`] = `
"export type SpyData = {
  type: number,
  module: ?string,
  method: string | number,
  args: mixed[],
  ...
};
declare class MessageQueue {
  _lazyCallableModules: { [key: string]: (void) => { ... }, ... };
  _queue: [number[], number[], mixed[], number];
  _successCallbacks: Map<number, ?(...mixed[]) => void>;
  _failureCallbacks: Map<number, ?(...mixed[]) => void>;
  _callID: number;
  _lastFlush: number;
  _eventLoopStartTime: number;
  _reactNativeMicrotasksCallback: ?() => void;
  _debugInfo: { [number]: [number, number], ... };
  _remoteModuleTable: { [number]: string, ... };
  _remoteMethodTable: { [number]: $ReadOnlyArray<string>, ... };
  __spy: ?(data: SpyData) => void;
  constructor(): void;
  static spy(spyOrToggle: boolean | ((data: SpyData) => void)): void;
  callFunctionReturnFlushedQueue(
    module: string,
    method: string,
    args: mixed[]
  ): null | [Array<number>, Array<number>, Array<mixed>, number];
  invokeCallbackAndReturnFlushedQueue(
    cbID: number,
    args: mixed[]
  ): null | [Array<number>, Array<number>, Array<mixed>, number];
  flushedQueue(): null | [Array<number>, Array<number>, Array<mixed>, number];
  getEventLoopRunningTime(): number;
  registerCallableModule(name: string, module: { ... }): void;
  registerLazyCallableModule(
    name: string,
    factory: (void) => interface {}
  ): void;
  getCallableModule(name: string): { ... } | null;
  callNativeSyncHook(
    moduleID: number,
    methodID: number,
    params: mixed[],
    onFail: ?(...mixed[]) => void,
    onSucc: ?(...mixed[]) => void
  ): mixed;
  processCallbacks(
    moduleID: number,
    methodID: number,
    params: mixed[],
    onFail: ?(...mixed[]) => void,
    onSucc: ?(...mixed[]) => void
  ): void;
  enqueueNativeCall(
    moduleID: number,
    methodID: number,
    params: mixed[],
    onFail: ?(...mixed[]) => void,
    onSucc: ?(...mixed[]) => void
  ): void;
  createDebugLookup(
    moduleID: number,
    name: string,
    methods: ?$ReadOnlyArray<string>
  ): void;
  setReactNativeMicrotasksCallback(fn: () => void): void;
  __guard(fn: () => void): void;
  __shouldPauseOnThrow(): boolean;
  __callReactNativeMicrotasks(): void;
  __callFunction(module: string, method: string, args: mixed[]): void;
  __invokeCallback(cbID: number, args: mixed[]): void;
}
declare module.exports: MessageQueue;
"
`;

exports[`public API should not change unintentionally Libraries/BatchedBridge/NativeModules.js 1`] = `
"export type ModuleConfig = [
  string,
  ?{ ... },
  ?$ReadOnlyArray<string>,
  ?$ReadOnlyArray<number>,
  ?$ReadOnlyArray<number>,
];
export type MethodType = \\"async\\" | \\"promise\\" | \\"sync\\";
declare let NativeModules: { [moduleName: string]: $FlowFixMe, ... };
declare module.exports: NativeModules;
"
`;

exports[`public API should not change unintentionally Libraries/Blob/Blob.js 1`] = `
"declare class Blob {
  _data: ?BlobData;
  constructor(parts: Array<Blob | string>, options?: BlobOptions): void;
  set data(data: ?BlobData): void;
  get data(): BlobData;
  slice(start?: number, end?: number, contentType: string): Blob;
  close(): void;
  get size(): number;
  get type(): string;
}
declare module.exports: Blob;
"
`;

exports[`public API should not change unintentionally Libraries/Blob/BlobManager.js 1`] = `
"declare class BlobManager {
  static isAvailable: boolean;
  static createFromParts(
    parts: Array<Blob | string>,
    options?: BlobOptions
  ): Blob;
  static createFromOptions(options: BlobData): Blob;
  static release(blobId: string): void;
  static addNetworkingHandler(): void;
  static addWebSocketHandler(socketId: number): void;
  static removeWebSocketHandler(socketId: number): void;
  static sendOverSocket(blob: Blob, socketId: number): void;
}
declare module.exports: BlobManager;
"
`;

exports[`public API should not change unintentionally Libraries/Blob/BlobRegistry.js 1`] = `
"declare const register: (id: string) => void;
declare const unregister: (id: string) => void;
declare const has: (id: string) => number | boolean;
declare module.exports: {
  register: register,
  unregister: unregister,
  has: has,
};
"
`;

exports[`public API should not change unintentionally Libraries/Blob/BlobTypes.js 1`] = `
"declare export opaque type BlobCollector;
export type BlobData = {
  blobId: string,
  offset: number,
  size: number,
  name?: string,
  type?: string,
  lastModified?: number,
  __collector?: ?BlobCollector,
  ...
};
export type BlobOptions = {
  type: string,
  lastModified: number,
  ...
};
"
`;

exports[`public API should not change unintentionally Libraries/Blob/File.js 1`] = `
"declare const Blob: $FlowFixMe;
declare class File extends Blob {
  constructor(
    parts: Array<Blob | string>,
    name: string,
    options?: BlobOptions
  ): void;
  get name(): string;
  get lastModified(): number;
}
declare module.exports: File;
"
`;

exports[`public API should not change unintentionally Libraries/Blob/FileReader.js 1`] = `
"type ReadyState = 0 | 1 | 2;
type ReaderResult = string | ArrayBuffer;
declare class FileReader extends EventTarget {
  static EMPTY: number;
  static LOADING: number;
  static DONE: number;
  EMPTY: number;
  LOADING: number;
  DONE: number;
  _readyState: ReadyState;
  _error: ?Error;
  _result: ?ReaderResult;
  _aborted: boolean;
  constructor(): void;
  _reset(): void;
  _setReadyState(newState: ReadyState): void;
  readAsArrayBuffer(blob: ?Blob): void;
  readAsDataURL(blob: ?Blob): void;
  readAsText(blob: ?Blob, encoding: string): void;
  abort(): void;
  get readyState(): ReadyState;
  get error(): ?Error;
  get result(): ?ReaderResult;
}
declare module.exports: FileReader;
"
`;

exports[`public API should not change unintentionally Libraries/Blob/NativeBlobModule.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeBlobModule\\";
declare export default typeof NativeBlobModule;
"
`;

exports[`public API should not change unintentionally Libraries/Blob/NativeFileReaderModule.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeFileReaderModule\\";
declare export default typeof NativeFileReaderModule;
"
`;

exports[`public API should not change unintentionally Libraries/Blob/URL.js 1`] = `
"export { URLSearchParams } from \\"./URLSearchParams\\";
declare export class URL {
  _url: string;
  _searchParamsInstance: ?URLSearchParams;
  static createObjectURL(blob: Blob): string;
  static revokeObjectURL(url: string): void;
  constructor(url: string, base: string | URL): void;
  get hash(): string;
  get host(): string;
  get hostname(): string;
  get href(): string;
  get origin(): string;
  get password(): string;
  get pathname(): string;
  get port(): string;
  get protocol(): string;
  get search(): string;
  get searchParams(): URLSearchParams;
  toJSON(): string;
  toString(): string;
  get username(): string;
}
"
`;

exports[`public API should not change unintentionally Libraries/Blob/URLSearchParams.js.flow 1`] = `
"declare export class URLSearchParams {
  _searchParams: Array<Array<string>>;
  constructor(params: any): void;
  append(key: string, value: string): void;
  delete(name: string): void;
  get(name: string): void;
  getAll(name: string): void;
  has(name: string): void;
  set(name: string, value: string): void;
  sort(): void;
  @@iterator: Iterator<Array<string>>;
  toString(): string;
}
"
`;

exports[`public API should not change unintentionally Libraries/BugReporting/BugReporting.js 1`] = `
"type ExtraData = { [key: string]: string, ... };
type SourceCallback = () => string;
type DebugData = {
  extras: ExtraData,
  files: ExtraData,
  ...
};
declare class BugReporting {
  static _extraSources: Map<string, SourceCallback>;
  static _fileSources: Map<string, SourceCallback>;
  static _subscription: ?EventSubscription;
  static _redboxSubscription: ?EventSubscription;
  static _maybeInit(): void;
  static addSource(
    key: string,
    callback: SourceCallback
  ): { remove: () => void, ... };
  static addFileSource(
    key: string,
    callback: SourceCallback
  ): { remove: () => void, ... };
  static _addSource(
    key: string,
    callback: SourceCallback,
    source: Map<string, SourceCallback>
  ): { remove: () => void, ... };
  static collectExtraData(): DebugData;
}
declare module.exports: BugReporting;
"
`;

exports[`public API should not change unintentionally Libraries/BugReporting/NativeBugReporting.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeBugReporting\\";
declare export default typeof NativeBugReporting;
"
`;

exports[`public API should not change unintentionally Libraries/BugReporting/dumpReactTree.js 1`] = `
"declare function dumpReactTree(): string;
declare module.exports: dumpReactTree;
"
`;

exports[`public API should not change unintentionally Libraries/BugReporting/getReactData.js 1`] = `
"declare function getData(element: Object): Object;
declare module.exports: getData;
"
`;

exports[`public API should not change unintentionally Libraries/Components/AccessibilityInfo/AccessibilityInfo.js 1`] = `
"type AccessibilityEventDefinitionsAndroid = {
  accessibilityServiceChanged: [boolean],
  highTextContrastChanged: [boolean],
};
type AccessibilityEventDefinitionsIOS = {
  announcementFinished: [{ announcement: string, success: boolean }],
  boldTextChanged: [boolean],
  grayscaleChanged: [boolean],
  invertColorsChanged: [boolean],
  reduceTransparencyChanged: [boolean],
  darkerSystemColorsChanged: [boolean],
};
type AccessibilityEventDefinitions = {
  ...AccessibilityEventDefinitionsAndroid,
  ...AccessibilityEventDefinitionsIOS,
  change: [boolean],
  reduceMotionChanged: [boolean],
  screenReaderChanged: [boolean],
};
type AccessibilityEventTypes = \\"click\\" | \\"focus\\" | \\"viewHoverEnter\\";
declare const AccessibilityInfo: {
  isBoldTextEnabled(): Promise<boolean>,
  isGrayscaleEnabled(): Promise<boolean>,
  isInvertColorsEnabled(): Promise<boolean>,
  isReduceMotionEnabled(): Promise<boolean>,
  isHighTextContrastEnabled(): Promise<boolean>,
  isDarkerSystemColorsEnabled(): Promise<boolean>,
  prefersCrossFadeTransitions(): Promise<boolean>,
  isReduceTransparencyEnabled(): Promise<boolean>,
  isScreenReaderEnabled(): Promise<boolean>,
  isAccessibilityServiceEnabled(): Promise<boolean>,
  addEventListener<K: $Keys<AccessibilityEventDefinitions>>(
    eventName: K,
    handler: (...$ElementType<AccessibilityEventDefinitions, K>) => void
  ): EventSubscription,
  setAccessibilityFocus(reactTag: number): void,
  sendAccessibilityEvent(
    handle: HostInstance,
    eventType: AccessibilityEventTypes
  ): void,
  announceForAccessibility(announcement: string): void,
  announceForAccessibilityWithOptions(
    announcement: string,
    options: { queue?: boolean }
  ): void,
  getRecommendedTimeoutMillis(originalTimeout: number): Promise<number>,
};
declare export default typeof AccessibilityInfo;
"
`;

exports[`public API should not change unintentionally Libraries/Components/AccessibilityInfo/NativeAccessibilityInfo.js 1`] = `
"export * from \\"../../../src/private/specs/modules/NativeAccessibilityInfo\\";
declare export default typeof NativeAccessibilityInfo;
"
`;

exports[`public API should not change unintentionally Libraries/Components/AccessibilityInfo/NativeAccessibilityManager.js 1`] = `
"export * from \\"../../../src/private/specs/modules/NativeAccessibilityManager\\";
declare export default typeof NativeAccessibilityManager;
"
`;

exports[`public API should not change unintentionally Libraries/Components/AccessibilityInfo/legacySendAccessibilityEvent.js.flow 1`] = `
"declare function legacySendAccessibilityEvent(
  reactTag: number,
  eventType: string
): void;
declare module.exports: legacySendAccessibilityEvent;
"
`;

exports[`public API should not change unintentionally Libraries/Components/ActivityIndicator/ActivityIndicator.js 1`] = `
"type IndicatorSize = number | \\"small\\" | \\"large\\";
type IOSProps = $ReadOnly<{|
  hidesWhenStopped?: ?boolean,
|}>;
type Props = $ReadOnly<{|
  ...ViewProps,
  ...IOSProps,
  animating?: ?boolean,
  color?: ?ColorValue,
  size?: ?IndicatorSize,
|}>;
declare const ActivityIndicatorWithRef: component(
  ref: React.RefSetter<HostComponent<empty>>,
  ...props: Props
);
declare export default typeof ActivityIndicatorWithRef;
"
`;

exports[`public API should not change unintentionally Libraries/Components/ActivityIndicator/ActivityIndicatorViewNativeComponent.js 1`] = `
"export * from \\"../../../src/private/specs/components/ActivityIndicatorViewNativeComponent\\";
declare export default typeof ActivityIndicatorViewNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Button.js 1`] = `
"type ButtonProps = $ReadOnly<{|
  title: string,
  onPress: (event?: PressEvent) => mixed,
  touchSoundDisabled?: ?boolean,
  color?: ?ColorValue,
  hasTVPreferredFocus?: ?boolean,
  nextFocusDown?: ?number,
  nextFocusForward?: ?number,
  nextFocusLeft?: ?number,
  nextFocusRight?: ?number,
  nextFocusUp?: ?number,
  accessibilityLabel?: ?string,
  \\"aria-label\\"?: ?string,
  disabled?: ?boolean,
  testID?: ?string,
  accessible?: ?boolean,
  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,
  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,
  accessibilityState?: ?AccessibilityState,
  \\"aria-busy\\"?: ?boolean,
  \\"aria-checked\\"?: ?boolean | \\"mixed\\",
  \\"aria-disabled\\"?: ?boolean,
  \\"aria-expanded\\"?: ?boolean,
  \\"aria-selected\\"?: ?boolean,
  importantForAccessibility?: ?(\\"auto\\" | \\"yes\\" | \\"no\\" | \\"no-hide-descendants\\"),
  accessibilityHint?: ?string,
  accessibilityLanguage?: ?Stringish,
|}>;
declare const Touchable:
  | typeof TouchableNativeFeedback
  | typeof TouchableOpacity;
type ButtonRef = React.ElementRef<typeof Touchable>;
declare const Button: component(
  ref: React.RefSetter<ButtonRef>,
  ...props: ButtonProps
);
declare export default typeof Button;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Clipboard/Clipboard.js 1`] = `
"declare module.exports: {
  getString(): Promise<string>,
  setString(content: string): void,
};
"
`;

exports[`public API should not change unintentionally Libraries/Components/Clipboard/NativeClipboard.js 1`] = `
"export * from \\"../../../src/private/specs/modules/NativeClipboard\\";
declare export default typeof NativeClipboard;
"
`;

exports[`public API should not change unintentionally Libraries/Components/DrawerAndroid/AndroidDrawerLayoutNativeComponent.js 1`] = `
"export * from \\"../../../src/private/specs/components/AndroidDrawerLayoutNativeComponent\\";
declare export default typeof AndroidDrawerLayoutNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.js 1`] = `
"declare module.exports: $FlowFixMe;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Keyboard/Keyboard.js 1`] = `
"export type KeyboardEventName = $Keys<KeyboardEventDefinitions>;
export type KeyboardEventEasing =
  | \\"easeIn\\"
  | \\"easeInEaseOut\\"
  | \\"easeOut\\"
  | \\"linear\\"
  | \\"keyboard\\";
export type KeyboardMetrics = $ReadOnly<{|
  screenX: number,
  screenY: number,
  width: number,
  height: number,
|}>;
export type KeyboardEvent = AndroidKeyboardEvent | IOSKeyboardEvent;
type BaseKeyboardEvent = {|
  duration: number,
  easing: KeyboardEventEasing,
  endCoordinates: KeyboardMetrics,
|};
export type AndroidKeyboardEvent = $ReadOnly<{|
  ...BaseKeyboardEvent,
  duration: 0,
  easing: \\"keyboard\\",
|}>;
export type IOSKeyboardEvent = $ReadOnly<{|
  ...BaseKeyboardEvent,
  startCoordinates: KeyboardMetrics,
  isEventFromThisApp: boolean,
|}>;
type KeyboardEventDefinitions = {
  keyboardWillShow: [KeyboardEvent],
  keyboardDidShow: [KeyboardEvent],
  keyboardWillHide: [KeyboardEvent],
  keyboardDidHide: [KeyboardEvent],
  keyboardWillChangeFrame: [KeyboardEvent],
  keyboardDidChangeFrame: [KeyboardEvent],
};
declare class Keyboard {
  _currentlyShowing: ?KeyboardEvent;
  _emitter: NativeEventEmitter<KeyboardEventDefinitions>;
  constructor(): void;
  addListener<K: $Keys<KeyboardEventDefinitions>>(
    eventType: K,
    listener: (...$ElementType<KeyboardEventDefinitions, K>) => mixed,
    context?: mixed
  ): EventSubscription;
  removeAllListeners<K: $Keys<KeyboardEventDefinitions>>(eventType: ?K): void;
  dismiss(): void;
  isVisible(): boolean;
  metrics(): ?KeyboardMetrics;
  scheduleLayoutAnimation(event: KeyboardEvent): void;
}
declare module.exports: Keyboard;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Keyboard/KeyboardAvoidingView.js 1`] = `
"type Props = $ReadOnly<{|
  ...ViewProps,
  behavior?: ?(\\"height\\" | \\"position\\" | \\"padding\\"),
  contentContainerStyle?: ?ViewStyleProp,
  enabled?: ?boolean,
  keyboardVerticalOffset?: number,
|}>;
type State = {|
  bottom: number,
|};
declare class KeyboardAvoidingView extends React.Component<Props, State> {
  _frame: ?ViewLayout;
  _keyboardEvent: ?KeyboardEvent;
  _subscriptions: Array<EventSubscription>;
  viewRef: { current: React.ElementRef<typeof View> | null, ... };
  _initialFrameHeight: number;
  _bottom: number;
  _windowWidth: number;
  constructor(props: Props): void;
  _relativeKeyboardHeight(keyboardFrame: KeyboardMetrics): Promise<number>;
  _onKeyboardChange: $FlowFixMe;
  _onLayout: $FlowFixMe;
  _onDimensionsChange: $FlowFixMe;
  _setBottom: $FlowFixMe;
  _updateBottomIfNecessary: $FlowFixMe;
  componentDidUpdate(_: Props, prevState: State): void;
  componentDidMount(): void;
  componentWillUnmount(): void;
  render(): React.Node;
}
declare export default typeof KeyboardAvoidingView;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Keyboard/NativeKeyboardObserver.js 1`] = `
"export * from \\"../../../src/private/specs/modules/NativeKeyboardObserver\\";
declare export default typeof NativeKeyboardObserver;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Pressable/Pressable.js 1`] = `
"type ViewStyleProp = $ElementType<React.ElementConfig<typeof View>, \\"style\\">;
export type StateCallbackType = $ReadOnly<{|
  pressed: boolean,
|}>;
type Props = $ReadOnly<{|
  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,
  accessibilityElementsHidden?: ?boolean,
  accessibilityHint?: ?Stringish,
  accessibilityLanguage?: ?Stringish,
  accessibilityIgnoresInvertColors?: ?boolean,
  accessibilityLabel?: ?Stringish,
  accessibilityLiveRegion?: ?(\\"none\\" | \\"polite\\" | \\"assertive\\"),
  accessibilityRole?: ?AccessibilityRole,
  accessibilityState?: ?AccessibilityState,
  accessibilityValue?: ?AccessibilityValue,
  \\"aria-valuemax\\"?: AccessibilityValue[\\"max\\"],
  \\"aria-valuemin\\"?: AccessibilityValue[\\"min\\"],
  \\"aria-valuenow\\"?: AccessibilityValue[\\"now\\"],
  \\"aria-valuetext\\"?: AccessibilityValue[\\"text\\"],
  accessibilityViewIsModal?: ?boolean,
  \\"aria-modal\\"?: ?boolean,
  accessible?: ?boolean,
  \\"aria-busy\\"?: ?boolean,
  \\"aria-checked\\"?: ?boolean | \\"mixed\\",
  \\"aria-disabled\\"?: ?boolean,
  \\"aria-expanded\\"?: ?boolean,
  \\"aria-selected\\"?: ?boolean,
  \\"aria-hidden\\"?: ?boolean,
  \\"aria-live\\"?: ?(\\"polite\\" | \\"assertive\\" | \\"off\\"),
  focusable?: ?boolean,
  importantForAccessibility?: ?(\\"auto\\" | \\"yes\\" | \\"no\\" | \\"no-hide-descendants\\"),
  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,
  cancelable?: ?boolean,
  children: React.Node | ((state: StateCallbackType) => React.Node),
  delayHoverIn?: ?number,
  delayHoverOut?: ?number,
  delayLongPress?: ?number,
  disabled?: ?boolean,
  hitSlop?: ?RectOrSize,
  pressRetentionOffset?: ?RectOrSize,
  onLayout?: ?(event: LayoutEvent) => mixed,
  onHoverIn?: ?(event: MouseEvent) => mixed,
  onHoverOut?: ?(event: MouseEvent) => mixed,
  onLongPress?: ?(event: PressEvent) => mixed,
  onPress?: ?(event: PressEvent) => mixed,
  onPressIn?: ?(event: PressEvent) => mixed,
  onPressOut?: ?(event: PressEvent) => mixed,
  style?: ViewStyleProp | ((state: StateCallbackType) => ViewStyleProp),
  testID?: ?string,
  android_disableSound?: ?boolean,
  android_ripple?: ?RippleConfig,
  testOnly_pressed?: ?boolean,
  unstable_pressDelay?: ?number,
  \\"aria-label\\"?: ?string,
|}>;
declare export default component(
  ref: React.RefSetter<React.ElementRef<typeof View>>,
  ...props: Props
);
"
`;

exports[`public API should not change unintentionally Libraries/Components/Pressable/useAndroidRippleForView.js 1`] = `
"type NativeBackgroundProp = $ReadOnly<{|
  type: \\"RippleAndroid\\",
  color: ?number,
  borderless: boolean,
  rippleRadius: ?number,
|}>;
export type RippleConfig = {|
  color?: ColorValue,
  borderless?: boolean,
  radius?: number,
  foreground?: boolean,
|};
declare export default function useAndroidRippleForView(
  rippleConfig: ?RippleConfig,
  viewRef: {| current: null | React.ElementRef<typeof View> |}
): ?$ReadOnly<{|
  onPressIn: (event: PressEvent) => void,
  onPressMove: (event: PressEvent) => void,
  onPressOut: (event: PressEvent) => void,
  viewProps:
    | $ReadOnly<{| nativeBackgroundAndroid: NativeBackgroundProp |}>
    | $ReadOnly<{| nativeForegroundAndroid: NativeBackgroundProp |}>,
|}>;
"
`;

exports[`public API should not change unintentionally Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.js 1`] = `
"export type { ProgressBarAndroidProps } from \\"./ProgressBarAndroid.android\\";
declare module.exports:
  | UnimplementedViewType
  | ProgressBarAndroidNativeComponentType;
"
`;

exports[`public API should not change unintentionally Libraries/Components/ProgressBarAndroid/ProgressBarAndroidNativeComponent.js 1`] = `
"export * from \\"../../../src/private/specs/components/ProgressBarAndroidNativeComponent\\";
declare export default typeof ProgressBarAndroidNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/Components/RefreshControl/AndroidSwipeRefreshLayoutNativeComponent.js 1`] = `
"export * from \\"../../../src/private/specs/components/AndroidSwipeRefreshLayoutNativeComponent\\";
declare export default typeof AndroidSwipeRefreshLayoutNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/Components/RefreshControl/PullToRefreshViewNativeComponent.js 1`] = `
"export * from \\"../../../src/private/specs/components/PullToRefreshViewNativeComponent\\";
declare export default typeof PullToRefreshViewNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/Components/RefreshControl/RefreshControl.js 1`] = `
"declare const React: $FlowFixMe;
type IOSProps = $ReadOnly<{|
  tintColor?: ?ColorValue,
  titleColor?: ?ColorValue,
  title?: ?string,
|}>;
type AndroidProps = $ReadOnly<{|
  enabled?: ?boolean,
  colors?: ?$ReadOnlyArray<ColorValue>,
  progressBackgroundColor?: ?ColorValue,
  size?: ?(\\"default\\" | \\"large\\"),
|}>;
export type RefreshControlProps = $ReadOnly<{|
  ...ViewProps,
  ...IOSProps,
  ...AndroidProps,
  onRefresh?: ?() => void | Promise<void>,
  refreshing: boolean,
  progressViewOffset?: ?number,
|}>;
declare class RefreshControl extends React.Component<RefreshControlProps> {
  _nativeRef: ?React.ElementRef<
    | typeof PullToRefreshViewNativeComponent
    | typeof AndroidSwipeRefreshLayoutNativeComponent,
  >;
  _lastNativeRefreshing: $FlowFixMe;
  componentDidMount(): void;
  componentDidUpdate(prevProps: RefreshControlProps): void;
  render(): React.Node;
  _onRefresh: $FlowFixMe;
  _setNativeRef: $FlowFixMe;
}
declare module.exports: RefreshControl;
"
`;

exports[`public API should not change unintentionally Libraries/Components/SafeAreaView/RCTSafeAreaViewNativeComponent.js 1`] = `
"export * from \\"../../../src/private/specs/components/RCTSafeAreaViewNativeComponent\\";
declare export default typeof RCTSafeAreaViewNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/Components/SafeAreaView/SafeAreaView.js 1`] = `
"declare const exported: component(
  ref: React.RefSetter<React.ElementRef<typeof View>>,
  ...props: ViewProps
);
declare export default typeof exported;
"
`;

exports[`public API should not change unintentionally Libraries/Components/ScrollView/AndroidHorizontalScrollContentViewNativeComponent.js 1`] = `
"export * from \\"../../../src/private/specs/components/AndroidHorizontalScrollContentViewNativeComponent\\";
declare export default typeof AndroidHorizontalScrollContentViewNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/Components/ScrollView/AndroidHorizontalScrollViewNativeComponent.js 1`] = `
"declare export const __INTERNAL_VIEW_CONFIG: PartialViewConfig;
declare const AndroidHorizontalScrollViewNativeComponent: HostComponent<Props>;
declare export default typeof AndroidHorizontalScrollViewNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/Components/ScrollView/ScrollContentViewNativeComponent.js 1`] = `
"declare export const __INTERNAL_VIEW_CONFIG: PartialViewConfig;
declare const ScrollContentViewNativeComponent: HostComponent<Props>;
declare export default typeof ScrollContentViewNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/Components/ScrollView/ScrollView.js 1`] = `
"export type ScrollViewImperativeMethods = $ReadOnly<{|
  getScrollResponder: $PropertyType<ScrollView, \\"getScrollResponder\\">,
  getScrollableNode: $PropertyType<ScrollView, \\"getScrollableNode\\">,
  getInnerViewNode: $PropertyType<ScrollView, \\"getInnerViewNode\\">,
  getInnerViewRef: $PropertyType<ScrollView, \\"getInnerViewRef\\">,
  getNativeScrollRef: $PropertyType<ScrollView, \\"getNativeScrollRef\\">,
  scrollTo: $PropertyType<ScrollView, \\"scrollTo\\">,
  scrollToEnd: $PropertyType<ScrollView, \\"scrollToEnd\\">,
  flashScrollIndicators: $PropertyType<ScrollView, \\"flashScrollIndicators\\">,
  scrollResponderZoomTo: $PropertyType<ScrollView, \\"scrollResponderZoomTo\\">,
  scrollResponderScrollNativeHandleToKeyboard: $PropertyType<
    ScrollView,
    \\"scrollResponderScrollNativeHandleToKeyboard\\",
  >,
|}>;
export type DecelerationRateType = \\"fast\\" | \\"normal\\" | number;
export type ScrollResponderType = ScrollViewImperativeMethods;
type PublicScrollViewInstance = $ReadOnly<{|
  ...HostInstance,
  ...ScrollViewImperativeMethods,
|}>;
type InnerViewInstance = React.ElementRef<View>;
type IOSProps = $ReadOnly<{|
  automaticallyAdjustContentInsets?: ?boolean,
  automaticallyAdjustKeyboardInsets?: ?boolean,
  automaticallyAdjustsScrollIndicatorInsets?: ?boolean,
  contentInset?: ?EdgeInsetsProp,
  bounces?: ?boolean,
  disableScrollViewPanResponder?: ?boolean,
  bouncesZoom?: ?boolean,
  alwaysBounceHorizontal?: ?boolean,
  alwaysBounceVertical?: ?boolean,
  centerContent?: ?boolean,
  indicatorStyle?: ?(\\"default\\" | \\"black\\" | \\"white\\"),
  directionalLockEnabled?: ?boolean,
  canCancelContentTouches?: ?boolean,
  maximumZoomScale?: ?number,
  minimumZoomScale?: ?number,
  pinchGestureEnabled?: ?boolean,
  scrollIndicatorInsets?: ?EdgeInsetsProp,
  scrollToOverflowEnabled?: ?boolean,
  scrollsToTop?: ?boolean,
  onScrollToTop?: (event: ScrollEvent) => void,
  showsHorizontalScrollIndicator?: ?boolean,
  zoomScale?: ?number,
  contentInsetAdjustmentBehavior?: ?(
    | \\"automatic\\"
    | \\"scrollableAxes\\"
    | \\"never\\"
    | \\"always\\"
  ),
|}>;
type AndroidProps = $ReadOnly<{|
  nestedScrollEnabled?: ?boolean,
  endFillColor?: ?ColorValue,
  scrollPerfTag?: ?string,
  overScrollMode?: ?(\\"auto\\" | \\"always\\" | \\"never\\"),
  persistentScrollbar?: ?boolean,
  fadingEdgeLength?: ?number,
|}>;
type StickyHeaderComponentType = component(
  ref?: React.RefSetter<
    $ReadOnly<interface { setNextHeaderY: (number) => void }>,
  >,
  ...ScrollViewStickyHeaderProps
);
export type Props = $ReadOnly<{|
  ...ViewProps,
  ...IOSProps,
  ...AndroidProps,
  contentContainerStyle?: ?ViewStyleProp,
  contentOffset?: ?PointProp,
  disableIntervalMomentum?: ?boolean,
  decelerationRate?: ?DecelerationRateType,
  experimental_endDraggingSensitivityMultiplier?: ?number,
  horizontal?: ?boolean,
  invertStickyHeaders?: ?boolean,
  keyboardDismissMode?: ?(\\"none\\" | \\"on-drag\\" | \\"interactive\\"),
  keyboardShouldPersistTaps?: ?(\\"always\\" | \\"never\\" | \\"handled\\" | true | false),
  maintainVisibleContentPosition?: ?$ReadOnly<{|
    minIndexForVisible: number,
    autoscrollToTopThreshold?: ?number,
  |}>,
  onMomentumScrollBegin?: ?(event: ScrollEvent) => void,
  onMomentumScrollEnd?: ?(event: ScrollEvent) => void,
  onScroll?: ?(event: ScrollEvent) => void,
  onScrollBeginDrag?: ?(event: ScrollEvent) => void,
  onScrollEndDrag?: ?(event: ScrollEvent) => void,
  onContentSizeChange?: (contentWidth: number, contentHeight: number) => void,
  onKeyboardDidShow?: (event: KeyboardEvent) => void,
  onKeyboardDidHide?: (event: KeyboardEvent) => void,
  onKeyboardWillShow?: (event: KeyboardEvent) => void,
  onKeyboardWillHide?: (event: KeyboardEvent) => void,
  pagingEnabled?: ?boolean,
  scrollEnabled?: ?boolean,
  scrollEventThrottle?: ?number,
  showsVerticalScrollIndicator?: ?boolean,
  stickyHeaderHiddenOnScroll?: ?boolean,
  stickyHeaderIndices?: ?$ReadOnlyArray<number>,
  StickyHeaderComponent?: StickyHeaderComponentType,
  snapToAlignment?: ?(\\"start\\" | \\"center\\" | \\"end\\"),
  snapToInterval?: ?number,
  snapToOffsets?: ?$ReadOnlyArray<number>,
  snapToStart?: ?boolean,
  snapToEnd?: ?boolean,
  removeClippedSubviews?: ?boolean,
  refreshControl?: ?ExactReactElement_DEPRECATED<any>,
  children?: React.Node,
  innerViewRef?: React.RefSetter<InnerViewInstance>,
  scrollViewRef?: React.RefSetter<PublicScrollViewInstance>,
|}>;
type State = {|
  layoutHeight: ?number,
|};
export type ScrollViewComponentStatics = $ReadOnly<{|
  Context: typeof ScrollViewContext,
|}>;
declare class ScrollView extends React.Component<Props, State> {
  static Context: typeof ScrollViewContext;
  constructor(props: Props): void;
  _scrollAnimatedValue: AnimatedImplementation.Value;
  _scrollAnimatedValueAttachment: ?{ detach: () => void, ... };
  _stickyHeaderRefs: Map<string, React.ElementRef<StickyHeaderComponentType>>;
  _headerLayoutYs: Map<string, number>;
  _keyboardMetrics: ?KeyboardMetrics;
  _additionalScrollOffset: number;
  _isTouching: boolean;
  _lastMomentumScrollBeginTime: number;
  _lastMomentumScrollEndTime: number;
  _observedScrollSinceBecomingResponder: boolean;
  _becameResponderWhileAnimating: boolean;
  _preventNegativeScrollOffset: ?boolean;
  _animated: ?boolean;
  _subscriptionKeyboardWillShow: ?EventSubscription;
  _subscriptionKeyboardWillHide: ?EventSubscription;
  _subscriptionKeyboardDidShow: ?EventSubscription;
  _subscriptionKeyboardDidHide: ?EventSubscription;
  state: State;
  componentDidMount(): void;
  componentDidUpdate(prevProps: Props): void;
  componentWillUnmount(): void;
  getScrollResponder: () => ScrollResponderType;
  getScrollableNode: () => ?number;
  getInnerViewNode: () => ?number;
  getInnerViewRef: () => InnerViewInstance | null;
  getNativeScrollRef: () => HostInstance | null;
  scrollTo: (
    options?:
      | {
          x?: number,
          y?: number,
          animated?: boolean,
          ...
        }
      | number,
    deprecatedX?: number,
    deprecatedAnimated?: boolean
  ) => void;
  scrollToEnd: (options?: ?{ animated?: boolean, ... }) => void;
  flashScrollIndicators: () => void;
  scrollResponderScrollNativeHandleToKeyboard: (
    nodeHandle: number | HostInstance,
    additionalOffset?: number,
    preventNegativeScrollOffset?: boolean
  ) => void;
  scrollResponderZoomTo: (
    rect: {|
      x: number,
      y: number,
      width: number,
      height: number,
      animated?: boolean,
    |},
    animated?: boolean
  ) => void;
  _textInputFocusError(): void;
  _inputMeasureAndScrollToKeyboard: (
    left: number,
    top: number,
    width: number,
    height: number
  ) => void;
  _getKeyForIndex(index: $FlowFixMe, childArray: $FlowFixMe): $FlowFixMe;
  _updateAnimatedNodeAttachment(): void;
  _setStickyHeaderRef(
    key: string,
    ref: ?React.ElementRef<StickyHeaderComponentType>
  ): void;
  _onStickyHeaderLayout(
    index: $FlowFixMe,
    event: $FlowFixMe,
    key: $FlowFixMe
  ): void;
  _handleScroll: $FlowFixMe;
  _handleLayout: $FlowFixMe;
  _handleContentOnLayout: $FlowFixMe;
  _innerView: RefForwarder<InnerViewInstance, InnerViewInstance>;
  _scrollView: RefForwarder<HostInstance, PublicScrollViewInstance | null>;
  scrollResponderKeyboardWillShow: (e: KeyboardEvent) => void;
  scrollResponderKeyboardWillHide: (e: KeyboardEvent) => void;
  scrollResponderKeyboardDidShow: (e: KeyboardEvent) => void;
  scrollResponderKeyboardDidHide: (e: KeyboardEvent) => void;
  _handleMomentumScrollBegin: (e: ScrollEvent) => void;
  _handleMomentumScrollEnd: (e: ScrollEvent) => void;
  _handleScrollBeginDrag: (e: ScrollEvent) => void;
  _handleScrollEndDrag: (e: ScrollEvent) => void;
  _isAnimating: () => boolean;
  _handleResponderGrant: (e: PressEvent) => void;
  _handleResponderReject: () => void;
  _handleResponderRelease: (e: PressEvent) => void;
  _handleResponderTerminationRequest: () => boolean;
  _handleScrollShouldSetResponder: () => boolean;
  _handleStartShouldSetResponder: (e: PressEvent) => boolean;
  _handleStartShouldSetResponderCapture: (e: PressEvent) => boolean;
  _keyboardIsDismissible: () => boolean;
  _softKeyboardIsDetached: () => boolean;
  _keyboardEventsAreUnreliable: () => boolean;
  _handleTouchEnd: (e: PressEvent) => void;
  _handleTouchCancel: (e: PressEvent) => void;
  _handleTouchStart: (e: PressEvent) => void;
  _handleTouchMove: (e: PressEvent) => void;
  render(): React.Node;
}
type RefForwarder<TNativeInstance, TPublicInstance> = {
  getForwardingRef: (
    ?React.RefSetter<TPublicInstance>
  ) => (TNativeInstance | null) => void,
  nativeInstance: TNativeInstance | null,
  publicInstance: TPublicInstance | null,
};
declare const Wrapper: component(
  ref: React.RefSetter<PublicScrollViewInstance>,
  ...props: Props
);
declare module.exports: typeof Wrapper & ScrollViewComponentStatics;
"
`;

exports[`public API should not change unintentionally Libraries/Components/ScrollView/ScrollViewCommands.js 1`] = `
"type ScrollViewNativeComponentType = HostComponent<{ ... }>;
interface NativeCommands {
  +flashScrollIndicators: (
    viewRef: React.ElementRef<ScrollViewNativeComponentType>
  ) => void;
  +scrollTo: (
    viewRef: React.ElementRef<ScrollViewNativeComponentType>,
    x: Double,
    y: Double,
    animated: boolean
  ) => void;
  +scrollToEnd: (
    viewRef: React.ElementRef<ScrollViewNativeComponentType>,
    animated: boolean
  ) => void;
  +zoomToRect: (
    viewRef: React.ElementRef<ScrollViewNativeComponentType>,
    rect: {|
      x: Double,
      y: Double,
      width: Double,
      height: Double,
      animated?: boolean,
    |},
    animated?: boolean
  ) => void;
}
declare export default NativeCommands;
"
`;

exports[`public API should not change unintentionally Libraries/Components/ScrollView/ScrollViewContext.js 1`] = `
"type Value = { horizontal: boolean } | null;
declare const ScrollViewContext: React.Context<Value>;
declare export default typeof ScrollViewContext;
declare export const HORIZONTAL: Value;
declare export const VERTICAL: Value;
"
`;

exports[`public API should not change unintentionally Libraries/Components/ScrollView/ScrollViewNativeComponent.js 1`] = `
"declare export const __INTERNAL_VIEW_CONFIG: PartialViewConfig;
declare const ScrollViewNativeComponent: HostComponent<Props>;
declare export default typeof ScrollViewNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/Components/ScrollView/ScrollViewNativeComponentType.js 1`] = `
"export type ScrollViewNativeProps = $ReadOnly<{
  ...ViewProps,
  alwaysBounceHorizontal?: ?boolean,
  alwaysBounceVertical?: ?boolean,
  automaticallyAdjustContentInsets?: ?boolean,
  automaticallyAdjustKeyboardInsets?: ?boolean,
  automaticallyAdjustsScrollIndicatorInsets?: ?boolean,
  bounces?: ?boolean,
  bouncesZoom?: ?boolean,
  canCancelContentTouches?: ?boolean,
  centerContent?: ?boolean,
  contentInset?: ?EdgeInsetsProp,
  contentInsetAdjustmentBehavior?: ?(
    | \\"automatic\\"
    | \\"scrollableAxes\\"
    | \\"never\\"
    | \\"always\\"
  ),
  contentOffset?: ?PointProp,
  decelerationRate?: ?(\\"fast\\" | \\"normal\\" | number),
  directionalLockEnabled?: ?boolean,
  disableIntervalMomentum?: ?boolean,
  endFillColor?: ?ColorValue,
  fadingEdgeLength?: ?number,
  indicatorStyle?: ?(\\"default\\" | \\"black\\" | \\"white\\"),
  isInvertedVirtualizedList?: ?boolean,
  keyboardDismissMode?: ?(\\"none\\" | \\"on-drag\\" | \\"interactive\\"),
  maintainVisibleContentPosition?: ?$ReadOnly<{
    minIndexForVisible: number,
    autoscrollToTopThreshold?: ?number,
  }>,
  maximumZoomScale?: ?number,
  minimumZoomScale?: ?number,
  nestedScrollEnabled?: ?boolean,
  onMomentumScrollBegin?: ?(event: ScrollEvent) => void,
  onMomentumScrollEnd?: ?(event: ScrollEvent) => void,
  onScroll?: ?(event: ScrollEvent) => void,
  onScrollBeginDrag?: ?(event: ScrollEvent) => void,
  onScrollEndDrag?: ?(event: ScrollEvent) => void,
  onScrollToTop?: (event: ScrollEvent) => void,
  overScrollMode?: ?(\\"auto\\" | \\"always\\" | \\"never\\"),
  pagingEnabled?: ?boolean,
  persistentScrollbar?: ?boolean,
  pinchGestureEnabled?: ?boolean,
  scrollEnabled?: ?boolean,
  scrollEventThrottle?: ?number,
  scrollIndicatorInsets?: ?EdgeInsetsProp,
  scrollPerfTag?: ?string,
  scrollToOverflowEnabled?: ?boolean,
  scrollsToTop?: ?boolean,
  sendMomentumEvents?: ?boolean,
  showsHorizontalScrollIndicator?: ?boolean,
  showsVerticalScrollIndicator?: ?boolean,
  snapToAlignment?: ?(\\"start\\" | \\"center\\" | \\"end\\"),
  snapToEnd?: ?boolean,
  snapToInterval?: ?number,
  snapToOffsets?: ?$ReadOnlyArray<number>,
  snapToStart?: ?boolean,
  zoomScale?: ?number,
  onResponderGrant?: ?(e: $FlowFixMe) => void | boolean,
  ...
}>;
"
`;

exports[`public API should not change unintentionally Libraries/Components/ScrollView/ScrollViewStickyHeader.js 1`] = `
"export type Props = $ReadOnly<{
  children?: ExactReactElement_DEPRECATED<$FlowFixMe>,
  nextHeaderLayoutY: ?number,
  onLayout: (event: LayoutEvent) => void,
  scrollAnimatedValue: Animated.Value,
  inverted: ?boolean,
  scrollViewHeight: ?number,
  nativeID?: ?string,
  hiddenOnScroll?: ?boolean,
}>;
type Instance = {
  ...React.ElementRef<typeof Animated.View>,
  setNextHeaderY: (number) => void,
  ...
};
declare const ScrollViewStickyHeaderWithForwardedRef: component(
  ref: React.RefSetter<Instance>,
  ...props: Props
);
declare export default typeof ScrollViewStickyHeaderWithForwardedRef;
"
`;

exports[`public API should not change unintentionally Libraries/Components/ScrollView/processDecelerationRate.js 1`] = `
"declare function processDecelerationRate(
  decelerationRate: number | \\"normal\\" | \\"fast\\"
): number;
declare module.exports: processDecelerationRate;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Sound/NativeSoundManager.js 1`] = `
"export * from \\"../../../src/private/specs/modules/NativeSoundManager\\";
declare export default typeof NativeSoundManager;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Sound/SoundManager.js 1`] = `
"declare const SoundManager: { playTouchSound: () => void };
declare module.exports: SoundManager;
"
`;

exports[`public API should not change unintentionally Libraries/Components/StaticRenderer.js 1`] = `
"declare const React: $FlowFixMe;
type Props = $ReadOnly<{|
  shouldUpdate: boolean,
  render: () => React.Node,
|}>;
declare class StaticRenderer extends React.Component<Props> {
  shouldComponentUpdate(nextProps: Props): boolean;
  render(): React.Node;
}
declare module.exports: StaticRenderer;
"
`;

exports[`public API should not change unintentionally Libraries/Components/StatusBar/NativeStatusBarManagerAndroid.js 1`] = `
"export * from \\"../../../src/private/specs/modules/NativeStatusBarManagerAndroid\\";
declare export default typeof NativeStatusBarManagerAndroid;
"
`;

exports[`public API should not change unintentionally Libraries/Components/StatusBar/NativeStatusBarManagerIOS.js 1`] = `
"export * from \\"../../../src/private/specs/modules/NativeStatusBarManagerIOS\\";
declare export default typeof NativeStatusBarManagerIOS;
"
`;

exports[`public API should not change unintentionally Libraries/Components/StatusBar/StatusBar.js 1`] = `
"export type StatusBarStyle = $Keys<{
  default: string,
  \\"light-content\\": string,
  \\"dark-content\\": string,
  ...
}>;
export type StatusBarAnimation = $Keys<{
  none: string,
  fade: string,
  slide: string,
  ...
}>;
type AndroidProps = $ReadOnly<{|
  backgroundColor?: ?ColorValue,
  translucent?: ?boolean,
|}>;
type IOSProps = $ReadOnly<{|
  networkActivityIndicatorVisible?: ?boolean,
  showHideTransition?: ?(\\"fade\\" | \\"slide\\" | \\"none\\"),
|}>;
type Props = $ReadOnly<{|
  ...AndroidProps,
  ...IOSProps,
  hidden?: ?boolean,
  animated?: ?boolean,
  barStyle?: ?(\\"default\\" | \\"light-content\\" | \\"dark-content\\"),
|}>;
declare class StatusBar extends React.Component<Props> {
  static _propsStack: Array<any>;
  static _defaultProps: any;
  static _updateImmediate: $FlowFixMe;
  static _currentValues: $FlowFixMe;
  static currentHeight: ?number;
  static setHidden(hidden: boolean, animation?: StatusBarAnimation): void;
  static setBarStyle(style: StatusBarStyle, animated?: boolean): void;
  static setNetworkActivityIndicatorVisible(visible: boolean): void;
  static setBackgroundColor(color: string, animated?: boolean): void;
  static setTranslucent(translucent: boolean): void;
  static pushStackEntry(props: any): any;
  static popStackEntry(entry: any): void;
  static replaceStackEntry(entry: any, props: any): any;
  _stackEntry: $FlowFixMe;
  componentDidMount(): void;
  componentWillUnmount(): void;
  componentDidUpdate(): void;
  static _updatePropsStack: $FlowFixMe;
  render(): React.Node;
}
declare module.exports: StatusBar;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Switch/AndroidSwitchNativeComponent.js 1`] = `
"export * from \\"../../../src/private/specs/components/AndroidSwitchNativeComponent\\";
declare export default typeof AndroidSwitchNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Switch/Switch.js 1`] = `
"type SwitchChangeEvent = SyntheticEvent<
  $ReadOnly<{|
    value: boolean,
    target: number,
  |}>,
>;
export type Props = $ReadOnly<{|
  ...ViewProps,
  disabled?: ?boolean,
  value?: ?boolean,
  thumbColor?: ?ColorValue,
  trackColor?: ?$ReadOnly<{|
    false?: ?ColorValue,
    true?: ?ColorValue,
  |}>,
  ios_backgroundColor?: ?ColorValue,
  onChange?: ?(event: SwitchChangeEvent) => Promise<void> | void,
  onValueChange?: ?(value: boolean) => Promise<void> | void,
|}>;
type SwitchRef = React.ElementRef<
  typeof SwitchNativeComponent | typeof AndroidSwitchNativeComponent,
>;
declare const SwitchWithForwardedRef: component(
  ref: React.RefSetter<SwitchRef>,
  ...props: Props
);
declare export default typeof SwitchWithForwardedRef;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Switch/SwitchNativeComponent.js 1`] = `
"export * from \\"../../../src/private/specs/components/SwitchNativeComponent\\";
declare export default typeof SwitchNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/Components/TextInput/AndroidTextInputNativeComponent.js 1`] = `
"export type KeyboardType =
  | \\"default\\"
  | \\"email-address\\"
  | \\"numeric\\"
  | \\"phone-pad\\"
  | \\"number-pad\\"
  | \\"decimal-pad\\"
  | \\"url\\"
  | \\"ascii-capable\\"
  | \\"numbers-and-punctuation\\"
  | \\"name-phone-pad\\"
  | \\"twitter\\"
  | \\"web-search\\"
  | \\"visible-password\\";
export type ReturnKeyType =
  | \\"done\\"
  | \\"go\\"
  | \\"next\\"
  | \\"search\\"
  | \\"send\\"
  | \\"none\\"
  | \\"previous\\"
  | \\"default\\"
  | \\"emergency-call\\"
  | \\"google\\"
  | \\"join\\"
  | \\"route\\"
  | \\"yahoo\\";
export type SubmitBehavior = \\"submit\\" | \\"blurAndSubmit\\" | \\"newline\\";
export type NativeProps = $ReadOnly<{|
  ...$Diff<ViewProps, $ReadOnly<{| style: ?ViewStyleProp |}>>,
  autoComplete?: WithDefault<
    | \\"birthdate-day\\"
    | \\"birthdate-full\\"
    | \\"birthdate-month\\"
    | \\"birthdate-year\\"
    | \\"cc-csc\\"
    | \\"cc-exp\\"
    | \\"cc-exp-day\\"
    | \\"cc-exp-month\\"
    | \\"cc-exp-year\\"
    | \\"cc-number\\"
    | \\"email\\"
    | \\"gender\\"
    | \\"name\\"
    | \\"name-family\\"
    | \\"name-given\\"
    | \\"name-middle\\"
    | \\"name-middle-initial\\"
    | \\"name-prefix\\"
    | \\"name-suffix\\"
    | \\"password\\"
    | \\"password-new\\"
    | \\"postal-address\\"
    | \\"postal-address-country\\"
    | \\"postal-address-extended\\"
    | \\"postal-address-extended-postal-code\\"
    | \\"postal-address-locality\\"
    | \\"postal-address-region\\"
    | \\"postal-code\\"
    | \\"street-address\\"
    | \\"sms-otp\\"
    | \\"tel\\"
    | \\"tel-country-code\\"
    | \\"tel-national\\"
    | \\"tel-device\\"
    | \\"username\\"
    | \\"username-new\\"
    | \\"off\\",
    \\"off\\",
  >,
  returnKeyLabel?: ?string,
  numberOfLines?: ?Int32,
  disableFullscreenUI?: ?boolean,
  textBreakStrategy?: WithDefault<
    \\"simple\\" | \\"highQuality\\" | \\"balanced\\",
    \\"simple\\",
  >,
  underlineColorAndroid?: ?ColorValue,
  inlineImageLeft?: ?string,
  inlineImagePadding?: ?Int32,
  importantForAutofill?: string,
  showSoftInputOnFocus?: ?boolean,
  autoCapitalize?: WithDefault<
    \\"none\\" | \\"sentences\\" | \\"words\\" | \\"characters\\",
    \\"none\\",
  >,
  autoCorrect?: ?boolean,
  autoFocus?: ?boolean,
  allowFontScaling?: ?boolean,
  maxFontSizeMultiplier?: ?Float,
  editable?: ?boolean,
  keyboardType?: WithDefault<KeyboardType, \\"default\\">,
  returnKeyType?: WithDefault<ReturnKeyType, \\"done\\">,
  maxLength?: ?Int32,
  multiline?: ?boolean,
  onBlur?: ?BubblingEventHandler<$ReadOnly<{| target: Int32 |}>>,
  onFocus?: ?BubblingEventHandler<$ReadOnly<{| target: Int32 |}>>,
  onChange?: ?BubblingEventHandler<
    $ReadOnly<{| target: Int32, eventCount: Int32, text: string |}>,
  >,
  onChangeText?: ?BubblingEventHandler<
    $ReadOnly<{| target: Int32, eventCount: Int32, text: string |}>,
  >,
  onContentSizeChange?: ?DirectEventHandler<
    $ReadOnly<{|
      target: Int32,
      contentSize: $ReadOnly<{| width: Double, height: Double |}>,
    |}>,
  >,
  onEndEditing?: ?BubblingEventHandler<
    $ReadOnly<{| target: Int32, text: string |}>,
  >,
  onSelectionChange?: ?DirectEventHandler<
    $ReadOnly<{|
      target: Int32,
      selection: $ReadOnly<{| start: Double, end: Double |}>,
    |}>,
  >,
  onSubmitEditing?: ?BubblingEventHandler<
    $ReadOnly<{| target: Int32, text: string |}>,
  >,
  onKeyPress?: ?BubblingEventHandler<
    $ReadOnly<{| target: Int32, key: string |}>,
  >,
  onScroll?: ?DirectEventHandler<
    $ReadOnly<{|
      target: Int32,
      responderIgnoreScroll: boolean,
      contentInset: $ReadOnly<{|
        top: Double,
        bottom: Double,
        left: Double,
        right: Double,
      |}>,
      contentOffset: $ReadOnly<{|
        x: Double,
        y: Double,
      |}>,
      contentSize: $ReadOnly<{|
        width: Double,
        height: Double,
      |}>,
      layoutMeasurement: $ReadOnly<{|
        width: Double,
        height: Double,
      |}>,
      velocity: $ReadOnly<{|
        x: Double,
        y: Double,
      |}>,
    |}>,
  >,
  placeholder?: ?Stringish,
  placeholderTextColor?: ?ColorValue,
  secureTextEntry?: ?boolean,
  selectionColor?: ?ColorValue,
  selectionHandleColor?: ?ColorValue,
  selection?: ?$ReadOnly<{|
    start: Int32,
    end?: ?Int32,
  |}>,
  value?: ?string,
  defaultValue?: ?string,
  selectTextOnFocus?: ?boolean,
  blurOnSubmit?: ?boolean,
  submitBehavior?: ?SubmitBehavior,
  style?: ?TextStyleProp,
  caretHidden?: ?boolean,
  contextMenuHidden?: ?boolean,
  textShadowColor?: ?ColorValue,
  textShadowRadius?: ?Float,
  textDecorationLine?: ?string,
  fontStyle?: ?string,
  textShadowOffset?: ?$ReadOnly<{| width?: ?Double, height?: ?Double |}>,
  lineHeight?: ?Float,
  textTransform?: ?string,
  color?: ?Int32,
  letterSpacing?: ?Float,
  fontSize?: ?Float,
  textAlign?: ?string,
  includeFontPadding?: ?boolean,
  fontWeight?: ?string,
  fontFamily?: ?string,
  textAlignVertical?: ?string,
  cursorColor?: ?ColorValue,
  mostRecentEventCount: Int32,
  text?: ?string,
|}>;
type NativeType = HostComponent<NativeProps>;
type NativeCommands = TextInputNativeCommands<NativeType>;
declare export const Commands: NativeCommands;
declare export const __INTERNAL_VIEW_CONFIG: PartialViewConfig;
declare export default HostComponent<NativeProps>;
"
`;

exports[`public API should not change unintentionally Libraries/Components/TextInput/InputAccessoryView.js 1`] = `
"type Props = $ReadOnly<{|
  +children: React.Node,
  nativeID?: ?string,
  style?: ?ViewStyleProp,
  backgroundColor?: ?ColorValue,
|}>;
declare const InputAccessoryView: React.ComponentType<Props>;
declare export default typeof InputAccessoryView;
"
`;

exports[`public API should not change unintentionally Libraries/Components/TextInput/RCTInputAccessoryViewNativeComponent.js 1`] = `
"export * from \\"../../../src/private/specs/components/RCTInputAccessoryViewNativeComponent\\";
declare export default typeof RCTInputAccessoryViewNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/Components/TextInput/RCTMultilineTextInputNativeComponent.js 1`] = `
"type NativeType = HostComponent<{ ... }>;
type NativeCommands = TextInputNativeCommands<NativeType>;
declare export const Commands: NativeCommands;
declare export const __INTERNAL_VIEW_CONFIG: PartialViewConfig;
declare export default HostComponent<{ ... }>;
"
`;

exports[`public API should not change unintentionally Libraries/Components/TextInput/RCTSingelineTextInputNativeComponent.js 1`] = `
"type NativeType = HostComponent<{ ... }>;
type NativeCommands = TextInputNativeCommands<NativeType>;
declare export const Commands: NativeCommands;
declare export const __INTERNAL_VIEW_CONFIG: PartialViewConfig;
declare export default HostComponent<{ ... }>;
"
`;

exports[`public API should not change unintentionally Libraries/Components/TextInput/RCTTextInputViewConfig.js 1`] = `
"type PartialViewConfigWithoutName = $Rest<
  PartialViewConfig,
  { uiViewClassName: string },
>;
declare module.exports: PartialViewConfigWithoutName;
"
`;

exports[`public API should not change unintentionally Libraries/Components/TextInput/TextInput.flow.js 1`] = `
"type ReactRefSetter<T> =
  | { current: null | T, ... }
  | ((ref: null | T) => mixed);
export type ChangeEvent = SyntheticEvent<
  $ReadOnly<{|
    eventCount: number,
    target: number,
    text: string,
  |}>,
>;
export type TextInputEvent = SyntheticEvent<
  $ReadOnly<{|
    eventCount: number,
    previousText: string,
    range: $ReadOnly<{|
      start: number,
      end: number,
    |}>,
    target: number,
    text: string,
  |}>,
>;
export type ContentSizeChangeEvent = SyntheticEvent<
  $ReadOnly<{|
    target: number,
    contentSize: $ReadOnly<{|
      width: number,
      height: number,
    |}>,
  |}>,
>;
type TargetEvent = SyntheticEvent<
  $ReadOnly<{|
    target: number,
  |}>,
>;
export type BlurEvent = TargetEvent;
export type FocusEvent = TargetEvent;
type Selection = $ReadOnly<{|
  start: number,
  end: number,
|}>;
export type SelectionChangeEvent = SyntheticEvent<
  $ReadOnly<{|
    selection: Selection,
    target: number,
  |}>,
>;
export type KeyPressEvent = SyntheticEvent<
  $ReadOnly<{|
    key: string,
    target?: ?number,
    eventCount?: ?number,
  |}>,
>;
export type EditingEvent = SyntheticEvent<
  $ReadOnly<{|
    eventCount: number,
    text: string,
    target: number,
  |}>,
>;
type DataDetectorTypesType =
  | \\"phoneNumber\\"
  | \\"link\\"
  | \\"address\\"
  | \\"calendarEvent\\"
  | \\"trackingNumber\\"
  | \\"flightNumber\\"
  | \\"lookupSuggestion\\"
  | \\"none\\"
  | \\"all\\";
export type KeyboardType =
  | \\"default\\"
  | \\"email-address\\"
  | \\"numeric\\"
  | \\"phone-pad\\"
  | \\"number-pad\\"
  | \\"decimal-pad\\"
  | \\"url\\"
  | \\"ascii-capable\\"
  | \\"numbers-and-punctuation\\"
  | \\"name-phone-pad\\"
  | \\"twitter\\"
  | \\"web-search\\"
  | \\"ascii-capable-number-pad\\"
  | \\"visible-password\\";
export type InputMode =
  | \\"none\\"
  | \\"text\\"
  | \\"decimal\\"
  | \\"numeric\\"
  | \\"tel\\"
  | \\"search\\"
  | \\"email\\"
  | \\"url\\";
export type ReturnKeyType =
  | \\"done\\"
  | \\"go\\"
  | \\"next\\"
  | \\"search\\"
  | \\"send\\"
  | \\"none\\"
  | \\"previous\\"
  | \\"default\\"
  | \\"emergency-call\\"
  | \\"google\\"
  | \\"join\\"
  | \\"route\\"
  | \\"yahoo\\";
export type SubmitBehavior = \\"submit\\" | \\"blurAndSubmit\\" | \\"newline\\";
export type AutoCapitalize = \\"none\\" | \\"sentences\\" | \\"words\\" | \\"characters\\";
export type TextContentType =
  | \\"none\\"
  | \\"URL\\"
  | \\"addressCity\\"
  | \\"addressCityAndState\\"
  | \\"addressState\\"
  | \\"countryName\\"
  | \\"creditCardNumber\\"
  | \\"creditCardExpiration\\"
  | \\"creditCardExpirationMonth\\"
  | \\"creditCardExpirationYear\\"
  | \\"creditCardSecurityCode\\"
  | \\"creditCardType\\"
  | \\"creditCardName\\"
  | \\"creditCardGivenName\\"
  | \\"creditCardMiddleName\\"
  | \\"creditCardFamilyName\\"
  | \\"emailAddress\\"
  | \\"familyName\\"
  | \\"fullStreetAddress\\"
  | \\"givenName\\"
  | \\"jobTitle\\"
  | \\"location\\"
  | \\"middleName\\"
  | \\"name\\"
  | \\"namePrefix\\"
  | \\"nameSuffix\\"
  | \\"nickname\\"
  | \\"organizationName\\"
  | \\"postalCode\\"
  | \\"streetAddressLine1\\"
  | \\"streetAddressLine2\\"
  | \\"sublocality\\"
  | \\"telephoneNumber\\"
  | \\"username\\"
  | \\"password\\"
  | \\"newPassword\\"
  | \\"oneTimeCode\\"
  | \\"birthdate\\"
  | \\"birthdateDay\\"
  | \\"birthdateMonth\\"
  | \\"birthdateYear\\"
  | \\"cellularEID\\"
  | \\"cellularIMEI\\"
  | \\"dateTime\\"
  | \\"flightNumber\\"
  | \\"shipmentTrackingNumber\\";
export type enterKeyHintType =
  | \\"enter\\"
  | \\"done\\"
  | \\"go\\"
  | \\"next\\"
  | \\"previous\\"
  | \\"search\\"
  | \\"send\\";
type PasswordRules = string;
type IOSProps = $ReadOnly<{|
  clearButtonMode?: ?(\\"never\\" | \\"while-editing\\" | \\"unless-editing\\" | \\"always\\"),
  clearTextOnFocus?: ?boolean,
  dataDetectorTypes?:
    | ?DataDetectorTypesType
    | $ReadOnlyArray<DataDetectorTypesType>,
  enablesReturnKeyAutomatically?: ?boolean,
  inputAccessoryViewID?: ?string,
  inputAccessoryViewButtonLabel?: ?string,
  keyboardAppearance?: ?(\\"default\\" | \\"light\\" | \\"dark\\"),
  passwordRules?: ?PasswordRules,
  rejectResponderTermination?: ?boolean,
  scrollEnabled?: ?boolean,
  spellCheck?: ?boolean,
  textContentType?: ?TextContentType,
  lineBreakStrategyIOS?: ?(\\"none\\" | \\"standard\\" | \\"hangul-word\\" | \\"push-out\\"),
  lineBreakModeIOS?: ?(
    | \\"wordWrapping\\"
    | \\"char\\"
    | \\"clip\\"
    | \\"head\\"
    | \\"middle\\"
    | \\"tail\\"
  ),
  smartInsertDelete?: ?boolean,
|}>;
type AndroidProps = $ReadOnly<{|
  cursorColor?: ?ColorValue,
  selectionHandleColor?: ?ColorValue,
  disableFullscreenUI?: ?boolean,
  importantForAutofill?: ?(
    | \\"auto\\"
    | \\"no\\"
    | \\"noExcludeDescendants\\"
    | \\"yes\\"
    | \\"yesExcludeDescendants\\"
  ),
  inlineImageLeft?: ?string,
  inlineImagePadding?: ?number,
  numberOfLines?: ?number,
  returnKeyLabel?: ?string,
  rows?: ?number,
  showSoftInputOnFocus?: ?boolean,
  textBreakStrategy?: ?(\\"simple\\" | \\"highQuality\\" | \\"balanced\\"),
  underlineColorAndroid?: ?ColorValue,
|}>;
export type Props = $ReadOnly<{|
  ...$Diff<ViewProps, $ReadOnly<{| style: ?ViewStyleProp |}>>,
  ...IOSProps,
  ...AndroidProps,
  autoCapitalize?: ?AutoCapitalize,
  autoComplete?: ?(
    | \\"additional-name\\"
    | \\"address-line1\\"
    | \\"address-line2\\"
    | \\"birthdate-day\\"
    | \\"birthdate-full\\"
    | \\"birthdate-month\\"
    | \\"birthdate-year\\"
    | \\"cc-csc\\"
    | \\"cc-exp\\"
    | \\"cc-exp-day\\"
    | \\"cc-exp-month\\"
    | \\"cc-exp-year\\"
    | \\"cc-number\\"
    | \\"cc-name\\"
    | \\"cc-given-name\\"
    | \\"cc-middle-name\\"
    | \\"cc-family-name\\"
    | \\"cc-type\\"
    | \\"country\\"
    | \\"current-password\\"
    | \\"email\\"
    | \\"family-name\\"
    | \\"gender\\"
    | \\"given-name\\"
    | \\"honorific-prefix\\"
    | \\"honorific-suffix\\"
    | \\"name\\"
    | \\"name-family\\"
    | \\"name-given\\"
    | \\"name-middle\\"
    | \\"name-middle-initial\\"
    | \\"name-prefix\\"
    | \\"name-suffix\\"
    | \\"new-password\\"
    | \\"nickname\\"
    | \\"one-time-code\\"
    | \\"organization\\"
    | \\"organization-title\\"
    | \\"password\\"
    | \\"password-new\\"
    | \\"postal-address\\"
    | \\"postal-address-country\\"
    | \\"postal-address-extended\\"
    | \\"postal-address-extended-postal-code\\"
    | \\"postal-address-locality\\"
    | \\"postal-address-region\\"
    | \\"postal-code\\"
    | \\"street-address\\"
    | \\"sms-otp\\"
    | \\"tel\\"
    | \\"tel-country-code\\"
    | \\"tel-national\\"
    | \\"tel-device\\"
    | \\"url\\"
    | \\"username\\"
    | \\"username-new\\"
    | \\"off\\"
  ),
  autoCorrect?: ?boolean,
  autoFocus?: ?boolean,
  allowFontScaling?: ?boolean,
  caretHidden?: ?boolean,
  contextMenuHidden?: ?boolean,
  defaultValue?: ?Stringish,
  editable?: ?boolean,
  forwardedRef?: ?ReactRefSetter<HostInstance & ImperativeMethods>,
  enterKeyHint?: ?enterKeyHintType,
  inputMode?: ?InputMode,
  keyboardType?: ?KeyboardType,
  maxFontSizeMultiplier?: ?number,
  maxLength?: ?number,
  multiline?: ?boolean,
  onBlur?: ?(e: BlurEvent) => mixed,
  onChange?: ?(e: ChangeEvent) => mixed,
  unstable_onChangeSync?: ?(e: ChangeEvent) => mixed,
  onChangeText?: ?(text: string) => mixed,
  unstable_onChangeTextSync?: ?(text: string) => mixed,
  onContentSizeChange?: ?(e: ContentSizeChangeEvent) => mixed,
  onEndEditing?: ?(e: EditingEvent) => mixed,
  onFocus?: ?(e: FocusEvent) => mixed,
  onKeyPress?: ?(e: KeyPressEvent) => mixed,
  unstable_onKeyPressSync?: ?(e: KeyPressEvent) => mixed,
  onPress?: ?(event: PressEvent) => mixed,
  onPressIn?: ?(event: PressEvent) => mixed,
  onPressOut?: ?(event: PressEvent) => mixed,
  onSelectionChange?: ?(e: SelectionChangeEvent) => mixed,
  onSubmitEditing?: ?(e: EditingEvent) => mixed,
  onScroll?: ?(e: ScrollEvent) => mixed,
  placeholder?: ?Stringish,
  placeholderTextColor?: ?ColorValue,
  readOnly?: ?boolean,
  returnKeyType?: ?ReturnKeyType,
  secureTextEntry?: ?boolean,
  selection?: ?$ReadOnly<{|
    start: number,
    end?: ?number,
  |}>,
  selectionColor?: ?ColorValue,
  selectTextOnFocus?: ?boolean,
  blurOnSubmit?: ?boolean,
  submitBehavior?: ?SubmitBehavior,
  style?: ?TextStyleProp,
  value?: ?Stringish,
|}>;
type ImperativeMethods = $ReadOnly<{|
  clear: () => void,
  isFocused: () => boolean,
  getNativeRef: () => ?HostInstance,
  setSelection: (start: number, end: number) => void,
|}>;
type InternalTextInput = component(
  ref: React.RefSetter<$ReadOnly<{ ...HostInstance, ...ImperativeMethods }>>,
  ...Props
);
export type TextInputComponentStatics = $ReadOnly<{|
  State: $ReadOnly<{|
    currentlyFocusedInput: () => ?HostInstance,
    currentlyFocusedField: () => ?number,
    focusTextInput: (textField: ?HostInstance) => void,
    blurTextInput: (textField: ?HostInstance) => void,
  |}>,
|}>;
export type TextInputType = InternalTextInput & TextInputComponentStatics;
"
`;

exports[`public API should not change unintentionally Libraries/Components/TextInput/TextInput.js 1`] = `
"type ReactRefSetter<T> =
  | { current: null | T, ... }
  | ((ref: null | T) => mixed);
type TextInputInstance = HostInstance & {
  +clear: () => void,
  +isFocused: () => boolean,
  +getNativeRef: () => ?HostInstance,
  +setSelection: (start: number, end: number) => void,
};
export type ChangeEvent = SyntheticEvent<
  $ReadOnly<{|
    eventCount: number,
    target: number,
    text: string,
  |}>,
>;
export type TextInputEvent = SyntheticEvent<
  $ReadOnly<{|
    eventCount: number,
    previousText: string,
    range: $ReadOnly<{|
      start: number,
      end: number,
    |}>,
    target: number,
    text: string,
  |}>,
>;
export type ContentSizeChangeEvent = SyntheticEvent<
  $ReadOnly<{|
    target: number,
    contentSize: $ReadOnly<{|
      width: number,
      height: number,
    |}>,
  |}>,
>;
type TargetEvent = SyntheticEvent<
  $ReadOnly<{|
    target: number,
  |}>,
>;
export type BlurEvent = TargetEvent;
export type FocusEvent = TargetEvent;
type Selection = $ReadOnly<{|
  start: number,
  end: number,
|}>;
export type SelectionChangeEvent = SyntheticEvent<
  $ReadOnly<{|
    selection: Selection,
    target: number,
  |}>,
>;
export type KeyPressEvent = SyntheticEvent<
  $ReadOnly<{|
    key: string,
    target?: ?number,
    eventCount?: ?number,
  |}>,
>;
export type EditingEvent = SyntheticEvent<
  $ReadOnly<{|
    eventCount: number,
    text: string,
    target: number,
  |}>,
>;
type DataDetectorTypesType =
  | \\"phoneNumber\\"
  | \\"link\\"
  | \\"address\\"
  | \\"calendarEvent\\"
  | \\"trackingNumber\\"
  | \\"flightNumber\\"
  | \\"lookupSuggestion\\"
  | \\"none\\"
  | \\"all\\";
export type KeyboardType =
  | \\"default\\"
  | \\"email-address\\"
  | \\"numeric\\"
  | \\"phone-pad\\"
  | \\"number-pad\\"
  | \\"decimal-pad\\"
  | \\"url\\"
  | \\"ascii-capable\\"
  | \\"numbers-and-punctuation\\"
  | \\"name-phone-pad\\"
  | \\"twitter\\"
  | \\"web-search\\"
  | \\"ascii-capable-number-pad\\"
  | \\"visible-password\\";
export type InputMode =
  | \\"none\\"
  | \\"text\\"
  | \\"decimal\\"
  | \\"numeric\\"
  | \\"tel\\"
  | \\"search\\"
  | \\"email\\"
  | \\"url\\";
export type ReturnKeyType =
  | \\"done\\"
  | \\"go\\"
  | \\"next\\"
  | \\"search\\"
  | \\"send\\"
  | \\"none\\"
  | \\"previous\\"
  | \\"default\\"
  | \\"emergency-call\\"
  | \\"google\\"
  | \\"join\\"
  | \\"route\\"
  | \\"yahoo\\";
export type SubmitBehavior = \\"submit\\" | \\"blurAndSubmit\\" | \\"newline\\";
export type AutoCapitalize = \\"none\\" | \\"sentences\\" | \\"words\\" | \\"characters\\";
export type TextContentType =
  | \\"none\\"
  | \\"URL\\"
  | \\"addressCity\\"
  | \\"addressCityAndState\\"
  | \\"addressState\\"
  | \\"countryName\\"
  | \\"creditCardNumber\\"
  | \\"creditCardExpiration\\"
  | \\"creditCardExpirationMonth\\"
  | \\"creditCardExpirationYear\\"
  | \\"creditCardSecurityCode\\"
  | \\"creditCardType\\"
  | \\"creditCardName\\"
  | \\"creditCardGivenName\\"
  | \\"creditCardMiddleName\\"
  | \\"creditCardFamilyName\\"
  | \\"emailAddress\\"
  | \\"familyName\\"
  | \\"fullStreetAddress\\"
  | \\"givenName\\"
  | \\"jobTitle\\"
  | \\"location\\"
  | \\"middleName\\"
  | \\"name\\"
  | \\"namePrefix\\"
  | \\"nameSuffix\\"
  | \\"nickname\\"
  | \\"organizationName\\"
  | \\"postalCode\\"
  | \\"streetAddressLine1\\"
  | \\"streetAddressLine2\\"
  | \\"sublocality\\"
  | \\"telephoneNumber\\"
  | \\"username\\"
  | \\"password\\"
  | \\"newPassword\\"
  | \\"oneTimeCode\\"
  | \\"birthdate\\"
  | \\"birthdateDay\\"
  | \\"birthdateMonth\\"
  | \\"birthdateYear\\"
  | \\"cellularEID\\"
  | \\"cellularIMEI\\"
  | \\"dateTime\\"
  | \\"flightNumber\\"
  | \\"shipmentTrackingNumber\\";
export type enterKeyHintType =
  | \\"done\\"
  | \\"go\\"
  | \\"next\\"
  | \\"search\\"
  | \\"send\\"
  | \\"previous\\"
  | \\"enter\\";
type PasswordRules = string;
type IOSProps = $ReadOnly<{|
  clearButtonMode?: ?(\\"never\\" | \\"while-editing\\" | \\"unless-editing\\" | \\"always\\"),
  clearTextOnFocus?: ?boolean,
  dataDetectorTypes?:
    | ?DataDetectorTypesType
    | $ReadOnlyArray<DataDetectorTypesType>,
  enablesReturnKeyAutomatically?: ?boolean,
  inputAccessoryViewID?: ?string,
  inputAccessoryViewButtonLabel?: ?string,
  keyboardAppearance?: ?(\\"default\\" | \\"light\\" | \\"dark\\"),
  passwordRules?: ?PasswordRules,
  rejectResponderTermination?: ?boolean,
  scrollEnabled?: ?boolean,
  spellCheck?: ?boolean,
  textContentType?: ?TextContentType,
  lineBreakStrategyIOS?: ?(\\"none\\" | \\"standard\\" | \\"hangul-word\\" | \\"push-out\\"),
  lineBreakModeIOS?: ?(
    | \\"wordWrapping\\"
    | \\"char\\"
    | \\"clip\\"
    | \\"head\\"
    | \\"middle\\"
    | \\"tail\\"
  ),
  smartInsertDelete?: ?boolean,
|}>;
type AndroidProps = $ReadOnly<{|
  cursorColor?: ?ColorValue,
  disableFullscreenUI?: ?boolean,
  importantForAutofill?: ?(
    | \\"auto\\"
    | \\"no\\"
    | \\"noExcludeDescendants\\"
    | \\"yes\\"
    | \\"yesExcludeDescendants\\"
  ),
  inlineImageLeft?: ?string,
  inlineImagePadding?: ?number,
  numberOfLines?: ?number,
  returnKeyLabel?: ?string,
  rows?: ?number,
  showSoftInputOnFocus?: ?boolean,
  textBreakStrategy?: ?(\\"simple\\" | \\"highQuality\\" | \\"balanced\\"),
  underlineColorAndroid?: ?ColorValue,
|}>;
export type Props = $ReadOnly<{|
  ...$Diff<ViewProps, $ReadOnly<{| style: ?ViewStyleProp |}>>,
  ...IOSProps,
  ...AndroidProps,
  autoCapitalize?: ?AutoCapitalize,
  autoComplete?: ?(
    | \\"additional-name\\"
    | \\"address-line1\\"
    | \\"address-line2\\"
    | \\"birthdate-day\\"
    | \\"birthdate-full\\"
    | \\"birthdate-month\\"
    | \\"birthdate-year\\"
    | \\"cc-csc\\"
    | \\"cc-exp\\"
    | \\"cc-exp-day\\"
    | \\"cc-exp-month\\"
    | \\"cc-exp-year\\"
    | \\"cc-number\\"
    | \\"cc-name\\"
    | \\"cc-given-name\\"
    | \\"cc-middle-name\\"
    | \\"cc-family-name\\"
    | \\"cc-type\\"
    | \\"country\\"
    | \\"current-password\\"
    | \\"email\\"
    | \\"family-name\\"
    | \\"gender\\"
    | \\"given-name\\"
    | \\"honorific-prefix\\"
    | \\"honorific-suffix\\"
    | \\"name\\"
    | \\"name-family\\"
    | \\"name-given\\"
    | \\"name-middle\\"
    | \\"name-middle-initial\\"
    | \\"name-prefix\\"
    | \\"name-suffix\\"
    | \\"new-password\\"
    | \\"nickname\\"
    | \\"one-time-code\\"
    | \\"organization\\"
    | \\"organization-title\\"
    | \\"password\\"
    | \\"password-new\\"
    | \\"postal-address\\"
    | \\"postal-address-country\\"
    | \\"postal-address-extended\\"
    | \\"postal-address-extended-postal-code\\"
    | \\"postal-address-locality\\"
    | \\"postal-address-region\\"
    | \\"postal-code\\"
    | \\"street-address\\"
    | \\"sms-otp\\"
    | \\"tel\\"
    | \\"tel-country-code\\"
    | \\"tel-national\\"
    | \\"tel-device\\"
    | \\"url\\"
    | \\"username\\"
    | \\"username-new\\"
    | \\"off\\"
  ),
  autoCorrect?: ?boolean,
  autoFocus?: ?boolean,
  allowFontScaling?: ?boolean,
  caretHidden?: ?boolean,
  contextMenuHidden?: ?boolean,
  defaultValue?: ?Stringish,
  editable?: ?boolean,
  forwardedRef?: ?ReactRefSetter<TextInputInstance>,
  enterKeyHint?: ?enterKeyHintType,
  inputMode?: ?InputMode,
  keyboardType?: ?KeyboardType,
  maxFontSizeMultiplier?: ?number,
  maxLength?: ?number,
  multiline?: ?boolean,
  onBlur?: ?(e: BlurEvent) => mixed,
  onChange?: ?(e: ChangeEvent) => mixed,
  onChangeText?: ?(text: string) => mixed,
  onContentSizeChange?: ?(e: ContentSizeChangeEvent) => mixed,
  onEndEditing?: ?(e: EditingEvent) => mixed,
  onFocus?: ?(e: FocusEvent) => mixed,
  onKeyPress?: ?(e: KeyPressEvent) => mixed,
  onPress?: ?(event: PressEvent) => mixed,
  onPressIn?: ?(event: PressEvent) => mixed,
  onPressOut?: ?(event: PressEvent) => mixed,
  onSelectionChange?: ?(e: SelectionChangeEvent) => mixed,
  onSubmitEditing?: ?(e: EditingEvent) => mixed,
  onScroll?: ?(e: ScrollEvent) => mixed,
  placeholder?: ?Stringish,
  placeholderTextColor?: ?ColorValue,
  readOnly?: ?boolean,
  returnKeyType?: ?ReturnKeyType,
  secureTextEntry?: ?boolean,
  selection?: ?$ReadOnly<{|
    start: number,
    end?: ?number,
  |}>,
  selectionColor?: ?ColorValue,
  selectionHandleColor?: ?ColorValue,
  selectTextOnFocus?: ?boolean,
  blurOnSubmit?: ?boolean,
  submitBehavior?: ?SubmitBehavior,
  style?: ?TextStyleProp,
  value?: ?Stringish,
|}>;
export type TextInputComponentStatics = $ReadOnly<{|
  State: $ReadOnly<{|
    currentlyFocusedInput: typeof TextInputState.currentlyFocusedInput,
    currentlyFocusedField: typeof TextInputState.currentlyFocusedField,
    focusTextInput: typeof TextInputState.focusTextInput,
    blurTextInput: typeof TextInputState.blurTextInput,
  |}>,
|}>;
declare module.exports: TextInputType;
"
`;

exports[`public API should not change unintentionally Libraries/Components/TextInput/TextInputNativeCommands.js 1`] = `
"export interface TextInputNativeCommands<T> {
  +focus: (viewRef: React.ElementRef<T>) => void;
  +blur: (viewRef: React.ElementRef<T>) => void;
  +setTextAndSelection: (
    viewRef: React.ElementRef<T>,
    mostRecentEventCount: Int32,
    value: ?string,
    start: Int32,
    end: Int32
  ) => void;
}
declare const supportedCommands: $FlowFixMe;
declare export default typeof supportedCommands;
"
`;

exports[`public API should not change unintentionally Libraries/Components/TextInput/TextInputState.js 1`] = `
"declare function currentlyFocusedInput(): ?HostInstance;
declare function currentlyFocusedField(): ?number;
declare function focusInput(textField: ?HostInstance): void;
declare function blurInput(textField: ?HostInstance): void;
declare function focusField(textFieldID: ?number): void;
declare function blurField(textFieldID: ?number): void;
declare function focusTextInput(textField: ?HostInstance): void;
declare function blurTextInput(textField: ?HostInstance): void;
declare function registerInput(textField: HostInstance): void;
declare function unregisterInput(textField: HostInstance): void;
declare function isTextInput(textField: HostInstance): boolean;
declare module.exports: {
  currentlyFocusedInput: currentlyFocusedInput,
  focusInput: focusInput,
  blurInput: blurInput,
  currentlyFocusedField: currentlyFocusedField,
  focusField: focusField,
  blurField: blurField,
  focusTextInput: focusTextInput,
  blurTextInput: blurTextInput,
  registerInput: registerInput,
  unregisterInput: unregisterInput,
  isTextInput: isTextInput,
};
"
`;

exports[`public API should not change unintentionally Libraries/Components/ToastAndroid/NativeToastAndroid.js 1`] = `
"export * from \\"../../../src/private/specs/modules/NativeToastAndroid\\";
declare export default typeof NativeToastAndroid;
"
`;

exports[`public API should not change unintentionally Libraries/Components/ToastAndroid/ToastAndroid.js 1`] = `
"declare const ToastAndroid: {
  SHORT: number,
  LONG: number,
  TOP: number,
  BOTTOM: number,
  CENTER: number,
  show: (message: string, duration: number) => void,
  showWithGravity: (message: string, duration: number, gravity: number) => void,
  showWithGravityAndOffset: (
    message: string,
    duration: number,
    gravity: number,
    xOffset: number,
    yOffset: number
  ) => void,
};
declare module.exports: ToastAndroid;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Touchable/BoundingDimensions.js 1`] = `
"declare function BoundingDimensions(width: number, height: number): void;
declare module.exports: BoundingDimensions;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Touchable/PooledClass.js 1`] = `
"type Pooler = any;
declare const addPoolingTo: <T>(
  CopyConstructor: Class<T>,
  pooler: Pooler
) => Class<T> & {
  getPooled(...args: $ReadOnlyArray<mixed>): T,
  release(instance: mixed): void,
  ...
};
declare const PooledClass: {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: Pooler,
  twoArgumentPooler: Pooler,
  threeArgumentPooler: Pooler,
  fourArgumentPooler: Pooler,
};
declare module.exports: PooledClass;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Touchable/Position.js 1`] = `
"declare function Position(left: number, top: number): void;
declare module.exports: Position;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Touchable/Touchable.js 1`] = `
"declare const States: {
  NOT_RESPONDER: \\"NOT_RESPONDER\\",
  RESPONDER_INACTIVE_PRESS_IN: \\"RESPONDER_INACTIVE_PRESS_IN\\",
  RESPONDER_INACTIVE_PRESS_OUT: \\"RESPONDER_INACTIVE_PRESS_OUT\\",
  RESPONDER_ACTIVE_PRESS_IN: \\"RESPONDER_ACTIVE_PRESS_IN\\",
  RESPONDER_ACTIVE_PRESS_OUT: \\"RESPONDER_ACTIVE_PRESS_OUT\\",
  RESPONDER_ACTIVE_LONG_PRESS_IN: \\"RESPONDER_ACTIVE_LONG_PRESS_IN\\",
  RESPONDER_ACTIVE_LONG_PRESS_OUT: \\"RESPONDER_ACTIVE_LONG_PRESS_OUT\\",
  ERROR: \\"ERROR\\",
};
type State =
  | typeof States.NOT_RESPONDER
  | typeof States.RESPONDER_INACTIVE_PRESS_IN
  | typeof States.RESPONDER_INACTIVE_PRESS_OUT
  | typeof States.RESPONDER_ACTIVE_PRESS_IN
  | typeof States.RESPONDER_ACTIVE_PRESS_OUT
  | typeof States.RESPONDER_ACTIVE_LONG_PRESS_IN
  | typeof States.RESPONDER_ACTIVE_LONG_PRESS_OUT
  | typeof States.ERROR;
declare const Signals: {
  DELAY: \\"DELAY\\",
  RESPONDER_GRANT: \\"RESPONDER_GRANT\\",
  RESPONDER_RELEASE: \\"RESPONDER_RELEASE\\",
  RESPONDER_TERMINATED: \\"RESPONDER_TERMINATED\\",
  ENTER_PRESS_RECT: \\"ENTER_PRESS_RECT\\",
  LEAVE_PRESS_RECT: \\"LEAVE_PRESS_RECT\\",
  LONG_PRESS_DETECTED: \\"LONG_PRESS_DETECTED\\",
};
type Signal =
  | typeof Signals.DELAY
  | typeof Signals.RESPONDER_GRANT
  | typeof Signals.RESPONDER_RELEASE
  | typeof Signals.RESPONDER_TERMINATED
  | typeof Signals.ENTER_PRESS_RECT
  | typeof Signals.LEAVE_PRESS_RECT
  | typeof Signals.LONG_PRESS_DETECTED;
declare const TouchableMixin: {
  componentDidMount: () => void,
  componentWillUnmount: () => void,
  touchableGetInitialState: () => {
    touchable: {
      touchState: ?State,
      responderID: ?PressEvent[\\"currentTarget\\"],
    },
  },
  touchableHandleResponderTerminationRequest: () => any,
  touchableHandleStartShouldSetResponder: () => any,
  touchableLongPressCancelsPress: () => boolean,
  touchableHandleResponderGrant: (e: PressEvent) => void,
  touchableHandleResponderRelease: (e: PressEvent) => void,
  touchableHandleResponderTerminate: (e: PressEvent) => void,
  touchableHandleResponderMove: (e: PressEvent) => void,
  touchableHandleFocus: (e: Event) => void,
  touchableHandleBlur: (e: Event) => void,
  _remeasureMetricsOnActivation: () => void,
  _handleQueryLayout: (
    l: number,
    t: number,
    w: number,
    h: number,
    globalX: number,
    globalY: number
  ) => void,
  _handleDelay: (e: PressEvent) => void,
  _handleLongDelay: (e: PressEvent) => void,
  _receiveSignal: (signal: Signal, e: PressEvent) => void,
  _cancelLongPressDelayTimeout: () => void,
  _isHighlight: (state: State) => boolean,
  _savePressInLocation: (e: PressEvent) => void,
  _getDistanceBetweenPoints: (
    aX: number,
    aY: number,
    bX: number,
    bY: number
  ) => number,
  _performSideEffectsForTransition: (
    curState: State,
    nextState: State,
    signal: Signal,
    e: PressEvent
  ) => void,
  _startHighlight: (e: PressEvent) => void,
  _endHighlight: (e: PressEvent) => void,
  withoutDefaultFocusAndBlur: { ... },
};
declare const Touchable: {
  Mixin: TouchableMixin,
  renderDebugView: ({
    color: ColorValue,
    hitSlop: EdgeInsetsProp,
    ...
  }) => null | React.Node,
};
declare export default typeof Touchable;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Touchable/TouchableBounce.js 1`] = `
"type Props = $ReadOnly<{|
  ...React.ElementConfig<TouchableWithoutFeedback>,
  onPressAnimationComplete?: ?() => void,
  onPressWithCompletion?: ?(callback: () => void) => void,
  releaseBounciness?: ?number,
  releaseVelocity?: ?number,
  style?: ?ViewStyleProp,
  hostRef: React.RefSetter<React.ElementRef<typeof Animated.View>>,
|}>;
declare module.exports: component(
  ref: React.RefSetter<mixed>,
  ...props: $ReadOnly<$Diff<Props, {| hostRef: mixed |}>>
);
"
`;

exports[`public API should not change unintentionally Libraries/Components/Touchable/TouchableHighlight.js 1`] = `
"type AndroidProps = $ReadOnly<{|
  nextFocusDown?: ?number,
  nextFocusForward?: ?number,
  nextFocusLeft?: ?number,
  nextFocusRight?: ?number,
  nextFocusUp?: ?number,
|}>;
type IOSProps = $ReadOnly<{|
  hasTVPreferredFocus?: ?boolean,
|}>;
type Props = $ReadOnly<{|
  ...React.ElementConfig<TouchableWithoutFeedback>,
  ...AndroidProps,
  ...IOSProps,
  activeOpacity?: ?number,
  underlayColor?: ?ColorValue,
  style?: ?ViewStyleProp,
  onShowUnderlay?: ?() => void,
  onHideUnderlay?: ?() => void,
  testOnly_pressed?: ?boolean,
  hostRef: React.RefSetter<React.ElementRef<typeof View>>,
|}>;
declare const Touchable: component(
  ref: React.RefSetter<React.ElementRef<typeof View>>,
  ...props: $ReadOnly<$Diff<Props, {| +hostRef: mixed |}>>
);
declare module.exports: Touchable;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Touchable/TouchableNativeFeedback.js 1`] = `
"type Props = $ReadOnly<{|
  ...React.ElementConfig<TouchableWithoutFeedback>,
  background?: ?(
    | $ReadOnly<{|
        type: \\"ThemeAttrAndroid\\",
        attribute:
          | \\"selectableItemBackground\\"
          | \\"selectableItemBackgroundBorderless\\",
        rippleRadius: ?number,
      |}>
    | $ReadOnly<{|
        type: \\"RippleAndroid\\",
        color: ?number,
        borderless: boolean,
        rippleRadius: ?number,
      |}>
  ),
  hasTVPreferredFocus?: ?boolean,
  nextFocusDown?: ?number,
  nextFocusForward?: ?number,
  nextFocusLeft?: ?number,
  nextFocusRight?: ?number,
  nextFocusUp?: ?number,
  useForeground?: ?boolean,
|}>;
type State = $ReadOnly<{|
  pressability: Pressability,
|}>;
declare class TouchableNativeFeedback extends React.Component<Props, State> {
  static SelectableBackground: (rippleRadius: ?number) => $ReadOnly<{|
    attribute: \\"selectableItemBackground\\",
    type: \\"ThemeAttrAndroid\\",
    rippleRadius: ?number,
  |}>;
  static SelectableBackgroundBorderless: (rippleRadius: ?number) => $ReadOnly<{|
    attribute: \\"selectableItemBackgroundBorderless\\",
    type: \\"ThemeAttrAndroid\\",
    rippleRadius: ?number,
  |}>;
  static Ripple: (
    color: string,
    borderless: boolean,
    rippleRadius: ?number
  ) => $ReadOnly<{|
    borderless: boolean,
    color: ?number,
    rippleRadius: ?number,
    type: \\"RippleAndroid\\",
  |}>;
  static canUseNativeForeground: () => boolean;
  state: State;
  _createPressabilityConfig(): PressabilityConfig;
  _dispatchPressedStateChange(pressed: boolean): void;
  _dispatchHotspotUpdate(event: PressEvent): void;
  render(): React.Node;
  componentDidUpdate(prevProps: Props, prevState: State): void;
  componentDidMount(): mixed;
  componentWillUnmount(): void;
}
declare module.exports: TouchableNativeFeedback;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Touchable/TouchableOpacity.js 1`] = `
"type TVProps = $ReadOnly<{|
  hasTVPreferredFocus?: ?boolean,
  nextFocusDown?: ?number,
  nextFocusForward?: ?number,
  nextFocusLeft?: ?number,
  nextFocusRight?: ?number,
  nextFocusUp?: ?number,
|}>;
type Props = $ReadOnly<{|
  ...React.ElementConfig<TouchableWithoutFeedback>,
  ...TVProps,
  activeOpacity?: ?number,
  style?: ?ViewStyleProp,
  hostRef?: ?React.RefSetter<React.ElementRef<typeof Animated.View>>,
|}>;
declare const Touchable: component(
  ref: React.RefSetter<React.ElementRef<typeof Animated.View>>,
  ...props: Props
);
declare module.exports: Touchable;
"
`;

exports[`public API should not change unintentionally Libraries/Components/Touchable/TouchableWithoutFeedback.js 1`] = `
"type Props = $ReadOnly<{|
  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,
  accessibilityElementsHidden?: ?boolean,
  accessibilityHint?: ?Stringish,
  accessibilityLanguage?: ?Stringish,
  accessibilityIgnoresInvertColors?: ?boolean,
  accessibilityLabel?: ?Stringish,
  accessibilityLiveRegion?: ?(\\"none\\" | \\"polite\\" | \\"assertive\\"),
  accessibilityRole?: ?AccessibilityRole,
  accessibilityState?: ?AccessibilityState,
  accessibilityValue?: ?AccessibilityValue,
  \\"aria-valuemax\\"?: AccessibilityValue[\\"max\\"],
  \\"aria-valuemin\\"?: AccessibilityValue[\\"min\\"],
  \\"aria-valuenow\\"?: AccessibilityValue[\\"now\\"],
  \\"aria-valuetext\\"?: AccessibilityValue[\\"text\\"],
  accessibilityViewIsModal?: ?boolean,
  \\"aria-modal\\"?: ?boolean,
  accessible?: ?boolean,
  \\"aria-busy\\"?: ?boolean,
  \\"aria-checked\\"?: ?boolean | \\"mixed\\",
  \\"aria-disabled\\"?: ?boolean,
  \\"aria-expanded\\"?: ?boolean,
  \\"aria-selected\\"?: ?boolean,
  \\"aria-hidden\\"?: ?boolean,
  \\"aria-live\\"?: ?(\\"polite\\" | \\"assertive\\" | \\"off\\"),
  \\"aria-label\\"?: ?Stringish,
  children?: ?React.Node,
  delayLongPress?: ?number,
  delayPressIn?: ?number,
  delayPressOut?: ?number,
  disabled?: ?boolean,
  focusable?: ?boolean,
  hitSlop?: ?EdgeInsetsOrSizeProp,
  id?: string,
  importantForAccessibility?: ?(\\"auto\\" | \\"yes\\" | \\"no\\" | \\"no-hide-descendants\\"),
  nativeID?: ?string,
  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,
  onBlur?: ?(event: BlurEvent) => mixed,
  onFocus?: ?(event: FocusEvent) => mixed,
  onLayout?: ?(event: LayoutEvent) => mixed,
  onLongPress?: ?(event: PressEvent) => mixed,
  onPress?: ?(event: PressEvent) => mixed,
  onPressIn?: ?(event: PressEvent) => mixed,
  onPressOut?: ?(event: PressEvent) => mixed,
  pressRetentionOffset?: ?EdgeInsetsOrSizeProp,
  rejectResponderTermination?: ?boolean,
  testID?: ?string,
  touchSoundDisabled?: ?boolean,
|}>;
declare module.exports: (props: Props) => React.Node;
"
`;

exports[`public API should not change unintentionally Libraries/Components/UnimplementedViews/UnimplementedNativeViewNativeComponent.js 1`] = `
"export * from \\"../../../src/private/specs/components/UnimplementedNativeViewNativeComponent\\";
declare export default typeof UnimplementedNativeViewNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/Components/UnimplementedViews/UnimplementedView.js 1`] = `
"declare class UnimplementedView extends React.Component<$FlowFixMeProps> {
  render(): React.Node;
}
declare module.exports: UnimplementedView;
"
`;

exports[`public API should not change unintentionally Libraries/Components/View/ReactNativeStyleAttributes.js 1`] = `
"declare const ReactNativeStyleAttributes: { [string]: AnyAttributeType, ... };
declare module.exports: ReactNativeStyleAttributes;
"
`;

exports[`public API should not change unintentionally Libraries/Components/View/ReactNativeViewAttributes.js 1`] = `
"declare const UIView: {
  pointerEvents: true,
  accessible: true,
  accessibilityActions: true,
  accessibilityLabel: true,
  accessibilityLiveRegion: true,
  accessibilityRole: true,
  accessibilityState: true,
  accessibilityValue: true,
  accessibilityHint: true,
  accessibilityLanguage: true,
  accessibilityShowsLargeContentViewer: true,
  accessibilityLargeContentTitle: true,
  importantForAccessibility: true,
  nativeID: true,
  testID: true,
  renderToHardwareTextureAndroid: true,
  shouldRasterizeIOS: true,
  onLayout: true,
  onAccessibilityAction: true,
  onAccessibilityTap: true,
  onMagicTap: true,
  onAccessibilityEscape: true,
  collapsable: true,
  collapsableChildren: true,
  needsOffscreenAlphaCompositing: true,
  style: ReactNativeStyleAttributes,
  role: true,
};
declare const RCTView: { ...UIView, removeClippedSubviews: true };
declare const ReactNativeViewAttributes: { UIView: UIView, RCTView: RCTView };
declare module.exports: ReactNativeViewAttributes;
"
`;

exports[`public API should not change unintentionally Libraries/Components/View/View.js 1`] = `
"export type Props = ViewProps;
declare const View: component(
  ref: React.RefSetter<React.ElementRef<typeof ViewNativeComponent>>,
  ...props: ViewProps
);
declare module.exports: View;
"
`;

exports[`public API should not change unintentionally Libraries/Components/View/ViewAccessibility.js 1`] = `
"export type AccessibilityRole =
  | \\"none\\"
  | \\"button\\"
  | \\"dropdownlist\\"
  | \\"togglebutton\\"
  | \\"link\\"
  | \\"search\\"
  | \\"image\\"
  | \\"keyboardkey\\"
  | \\"text\\"
  | \\"adjustable\\"
  | \\"imagebutton\\"
  | \\"header\\"
  | \\"summary\\"
  | \\"alert\\"
  | \\"checkbox\\"
  | \\"combobox\\"
  | \\"menu\\"
  | \\"menubar\\"
  | \\"menuitem\\"
  | \\"progressbar\\"
  | \\"radio\\"
  | \\"radiogroup\\"
  | \\"scrollbar\\"
  | \\"spinbutton\\"
  | \\"switch\\"
  | \\"tab\\"
  | \\"tabbar\\"
  | \\"tablist\\"
  | \\"timer\\"
  | \\"list\\"
  | \\"toolbar\\"
  | \\"grid\\"
  | \\"pager\\"
  | \\"scrollview\\"
  | \\"horizontalscrollview\\"
  | \\"viewgroup\\"
  | \\"webview\\"
  | \\"drawerlayout\\"
  | \\"slidingdrawer\\"
  | \\"iconmenu\\";
export type Role =
  | \\"alert\\"
  | \\"alertdialog\\"
  | \\"application\\"
  | \\"article\\"
  | \\"banner\\"
  | \\"button\\"
  | \\"cell\\"
  | \\"checkbox\\"
  | \\"columnheader\\"
  | \\"combobox\\"
  | \\"complementary\\"
  | \\"contentinfo\\"
  | \\"definition\\"
  | \\"dialog\\"
  | \\"directory\\"
  | \\"document\\"
  | \\"feed\\"
  | \\"figure\\"
  | \\"form\\"
  | \\"grid\\"
  | \\"group\\"
  | \\"heading\\"
  | \\"img\\"
  | \\"link\\"
  | \\"list\\"
  | \\"listitem\\"
  | \\"log\\"
  | \\"main\\"
  | \\"marquee\\"
  | \\"math\\"
  | \\"menu\\"
  | \\"menubar\\"
  | \\"menuitem\\"
  | \\"meter\\"
  | \\"navigation\\"
  | \\"none\\"
  | \\"note\\"
  | \\"option\\"
  | \\"presentation\\"
  | \\"progressbar\\"
  | \\"radio\\"
  | \\"radiogroup\\"
  | \\"region\\"
  | \\"row\\"
  | \\"rowgroup\\"
  | \\"rowheader\\"
  | \\"scrollbar\\"
  | \\"searchbox\\"
  | \\"separator\\"
  | \\"slider\\"
  | \\"spinbutton\\"
  | \\"status\\"
  | \\"summary\\"
  | \\"switch\\"
  | \\"tab\\"
  | \\"table\\"
  | \\"tablist\\"
  | \\"tabpanel\\"
  | \\"term\\"
  | \\"timer\\"
  | \\"toolbar\\"
  | \\"tooltip\\"
  | \\"tree\\"
  | \\"treegrid\\"
  | \\"treeitem\\";
export type AccessibilityActionInfo = $ReadOnly<{
  name: string,
  label?: string,
  ...
}>;
export type AccessibilityActionEvent = SyntheticEvent<
  $ReadOnly<{ actionName: string, ... }>,
>;
export type AccessibilityState = {
  disabled?: ?boolean,
  selected?: ?boolean,
  checked?: ?boolean | \\"mixed\\",
  busy?: ?boolean,
  expanded?: ?boolean,
  ...
};
export type AccessibilityValue = $ReadOnly<{|
  min?: number,
  max?: number,
  now?: number,
  text?: Stringish,
|}>;
"
`;

exports[`public API should not change unintentionally Libraries/Components/View/ViewNativeComponent.js 1`] = `
"declare const ViewNativeComponent: HostComponent<Props>;
interface NativeCommands {
  +hotspotUpdate: (viewRef: HostInstance, x: number, y: number) => void;
  +setPressed: (viewRef: HostInstance, pressed: boolean) => void;
}
declare export const Commands: NativeCommands;
declare export default typeof ViewNativeComponent;
export type ViewNativeComponentType = HostComponent<Props>;
"
`;

exports[`public API should not change unintentionally Libraries/Components/View/ViewPropTypes.js 1`] = `
"export type ViewLayout = Layout;
export type ViewLayoutEvent = LayoutEvent;
type DirectEventProps = $ReadOnly<{|
  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,
  onAccessibilityTap?: ?() => mixed,
  onLayout?: ?(event: LayoutEvent) => mixed,
  onMagicTap?: ?() => mixed,
  onAccessibilityEscape?: ?() => mixed,
|}>;
type MouseEventProps = $ReadOnly<{|
  onMouseEnter?: ?(event: MouseEvent) => void,
  onMouseLeave?: ?(event: MouseEvent) => void,
|}>;
type PointerEventProps = $ReadOnly<{|
  onClick?: ?(event: PointerEvent) => void,
  onClickCapture?: ?(event: PointerEvent) => void,
  onPointerEnter?: ?(event: PointerEvent) => void,
  onPointerEnterCapture?: ?(event: PointerEvent) => void,
  onPointerLeave?: ?(event: PointerEvent) => void,
  onPointerLeaveCapture?: ?(event: PointerEvent) => void,
  onPointerMove?: ?(event: PointerEvent) => void,
  onPointerMoveCapture?: ?(event: PointerEvent) => void,
  onPointerCancel?: ?(e: PointerEvent) => void,
  onPointerCancelCapture?: ?(e: PointerEvent) => void,
  onPointerDown?: ?(e: PointerEvent) => void,
  onPointerDownCapture?: ?(e: PointerEvent) => void,
  onPointerUp?: ?(e: PointerEvent) => void,
  onPointerUpCapture?: ?(e: PointerEvent) => void,
  onPointerOver?: ?(e: PointerEvent) => void,
  onPointerOverCapture?: ?(e: PointerEvent) => void,
  onPointerOut?: ?(e: PointerEvent) => void,
  onPointerOutCapture?: ?(e: PointerEvent) => void,
  onGotPointerCapture?: ?(e: PointerEvent) => void,
  onGotPointerCaptureCapture?: ?(e: PointerEvent) => void,
  onLostPointerCapture?: ?(e: PointerEvent) => void,
  onLostPointerCaptureCapture?: ?(e: PointerEvent) => void,
|}>;
type FocusEventProps = $ReadOnly<{|
  onBlur?: ?(event: BlurEvent) => void,
  onBlurCapture?: ?(event: BlurEvent) => void,
  onFocus?: ?(event: FocusEvent) => void,
  onFocusCapture?: ?(event: FocusEvent) => void,
|}>;
type TouchEventProps = $ReadOnly<{|
  onTouchCancel?: ?(e: PressEvent) => void,
  onTouchCancelCapture?: ?(e: PressEvent) => void,
  onTouchEnd?: ?(e: PressEvent) => void,
  onTouchEndCapture?: ?(e: PressEvent) => void,
  onTouchMove?: ?(e: PressEvent) => void,
  onTouchMoveCapture?: ?(e: PressEvent) => void,
  onTouchStart?: ?(e: PressEvent) => void,
  onTouchStartCapture?: ?(e: PressEvent) => void,
|}>;
type GestureResponderEventProps = $ReadOnly<{|
  onMoveShouldSetResponder?: ?(e: PressEvent) => boolean,
  onMoveShouldSetResponderCapture?: ?(e: PressEvent) => boolean,
  onResponderGrant?: ?(e: PressEvent) => void | boolean,
  onResponderMove?: ?(e: PressEvent) => void,
  onResponderReject?: ?(e: PressEvent) => void,
  onResponderRelease?: ?(e: PressEvent) => void,
  onResponderStart?: ?(e: PressEvent) => void,
  onResponderEnd?: ?(e: PressEvent) => void,
  onResponderTerminate?: ?(e: PressEvent) => void,
  onResponderTerminationRequest?: ?(e: PressEvent) => boolean,
  onStartShouldSetResponder?: ?(e: PressEvent) => boolean,
  onStartShouldSetResponderCapture?: ?(e: PressEvent) => boolean,
|}>;
type AndroidDrawableThemeAttr = $ReadOnly<{|
  type: \\"ThemeAttrAndroid\\",
  attribute: string,
|}>;
type AndroidDrawableRipple = $ReadOnly<{|
  type: \\"RippleAndroid\\",
  color?: ?number,
  borderless?: ?boolean,
  rippleRadius?: ?number,
|}>;
type AndroidDrawable = AndroidDrawableThemeAttr | AndroidDrawableRipple;
type AndroidViewProps = $ReadOnly<{|
  accessibilityLabelledBy?: ?string | ?Array<string>,
  \\"aria-labelledby\\"?: ?string,
  accessibilityLiveRegion?: ?(\\"none\\" | \\"polite\\" | \\"assertive\\"),
  \\"aria-live\\"?: ?(\\"polite\\" | \\"assertive\\" | \\"off\\"),
  nativeBackgroundAndroid?: ?AndroidDrawable,
  nativeForegroundAndroid?: ?AndroidDrawable,
  renderToHardwareTextureAndroid?: ?boolean,
  importantForAccessibility?: ?(\\"auto\\" | \\"yes\\" | \\"no\\" | \\"no-hide-descendants\\"),
  hasTVPreferredFocus?: ?boolean,
  nextFocusDown?: ?number,
  nextFocusForward?: ?number,
  nextFocusLeft?: ?number,
  nextFocusRight?: ?number,
  nextFocusUp?: ?number,
  focusable?: boolean,
  tabIndex?: 0 | -1,
  onClick?: ?(event: PressEvent) => mixed,
|}>;
type IOSViewProps = $ReadOnly<{|
  accessibilityIgnoresInvertColors?: ?boolean,
  accessibilityViewIsModal?: ?boolean,
  accessibilityShowsLargeContentViewer?: ?boolean,
  accessibilityLargeContentTitle?: ?string,
  \\"aria-modal\\"?: ?boolean,
  accessibilityElementsHidden?: ?boolean,
  accessibilityLanguage?: ?Stringish,
  shouldRasterizeIOS?: ?boolean,
|}>;
export type ViewProps = $ReadOnly<{|
  ...DirectEventProps,
  ...GestureResponderEventProps,
  ...MouseEventProps,
  ...PointerEventProps,
  ...FocusEventProps,
  ...TouchEventProps,
  ...AndroidViewProps,
  ...IOSViewProps,
  children?: Node,
  style?: ?ViewStyleProp,
  accessible?: ?boolean,
  accessibilityLabel?: ?Stringish,
  accessibilityHint?: ?Stringish,
  \\"aria-label\\"?: ?Stringish,
  accessibilityRole?: ?AccessibilityRole,
  role?: ?Role,
  accessibilityState?: ?AccessibilityState,
  accessibilityValue?: ?AccessibilityValue,
  \\"aria-valuemax\\"?: ?AccessibilityValue[\\"max\\"],
  \\"aria-valuemin\\"?: ?AccessibilityValue[\\"min\\"],
  \\"aria-valuenow\\"?: ?AccessibilityValue[\\"now\\"],
  \\"aria-valuetext\\"?: ?AccessibilityValue[\\"text\\"],
  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,
  \\"aria-busy\\"?: ?boolean,
  \\"aria-checked\\"?: ?boolean | \\"mixed\\",
  \\"aria-disabled\\"?: ?boolean,
  \\"aria-expanded\\"?: ?boolean,
  \\"aria-selected\\"?: ?boolean,
  \\"aria-hidden\\"?: ?boolean,
  collapsable?: ?boolean,
  collapsableChildren?: ?boolean,
  experimental_layoutConformance?: ?(\\"strict\\" | \\"classic\\"),
  id?: string,
  testID?: ?string,
  nativeID?: ?string,
  needsOffscreenAlphaCompositing?: ?boolean,
  hitSlop?: ?EdgeInsetsOrSizeProp,
  pointerEvents?: ?(\\"auto\\" | \\"box-none\\" | \\"box-only\\" | \\"none\\"),
  removeClippedSubviews?: ?boolean,
|}>;
"
`;

exports[`public API should not change unintentionally Libraries/Core/Devtools/getDevServer.js 1`] = `
"type DevServerInfo = {
  url: string,
  fullBundleUrl: ?string,
  bundleLoadedFromServer: boolean,
  ...
};
declare function getDevServer(): DevServerInfo;
declare module.exports: getDevServer;
"
`;

exports[`public API should not change unintentionally Libraries/Core/Devtools/loadBundleFromServer.js 1`] = `
"declare module.exports: (bundlePathAndQuery: string) => Promise<void>;
"
`;

exports[`public API should not change unintentionally Libraries/Core/Devtools/openFileInEditor.js 1`] = `
"declare function openFileInEditor(file: string, lineNumber: number): void;
declare module.exports: openFileInEditor;
"
`;

exports[`public API should not change unintentionally Libraries/Core/Devtools/openURLInBrowser.js 1`] = `
"declare function openURLInBrowser(url: string): void;
declare module.exports: openURLInBrowser;
"
`;

exports[`public API should not change unintentionally Libraries/Core/Devtools/parseErrorStack.js 1`] = `
"declare function parseErrorStack(errorStack?: string): Array<StackFrame>;
declare module.exports: parseErrorStack;
"
`;

exports[`public API should not change unintentionally Libraries/Core/Devtools/parseHermesStack.js 1`] = `
"type HermesStackLocationNative = $ReadOnly<{
  type: \\"NATIVE\\",
}>;
type HermesStackLocationSource = $ReadOnly<{
  type: \\"SOURCE\\",
  sourceUrl: string,
  line1Based: number,
  column1Based: number,
}>;
type HermesStackLocationInternalBytecode = $ReadOnly<{
  type: \\"INTERNAL_BYTECODE\\",
  sourceUrl: string,
  line1Based: number,
  virtualOffset0Based: number,
}>;
type HermesStackLocationBytecode = $ReadOnly<{
  type: \\"BYTECODE\\",
  sourceUrl: string,
  line1Based: number,
  virtualOffset0Based: number,
}>;
type HermesStackLocation =
  | HermesStackLocationNative
  | HermesStackLocationSource
  | HermesStackLocationInternalBytecode
  | HermesStackLocationBytecode;
type HermesStackEntryFrame = $ReadOnly<{
  type: \\"FRAME\\",
  location: HermesStackLocation,
  functionName: string,
}>;
type HermesStackEntrySkipped = $ReadOnly<{
  type: \\"SKIPPED\\",
  count: number,
}>;
type HermesStackEntry = HermesStackEntryFrame | HermesStackEntrySkipped;
export type HermesParsedStack = $ReadOnly<{
  message: string,
  entries: $ReadOnlyArray<HermesStackEntry>,
}>;
declare module.exports: (stack: string) => HermesParsedStack;
"
`;

exports[`public API should not change unintentionally Libraries/Core/Devtools/symbolicateStackTrace.js 1`] = `
"export type CodeFrame = $ReadOnly<{
  content: string,
  location: ?{
    row: number,
    column: number,
    ...
  },
  fileName: string,
}>;
export type SymbolicatedStackTrace = $ReadOnly<{
  stack: Array<StackFrame>,
  codeFrame: ?CodeFrame,
}>;
declare function symbolicateStackTrace(
  stack: Array<StackFrame>,
  extraData?: mixed
): Promise<SymbolicatedStackTrace>;
declare module.exports: symbolicateStackTrace;
"
`;

exports[`public API should not change unintentionally Libraries/Core/ExceptionsManager.js 1`] = `
"declare class SyntheticError extends Error {
  name: string;
}
type ExceptionDecorator = (ExceptionData) => ExceptionData;
declare const decoratedExtraDataKey: \\"RN$ErrorExtraDataKey\\";
declare function unstable_setExceptionDecorator(
  exceptionDecorator: ?ExceptionDecorator
): void;
declare function handleException(e: mixed, isFatal: boolean): void;
declare function installConsoleErrorReporter(): void;
declare module.exports: {
  decoratedExtraDataKey: decoratedExtraDataKey,
  handleException: handleException,
  installConsoleErrorReporter: installConsoleErrorReporter,
  SyntheticError: SyntheticError,
  unstable_setExceptionDecorator: unstable_setExceptionDecorator,
};
"
`;

exports[`public API should not change unintentionally Libraries/Core/ExtendedError.js 1`] = `
"export type ExtendedError = Error &
  interface {
    jsEngine?: string,
    preventSymbolication?: boolean,
    componentStack?: string,
    isComponentError?: boolean,
    type?: string,
    cause?: {
      name: string,
      message: string,
      stackElements?: $ReadOnlyArray<Object>,
      stackSymbols?: $ReadOnlyArray<Object>,
      stackReturnAddresses?: $ReadOnlyArray<Object>,
    },
  };
"
`;

exports[`public API should not change unintentionally Libraries/Core/InitializeCore.js 1`] = `""`;

exports[`public API should not change unintentionally Libraries/Core/NativeExceptionsManager.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeExceptionsManager\\";
declare export default typeof NativeExceptionsManager;
"
`;

exports[`public API should not change unintentionally Libraries/Core/RawEventEmitter.js 1`] = `
"export type RawEventEmitterEvent = $ReadOnly<{|
  eventName: string,
  nativeEvent: { [string]: mixed },
|}>;
type RawEventDefinitions = {
  [eventChannel: string]: [RawEventEmitterEvent],
};
declare const RawEventEmitter: IEventEmitter<RawEventDefinitions>;
declare export default typeof RawEventEmitter;
"
`;

exports[`public API should not change unintentionally Libraries/Core/ReactFiberErrorDialog.js 1`] = `
"export type CapturedError = {
  +componentStack: string,
  +error: mixed,
  +errorBoundary: ?{ ... },
  ...
};
declare const ReactFiberErrorDialog: {
  showErrorDialog(CapturedError): boolean,
};
declare export default typeof ReactFiberErrorDialog;
"
`;

exports[`public API should not change unintentionally Libraries/Core/ReactNativeVersion.js 1`] = `
"declare const version: $ReadOnly<{
  major: number,
  minor: number,
  patch: number,
  prerelease: string | null,
}>;
declare module.exports: { version: version };
"
`;

exports[`public API should not change unintentionally Libraries/Core/ReactNativeVersionCheck.js 1`] = `
"declare const checkVersions: () => void;
declare module.exports: { checkVersions: checkVersions };
"
`;

exports[`public API should not change unintentionally Libraries/Core/SegmentFetcher/NativeSegmentFetcher.js 1`] = `
"export * from \\"../../../src/private/specs/modules/NativeSegmentFetcher\\";
declare export default typeof NativeSegmentFetcher;
"
`;

exports[`public API should not change unintentionally Libraries/Core/Timers/JSTimers.js 1`] = `
"export type JSTimerType =
  | \\"setTimeout\\"
  | \\"setInterval\\"
  | \\"requestAnimationFrame\\"
  | \\"queueReactNativeMicrotask\\"
  | \\"requestIdleCallback\\";
declare let ExportedJSTimers: {|
  callIdleCallbacks: (frameTime: number) => any | void,
  callReactNativeMicrotasks: () => void,
  callTimers: (timersToCall: Array<number>) => any | void,
  cancelAnimationFrame: (timerID: number) => void,
  cancelIdleCallback: (timerID: number) => void,
  clearReactNativeMicrotask: (timerID: number) => void,
  clearInterval: (timerID: number) => void,
  clearTimeout: (timerID: number) => void,
  emitTimeDriftWarning: (warningMessage: string) => any | void,
  requestAnimationFrame: (func: any) => any | number,
  requestIdleCallback: (func: any, options: ?any) => any | number,
  queueReactNativeMicrotask: (func: any, ...args: any) => number,
  setInterval: (func: any, duration: number, ...args: any) => number,
  setTimeout: (func: any, duration: number, ...args: any) => number,
|};
declare module.exports: ExportedJSTimers;
"
`;

exports[`public API should not change unintentionally Libraries/Core/Timers/NativeTiming.js 1`] = `
"export * from \\"../../../src/private/specs/modules/NativeTiming\\";
declare export default typeof NativeTiming;
"
`;

exports[`public API should not change unintentionally Libraries/Core/Timers/immediateShim.js 1`] = `
"declare function setImmediate(callback: Function, ...args: any): number;
declare function clearImmediate(immediateID: number): void;
declare const immediateShim: {
  setImmediate: setImmediate,
  clearImmediate: clearImmediate,
};
declare module.exports: immediateShim;
"
`;

exports[`public API should not change unintentionally Libraries/Core/Timers/queueMicrotask.js 1`] = `
"declare export default function queueMicrotask(callback: Function): void;
"
`;

exports[`public API should not change unintentionally Libraries/Core/checkNativeVersion.js 1`] = `""`;

exports[`public API should not change unintentionally Libraries/Core/polyfillPromise.js 1`] = `""`;

exports[`public API should not change unintentionally Libraries/Core/registerCallableModule.js 1`] = `
"type Module = { ... };
type RegisterCallableModule = (
  name: string,
  moduleOrFactory: Module | ((void) => Module)
) => void;
declare const registerCallableModule: RegisterCallableModule;
declare export default typeof registerCallableModule;
"
`;

exports[`public API should not change unintentionally Libraries/Core/setUpAlert.js 1`] = `""`;

exports[`public API should not change unintentionally Libraries/Core/setUpBatchedBridge.js 1`] = `""`;

exports[`public API should not change unintentionally Libraries/Core/setUpDeveloperTools.js 1`] = `""`;

exports[`public API should not change unintentionally Libraries/Core/setUpErrorHandling.js 1`] = `""`;

exports[`public API should not change unintentionally Libraries/Core/setUpGlobals.js 1`] = `""`;

exports[`public API should not change unintentionally Libraries/Core/setUpNavigator.js 1`] = `""`;

exports[`public API should not change unintentionally Libraries/Core/setUpPerformance.js 1`] = `""`;

exports[`public API should not change unintentionally Libraries/Core/setUpReactDevTools.js 1`] = `""`;

exports[`public API should not change unintentionally Libraries/Core/setUpReactRefresh.js 1`] = `""`;

exports[`public API should not change unintentionally Libraries/Core/setUpRegeneratorRuntime.js 1`] = `""`;

exports[`public API should not change unintentionally Libraries/Core/setUpSegmentFetcher.js 1`] = `
"export type FetchSegmentFunction = typeof __fetchSegment;
declare function __fetchSegment(
  segmentId: number,
  options: $ReadOnly<{
    otaBuildNumber: ?string,
    requestedModuleName: string,
    segmentHash: string,
  }>,
  callback: (?Error) => void
): void;
"
`;

exports[`public API should not change unintentionally Libraries/Core/setUpTimers.js 1`] = `""`;

exports[`public API should not change unintentionally Libraries/Core/setUpXHR.js 1`] = `""`;

exports[`public API should not change unintentionally Libraries/Debugging/DebuggingOverlay.js 1`] = `
"type DebuggingOverlayHandle = {
  highlightTraceUpdates(updates: TraceUpdate[]): void,
  highlightElements(elements: ElementRectangle[]): void,
  clearElementsHighlight(): void,
};
declare const DebuggingOverlayWithForwardedRef: component(
  ref: React.RefSetter<DebuggingOverlayHandle>,
  ...props: {}
);
declare export default typeof DebuggingOverlayWithForwardedRef;
"
`;

exports[`public API should not change unintentionally Libraries/Debugging/DebuggingOverlayNativeComponent.js 1`] = `
"export * from \\"../../src/private/specs/components/DebuggingOverlayNativeComponent\\";
declare export default typeof DebuggingOverlayNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/Debugging/DebuggingOverlayRegistry.js 1`] = `
"export type DebuggingOverlayRegistrySubscriberProtocol = {
  rootViewRef: AppContainerRootViewRef,
  debuggingOverlayRef: DebuggingOverlayRef,
};
declare class DebuggingOverlayRegistry {
  constructor(): void;
  subscribe(subscriber: DebuggingOverlayRegistrySubscriberProtocol): void;
  unsubscribe(subscriber: DebuggingOverlayRegistrySubscriberProtocol): void;
}
declare const debuggingOverlayRegistryInstance: DebuggingOverlayRegistry;
declare export default typeof debuggingOverlayRegistryInstance;
"
`;

exports[`public API should not change unintentionally Libraries/Debugging/useSubscribeToDebuggingOverlayRegistry.js 1`] = `
"declare const useSubscribeToDebuggingOverlayRegistry: (
  rootViewRef: AppContainerRootViewRef,
  debuggingOverlayRef: DebuggingOverlayRef
) => void;
declare export default typeof useSubscribeToDebuggingOverlayRegistry;
"
`;

exports[`public API should not change unintentionally Libraries/EventEmitter/NativeEventEmitter.js 1`] = `
"interface NativeModule {
  addListener(eventType: string): void;
  removeListeners(count: number): void;
}
export type { EventSubscription };
declare export default class NativeEventEmitter<TEventToArgsMap: { ... }>
  implements IEventEmitter<TEventToArgsMap>
{
  _nativeModule: ?NativeModule;
  constructor(nativeModule: ?NativeModule): void;
  addListener<TEvent: $Keys<TEventToArgsMap>>(
    eventType: TEvent,
    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,
    context?: mixed
  ): EventSubscription;
  emit<TEvent: $Keys<TEventToArgsMap>>(
    eventType: TEvent,
    ...args: $ElementType<TEventToArgsMap, TEvent>
  ): void;
  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(eventType?: ?TEvent): void;
  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number;
}
"
`;

exports[`public API should not change unintentionally Libraries/EventEmitter/RCTDeviceEventEmitter.js 1`] = `
"type RCTDeviceEventDefinitions = $FlowFixMe;
declare export default IEventEmitter<RCTDeviceEventDefinitions>;
"
`;

exports[`public API should not change unintentionally Libraries/EventEmitter/RCTEventEmitter.js 1`] = `
"declare const RCTEventEmitter: { register(eventEmitter: any): void };
declare module.exports: RCTEventEmitter;
"
`;

exports[`public API should not change unintentionally Libraries/EventEmitter/RCTNativeAppEventEmitter.js 1`] = `
"declare const RCTNativeAppEventEmitter: typeof RCTDeviceEventEmitter;
declare module.exports: RCTNativeAppEventEmitter;
"
`;

exports[`public API should not change unintentionally Libraries/Events/CustomEvent.js 1`] = `
"type CustomEvent$Options = $ReadOnly<{|
  bubbles?: boolean,
  cancelable?: boolean,
  composed?: boolean,
  detail?: { ... },
|}>;
declare class CustomEvent extends EventPolyfill {
  detail: ?{ ... };
  constructor(typeArg: string, options: CustomEvent$Options): void;
}
declare export default typeof CustomEvent;
"
`;

exports[`public API should not change unintentionally Libraries/Events/EventPolyfill.js 1`] = `
"type Event$Init = {
  bubbles?: boolean,
  cancelable?: boolean,
  composed?: boolean,
  scoped?: boolean,
  ...
};
interface IEvent {
  constructor(type: string, eventInitDict?: Event$Init): void;
  +type: string;
  +target: EventTarget;
  +srcElement: Element;
  +currentTarget: EventTarget;
  composedPath(): Array<EventTarget>;
  +NONE: number;
  +AT_TARGET: number;
  +BUBBLING_PHASE: number;
  +CAPTURING_PHASE: number;
  +eventPhase: number;
  stopPropagation(): void;
  stopImmediatePropagation(): void;
  +bubbles: boolean;
  +cancelable: boolean;
  preventDefault(): void;
  +defaultPrevented: boolean;
  +composed: boolean;
  +isTrusted: boolean;
  +timeStamp: number;
  +deepPath?: () => EventTarget[];
  +scoped: boolean;
  initEvent(type: string, bubbles: boolean, cancelable: boolean): void;
}
declare class EventPolyfill implements IEvent {
  type: string;
  bubbles: boolean;
  cancelable: boolean;
  composed: boolean;
  scoped: boolean;
  isTrusted: boolean;
  defaultPrevented: boolean;
  timeStamp: number;
  NONE: number;
  AT_TARGET: number;
  BUBBLING_PHASE: number;
  CAPTURING_PHASE: number;
  eventPhase: number;
  currentTarget: EventTarget;
  target: EventTarget;
  srcElement: Element;
  _syntheticEvent: mixed;
  constructor(type: string, eventInitDict?: Event$Init): void;
  composedPath(): Array<EventTarget>;
  preventDefault(): void;
  initEvent(type: string, bubbles: boolean, cancelable: boolean): void;
  stopImmediatePropagation(): void;
  stopPropagation(): void;
  setSyntheticEvent(value: mixed): void;
}
declare export default typeof EventPolyfill;
"
`;

exports[`public API should not change unintentionally Libraries/HeapCapture/HeapCapture.js 1`] = `
"declare const HeapCapture: { captureHeap: (path: string) => void };
declare module.exports: HeapCapture;
"
`;

exports[`public API should not change unintentionally Libraries/HeapCapture/NativeJSCHeapCapture.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeJSCHeapCapture\\";
declare export default typeof NativeJSCHeapCapture;
"
`;

exports[`public API should not change unintentionally Libraries/Image/AssetRegistry.js 1`] = `
"declare module.exports: $FlowFixMe;
"
`;

exports[`public API should not change unintentionally Libraries/Image/AssetSourceResolver.js 1`] = `
"export type ResolvedAssetSource = {|
  +__packager_asset: boolean,
  +width: ?number,
  +height: ?number,
  +uri: string,
  +scale: number,
|};
declare class AssetSourceResolver {
  serverUrl: ?string;
  jsbundleUrl: ?string;
  asset: PackagerAsset;
  constructor(
    serverUrl: ?string,
    jsbundleUrl: ?string,
    asset: PackagerAsset
  ): void;
  isLoadedFromServer(): boolean;
  isLoadedFromFileSystem(): boolean;
  defaultAsset(): ResolvedAssetSource;
  getAssetUsingResolver(resolver: AssetDestPathResolver): ResolvedAssetSource;
  assetServerURL(): ResolvedAssetSource;
  scaledAssetPath(): ResolvedAssetSource;
  scaledAssetURLNearBundle(): ResolvedAssetSource;
  resourceIdentifierWithoutScale(): ResolvedAssetSource;
  drawableFolderInBundle(): ResolvedAssetSource;
  fromSource(source: string): ResolvedAssetSource;
  static pickScale: (scales: Array<number>, deviceScale?: number) => number;
}
declare module.exports: AssetSourceResolver;
"
`;

exports[`public API should not change unintentionally Libraries/Image/AssetUtils.js 1`] = `
"declare export function pickScale(
  scales: Array<number>,
  deviceScale?: number
): number;
declare export function setUrlCacheBreaker(appendage: string): void;
declare export function getUrlCacheBreaker(): string;
"
`;

exports[`public API should not change unintentionally Libraries/Image/Image.js.flow 1`] = `
"declare module.exports: Image;
"
`;

exports[`public API should not change unintentionally Libraries/Image/ImageAnalyticsTagContext.js 1`] = `
"type ContextType = ?string;
declare const Context: React.Context<ContextType>;
declare export default typeof Context;
"
`;

exports[`public API should not change unintentionally Libraries/Image/ImageBackground.js 1`] = `
"declare class ImageBackground extends React.Component<ImageBackgroundProps> {
  setNativeProps(props: { ... }): void;
  _viewRef: ?React.ElementRef<typeof View>;
  _captureRef: $FlowFixMe;
  render(): React.Node;
}
declare module.exports: ImageBackground;
"
`;

exports[`public API should not change unintentionally Libraries/Image/ImageInjection.js 1`] = `
"type ImageComponentDecorator =
  ((AbstractImageAndroid) => AbstractImageAndroid) &
    ((AbstractImageIOS) => AbstractImageIOS);
declare export function unstable_setImageComponentDecorator(
  imageComponentDecorator: ?ImageComponentDecorator
): void;
declare export function unstable_getImageComponentDecorator(): ?ImageComponentDecorator;
type ImageInstance = React.ElementRef<ImageComponent>;
type ImageAttachedCallback = (
  imageInstance: ImageInstance
) => void | (() => void);
declare export function unstable_registerImageAttachedCallback(
  callback: ImageAttachedCallback
): void;
declare export function unstable_unregisterImageAttachedCallback(
  callback: ImageAttachedCallback
): void;
declare export function useWrapRefWithImageAttachedCallbacks(
  forwardedRef: React.RefSetter<ImageInstance>
): React.RefSetter<ImageInstance>;
"
`;

exports[`public API should not change unintentionally Libraries/Image/ImageProps.js 1`] = `
"export type ImageLoadEvent = SyntheticEvent<
  $ReadOnly<{|
    source: $ReadOnly<{|
      width: number,
      height: number,
      uri: string,
    |}>,
  |}>,
>;
type IOSImageProps = $ReadOnly<{|
  defaultSource?: ?ImageSource,
  onPartialLoad?: ?() => void,
  onProgress?: ?(
    event: SyntheticEvent<$ReadOnly<{| loaded: number, total: number |}>>
  ) => void,
|}>;
type AndroidImageProps = $ReadOnly<{|
  loadingIndicatorSource?: ?(number | $ReadOnly<{| uri: string |}>),
  progressiveRenderingEnabled?: ?boolean,
  fadeDuration?: ?number,
  resizeMethod?: ?(\\"auto\\" | \\"resize\\" | \\"scale\\" | \\"none\\"),
  resizeMultiplier?: ?number,
|}>;
export type ImageProps = $ReadOnly<{|
  ...$Diff<ViewProps, $ReadOnly<{| style: ?ViewStyleProp |}>>,
  ...IOSImageProps,
  ...AndroidImageProps,
  accessible?: ?boolean,
  internal_analyticTag?: ?string,
  accessibilityLabel?: ?Stringish,
  \\"aria-label\\"?: ?Stringish,
  \\"aria-labelledby\\"?: ?string,
  alt?: ?Stringish,
  blurRadius?: ?number,
  capInsets?: ?EdgeInsetsProp,
  crossOrigin?: ?(\\"anonymous\\" | \\"use-credentials\\"),
  height?: number,
  width?: number,
  onError?: ?(
    event: SyntheticEvent<
      $ReadOnly<{|
        error: string,
      |}>,
    >
  ) => void,
  onLayout?: ?(event: LayoutEvent) => mixed,
  onLoad?: ?(event: ImageLoadEvent) => void,
  onLoadEnd?: ?() => void,
  onLoadStart?: ?() => void,
  source?: ?ImageSource,
  style?: ?ImageStyleProp,
  referrerPolicy?: ?(
    | \\"no-referrer\\"
    | \\"no-referrer-when-downgrade\\"
    | \\"origin\\"
    | \\"origin-when-cross-origin\\"
    | \\"same-origin\\"
    | \\"strict-origin\\"
    | \\"strict-origin-when-cross-origin\\"
    | \\"unsafe-url\\"
  ),
  resizeMode?: ?ImageResizeMode,
  testID?: ?string,
  tintColor?: ColorValue,
  src?: ?string,
  srcSet?: ?string,
  children?: empty,
|}>;
export type ImageBackgroundProps = $ReadOnly<{|
  ...ImageProps,
  children?: Node,
  style?: ?ViewStyleProp,
  imageStyle?: ?ImageStyleProp,
  imageRef?: RefSetter<ElementRef<Image>>,
|}>;
"
`;

exports[`public API should not change unintentionally Libraries/Image/ImageResizeMode.js 1`] = `
"export type ImageResizeMode =
  | \\"center\\"
  | \\"contain\\"
  | \\"cover\\"
  | \\"repeat\\"
  | \\"stretch\\"
  | \\"none\\";
"
`;

exports[`public API should not change unintentionally Libraries/Image/ImageSource.js 1`] = `
"export interface ImageURISource {
  +uri?: ?string;
  +bundle?: ?string;
  +method?: ?string;
  +headers?: ?{ [string]: string };
  +body?: ?string;
  +cache?: ?(\\"default\\" | \\"reload\\" | \\"force-cache\\" | \\"only-if-cached\\");
  +width?: ?number;
  +height?: ?number;
  +scale?: ?number;
}
export type ImageSource =
  | number
  | ImageURISource
  | $ReadOnlyArray<ImageURISource>;
type ImageSourceProperties = {
  body?: ?string,
  bundle?: ?string,
  cache?: ?(\\"default\\" | \\"reload\\" | \\"force-cache\\" | \\"only-if-cached\\"),
  headers?: ?{ [string]: string },
  height?: ?number,
  method?: ?string,
  scale?: ?number,
  uri?: ?string,
  width?: ?number,
  ...
};
declare export function getImageSourceProperties(
  imageSource: ImageURISource
): $ReadOnly<ImageSourceProperties>;
"
`;

exports[`public API should not change unintentionally Libraries/Image/ImageSourceUtils.js 1`] = `
"declare export function getImageSourcesFromImageProps(
  imageProps: ImageProps
): ?ResolvedAssetSource | $ReadOnlyArray<{ uri: string, ... }>;
"
`;

exports[`public API should not change unintentionally Libraries/Image/ImageTypes.flow.js 1`] = `
"type ImageComponentStaticsIOS = $ReadOnly<{
  getSize(uri: string): Promise<{ width: number, height: number }>,
  getSize(
    uri: string,
    success: (width: number, height: number) => void,
    failure?: (error: mixed) => void
  ): void,
  getSizeWithHeaders(
    uri: string,
    headers: { [string]: string, ... }
  ): Promise<{ width: number, height: number }>,
  getSizeWithHeaders(
    uri: string,
    headers: { [string]: string, ... },
    success: (width: number, height: number) => void,
    failure?: (error: mixed) => void
  ): void,
  prefetch(url: string): Promise<boolean>,
  prefetchWithMetadata(
    url: string,
    queryRootName: string,
    rootTag?: ?RootTag
  ): Promise<boolean>,
  queryCache(
    urls: Array<string>
  ): Promise<{ [string]: \\"memory\\" | \\"disk\\" | \\"disk/memory\\", ... }>,
  resolveAssetSource(source: ImageSource): ?ResolvedAssetSource,
}>;
type ImageComponentStaticsAndroid = $ReadOnly<{
  ...ImageComponentStaticsIOS,
  abortPrefetch(requestId: number): void,
}>;
export type AbstractImageAndroid = component(
  ref: React.RefSetter<
    | React.ElementRef<TextInlineImageNativeComponent>
    | React.ElementRef<ImageViewNativeComponent>,
  >,
  ...props: ImagePropsType
);
export type ImageAndroid = AbstractImageAndroid & ImageComponentStaticsAndroid;
export type AbstractImageIOS = component(
  ref: React.RefSetter<React.ElementRef<ImageViewNativeComponent>>,
  ...props: ImagePropsType
);
export type ImageIOS = AbstractImageIOS & ImageComponentStaticsIOS;
export type Image = ImageIOS | ImageAndroid;
export type { ImageProps } from \\"./ImageProps\\";
"
`;

exports[`public API should not change unintentionally Libraries/Image/ImageUtils.js 1`] = `
"declare export function convertObjectFitToResizeMode(
  objectFit: ?string
): ?ImageResizeMode;
"
`;

exports[`public API should not change unintentionally Libraries/Image/ImageViewNativeComponent.js 1`] = `
"type Props = $ReadOnly<{
  ...ImageProps,
  ...ViewProps,
  style?: ImageStyleProp | DangerouslyImpreciseStyle,
  tintColor?: ColorValue,
  shouldNotifyLoadEvents?: boolean,
  src?:
    | ?ResolvedAssetSource
    | ?$ReadOnlyArray<?$ReadOnly<{ uri?: ?string, ... }>>,
  headers?: ?{ [string]: string },
  defaultSrc?: ?string,
  loadingIndicatorSrc?: ?string,
}>;
interface NativeCommands {
  +setIsVisible_EXPERIMENTAL: (
    viewRef: HostInstance,
    isVisible: boolean,
    time: number
  ) => void;
}
declare export const Commands: NativeCommands;
declare export const __INTERNAL_VIEW_CONFIG: PartialViewConfig;
declare const ImageViewNativeComponent: HostComponent<Props>;
declare export default typeof ImageViewNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/Image/NativeImageEditor.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeImageEditor\\";
declare export default typeof NativeImageEditor;
"
`;

exports[`public API should not change unintentionally Libraries/Image/NativeImageLoaderAndroid.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeImageLoaderAndroid\\";
declare export default typeof NativeImageLoaderAndroid;
"
`;

exports[`public API should not change unintentionally Libraries/Image/NativeImageLoaderIOS.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeImageLoaderIOS\\";
declare export default typeof NativeImageLoaderIOS;
"
`;

exports[`public API should not change unintentionally Libraries/Image/NativeImageStoreAndroid.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeImageStoreAndroid\\";
declare export default typeof NativeImageStoreAndroid;
"
`;

exports[`public API should not change unintentionally Libraries/Image/NativeImageStoreIOS.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeImageStoreIOS\\";
declare export default typeof NativeImageStoreIOS;
"
`;

exports[`public API should not change unintentionally Libraries/Image/RelativeImageStub.js 1`] = `
"declare module.exports: number;
"
`;

exports[`public API should not change unintentionally Libraries/Image/TextInlineImageNativeComponent.js 1`] = `
"type NativeProps = $ReadOnly<{
  ...ViewProps,
  resizeMode?: ?ImageResizeMode,
  src?: ?$ReadOnlyArray<?$ReadOnly<{ uri?: ?string, ... }>>,
  tintColor?: ?ColorValue,
  headers?: ?{ [string]: string },
}>;
declare export const __INTERNAL_VIEW_CONFIG: PartialViewConfig;
declare const TextInlineImage: HostComponent<NativeProps>;
declare export default typeof TextInlineImage;
"
`;

exports[`public API should not change unintentionally Libraries/Image/nativeImageSource.js 1`] = `
"type NativeImageSourceSpec = $ReadOnly<{|
  android?: string,
  ios?: string,
  default?: string,
  height: number,
  width: number,
|}>;
declare function nativeImageSource(spec: NativeImageSourceSpec): ImageURISource;
declare module.exports: nativeImageSource;
"
`;

exports[`public API should not change unintentionally Libraries/Image/resolveAssetSource.js 1`] = `
"declare function resolveAssetSource(source: ?ImageSource): ?ResolvedAssetSource;
declare module.exports: resolveAssetSource;
"
`;

exports[`public API should not change unintentionally Libraries/Inspector/BorderBox.js 1`] = `
"declare const React: $FlowFixMe;
declare class BorderBox extends React.Component<$FlowFixMeProps> {
  render(): $FlowFixMe | React.Node;
}
declare module.exports: BorderBox;
"
`;

exports[`public API should not change unintentionally Libraries/Inspector/BoxInspector.js 1`] = `
"declare const React: $FlowFixMe;
declare class BoxInspector extends React.Component<$FlowFixMeProps> {
  render(): React.Node;
}
declare module.exports: BoxInspector;
"
`;

exports[`public API should not change unintentionally Libraries/Inspector/ElementBox.js 1`] = `
"declare const React: $FlowFixMe;
declare class ElementBox extends React.Component<$FlowFixMeProps> {
  render(): React.Node;
}
declare module.exports: ElementBox;
"
`;

exports[`public API should not change unintentionally Libraries/Inspector/ElementProperties.js 1`] = `
"declare const React: $FlowFixMe;
type Props = $ReadOnly<{|
  hierarchy: ?InspectorData[\\"hierarchy\\"],
  style?: ?ViewStyleProp,
  frame?: ?Object,
  selection?: ?number,
  setSelection?: (number) => mixed,
|}>;
declare class ElementProperties extends React.Component<Props> {
  render(): React.Node;
}
declare module.exports: ElementProperties;
"
`;

exports[`public API should not change unintentionally Libraries/Inspector/Inspector.js 1`] = `
"declare const React: $FlowFixMe;
export type InspectedElementFrame = TouchedViewDataAtPoint[\\"frame\\"];
export type InspectedElement = $ReadOnly<{
  frame: InspectedElementFrame,
  style?: ViewStyleProp,
}>;
export type ElementsHierarchy = InspectorData[\\"hierarchy\\"];
type Props = {
  inspectedViewRef: InspectedViewRef,
  onRequestRerenderApp: () => void,
  reactDevToolsAgent?: ReactDevToolsAgent,
};
declare function Inspector(Props): React.Node;
declare module.exports: Inspector;
"
`;

exports[`public API should not change unintentionally Libraries/Inspector/InspectorOverlay.js 1`] = `
"declare const React: $FlowFixMe;
type Props = $ReadOnly<{|
  inspected?: ?InspectedElement,
  onTouchPoint: (locationX: number, locationY: number) => void,
|}>;
declare function InspectorOverlay(Props): React.Node;
declare module.exports: InspectorOverlay;
"
`;

exports[`public API should not change unintentionally Libraries/Inspector/InspectorPanel.js 1`] = `
"declare const React: $FlowFixMe;
type Props = $ReadOnly<{|
  devtoolsIsOpen: boolean,
  inspecting: boolean,
  setInspecting: (val: boolean) => void,
  perfing: boolean,
  setPerfing: (val: boolean) => void,
  touchTargeting: boolean,
  setTouchTargeting: (val: boolean) => void,
  networking: boolean,
  setNetworking: (val: boolean) => void,
  hierarchy?: ?ElementsHierarchy,
  selection?: ?number,
  setSelection: (number) => mixed,
  inspected?: ?InspectedElement,
|}>;
declare class InspectorPanel extends React.Component<Props> {
  renderWaiting(): React.Node;
  render(): React.Node;
}
declare module.exports: InspectorPanel;
"
`;

exports[`public API should not change unintentionally Libraries/Inspector/NetworkOverlay.js 1`] = `
"declare const ScrollView: $FlowFixMe;
declare const React: $FlowFixMe;
type NetworkRequestInfo = {
  id: number,
  type?: string,
  url?: string,
  method?: string,
  status?: number,
  dataSent?: any,
  responseContentType?: string,
  responseSize?: number,
  requestHeaders?: Object,
  responseHeaders?: string,
  response?: Object | string,
  responseURL?: string,
  responseType?: string,
  timeout?: number,
  closeReason?: string,
  messages?: string,
  serverClose?: Object,
  serverError?: Object,
  ...
};
type Props = $ReadOnly<{||}>;
type State = {|
  detailRowId: ?number,
  requests: Array<NetworkRequestInfo>,
|};
declare class NetworkOverlay extends React.Component<Props, State> {
  _requestsListView: ?React.ElementRef<Class<FlatList<NetworkRequestInfo>>>;
  _detailScrollView: ?React.ElementRef<typeof ScrollView>;
  _requestsListViewScrollMetrics: {
    contentLength: number,
    offset: number,
    visibleLength: number,
  };
  _socketIdMap: { [string]: number };
  _xhrIdMap: { [key: number]: number, ... };
  state: State;
  _enableXHRInterception(): void;
  _enableWebSocketInterception(): void;
  componentDidMount(): void;
  componentWillUnmount(): void;
  _renderItem: $FlowFixMe;
  _renderItemDetail(id: number): React.Node;
  _indicateAdditionalRequests: $FlowFixMe;
  _captureRequestsListView: $FlowFixMe;
  _requestsListViewOnScroll: $FlowFixMe;
  _pressRow(rowId: number): void;
  _scrollDetailToTop: $FlowFixMe;
  _closeButtonClicked: $FlowFixMe;
  _getRequestIndexByXHRID(index: number): number;
  render(): React.Node;
}
declare module.exports: NetworkOverlay;
"
`;

exports[`public API should not change unintentionally Libraries/Inspector/PerformanceOverlay.js 1`] = `
"declare const React: $FlowFixMe;
declare class PerformanceOverlay extends React.Component<{ ... }> {
  render(): React.Node;
}
declare module.exports: PerformanceOverlay;
"
`;

exports[`public API should not change unintentionally Libraries/Inspector/ReactDevToolsOverlay.js 1`] = `
"type Props = {
  inspectedViewRef: InspectedViewRef,
  reactDevToolsAgent: ReactDevToolsAgent,
};
declare export default function ReactDevToolsOverlay(Props): React.Node;
"
`;

exports[`public API should not change unintentionally Libraries/Inspector/StyleInspector.js 1`] = `
"declare const React: $FlowFixMe;
declare class StyleInspector extends React.Component<$FlowFixMeProps> {
  render(): React.Node;
}
declare module.exports: StyleInspector;
"
`;

exports[`public API should not change unintentionally Libraries/Inspector/getInspectorDataForViewAtPoint.js 1`] = `
"export type ReactRenderer = {
  rendererConfig: {
    getInspectorDataForViewAtPoint: (
      inspectedView: ?HostInstance,
      locationX: number,
      locationY: number,
      callback: Function
    ) => void,
    ...
  },
};
declare module.exports: (
  inspectedView: ?HostInstance,
  locationX: number,
  locationY: number,
  callback: (viewData: TouchedViewDataAtPoint) => boolean
) => void;
"
`;

exports[`public API should not change unintentionally Libraries/Inspector/resolveBoxStyle.js 1`] = `
"declare function resolveBoxStyle(
  prefix: string,
  style: Object
): ?$ReadOnly<{|
  bottom: number,
  left: number,
  right: number,
  top: number,
|}>;
declare module.exports: resolveBoxStyle;
"
`;

exports[`public API should not change unintentionally Libraries/Interaction/FrameRateLogger.js 1`] = `
"declare const FrameRateLogger: {
  setGlobalOptions: (options: { debug?: boolean, ... }) => void,
  setContext: (context: string) => void,
  beginScroll(): void,
  endScroll(): void,
};
declare module.exports: FrameRateLogger;
"
`;

exports[`public API should not change unintentionally Libraries/Interaction/InteractionManager.js 1`] = `
"export type Handle = number;
declare const InteractionManager: {
  Events: {
    interactionStart: \\"interactionStart\\",
    interactionComplete: \\"interactionComplete\\",
  },
  runAfterInteractions(task: ?Task): {
    then: <U>(
      onFulfill?: ?(void) => ?(Promise<U> | U),
      onReject?: ?(error: mixed) => ?(Promise<U> | U)
    ) => Promise<U>,
    cancel: () => void,
    ...
  },
  createInteractionHandle(): Handle,
  clearInteractionHandle(handle: Handle): void,
  addListener: $FlowFixMe,
  setDeadline(deadline: number): void,
};
declare module.exports: typeof InteractionManager;
"
`;

exports[`public API should not change unintentionally Libraries/Interaction/InteractionManagerStub.js 1`] = `
"export type Handle = number;
type Task =
  | {
      name: string,
      run: () => void,
    }
  | {
      name: string,
      gen: () => Promise<void>,
    }
  | (() => void);
declare const InteractionManagerStub: {
  Events: {
    interactionStart: \\"interactionStart\\",
    interactionComplete: \\"interactionComplete\\",
  },
  runAfterInteractions(task: ?Task): {
    then: <U>(
      onFulfill?: ?(void) => ?(Promise<U> | U),
      onReject?: ?(error: mixed) => ?(Promise<U> | U)
    ) => Promise<U>,
    cancel: () => void,
    ...
  },
  createInteractionHandle(): Handle,
  clearInteractionHandle(handle: Handle): void,
  addListener(): EventSubscription,
  setDeadline(deadline: number): void,
};
declare module.exports: InteractionManagerStub;
"
`;

exports[`public API should not change unintentionally Libraries/Interaction/JSEventLoopWatchdog.js 1`] = `
"type Handler = {
  onIterate?: () => void,
  onStall: (params: { lastInterval: number, busyTime: number, ... }) => ?string,
  ...
};
declare const JSEventLoopWatchdog: {
  getStats: () => Object,
  reset: () => void,
  addHandler: (handler: Handler) => void,
  install: ({ thresholdMS: number, ... }) => void,
};
declare module.exports: JSEventLoopWatchdog;
"
`;

exports[`public API should not change unintentionally Libraries/Interaction/NativeFrameRateLogger.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeFrameRateLogger\\";
declare export default typeof NativeFrameRateLogger;
"
`;

exports[`public API should not change unintentionally Libraries/Interaction/PanResponder.js 1`] = `
"export type GestureState = {|
  stateID: number,
  moveX: number,
  moveY: number,
  x0: number,
  y0: number,
  dx: number,
  dy: number,
  vx: number,
  vy: number,
  numberActiveTouches: number,
  _accountsForMovesUpTo: number,
|};
type ActiveCallback = (
  event: PressEvent,
  gestureState: GestureState
) => boolean;
type PassiveCallback = (event: PressEvent, gestureState: GestureState) => mixed;
export type PanHandlers = {|
  onMoveShouldSetResponder: (event: PressEvent) => boolean,
  onMoveShouldSetResponderCapture: (event: PressEvent) => boolean,
  onResponderEnd: (event: PressEvent) => void,
  onResponderGrant: (event: PressEvent) => boolean,
  onResponderMove: (event: PressEvent) => void,
  onResponderReject: (event: PressEvent) => void,
  onResponderRelease: (event: PressEvent) => void,
  onResponderStart: (event: PressEvent) => void,
  onResponderTerminate: (event: PressEvent) => void,
  onResponderTerminationRequest: (event: PressEvent) => boolean,
  onStartShouldSetResponder: (event: PressEvent) => boolean,
  onStartShouldSetResponderCapture: (event: PressEvent) => boolean,
|};
type PanResponderConfig = $ReadOnly<{|
  onMoveShouldSetPanResponder?: ?ActiveCallback,
  onMoveShouldSetPanResponderCapture?: ?ActiveCallback,
  onStartShouldSetPanResponder?: ?ActiveCallback,
  onStartShouldSetPanResponderCapture?: ?ActiveCallback,
  onPanResponderGrant?: ?(PassiveCallback | ActiveCallback),
  onPanResponderReject?: ?PassiveCallback,
  onPanResponderStart?: ?PassiveCallback,
  onPanResponderEnd?: ?PassiveCallback,
  onPanResponderRelease?: ?PassiveCallback,
  onPanResponderMove?: ?PassiveCallback,
  onPanResponderTerminate?: ?PassiveCallback,
  onPanResponderTerminationRequest?: ?ActiveCallback,
  onShouldBlockNativeResponder?: ?ActiveCallback,
|}>;
declare const PanResponder: {
  _initializeGestureState(gestureState: GestureState): void,
  _updateGestureStateOnMove(
    gestureState: GestureState,
    touchHistory: $PropertyType<PressEvent, \\"touchHistory\\">
  ): void,
  create(config: PanResponderConfig): {
    getInteractionHandle: () => ?number,
    panHandlers: PanHandlers,
  },
};
export type PanResponderInstance = ReturnType<(typeof PanResponder)[\\"create\\"]>;
declare export default typeof PanResponder;
"
`;

exports[`public API should not change unintentionally Libraries/Interaction/TaskQueue.js 1`] = `
"type SimpleTask = {
  name: string,
  run: () => void,
};
type PromiseTask = {
  name: string,
  gen: () => Promise<void>,
};
export type Task = SimpleTask | PromiseTask | (() => void);
declare class TaskQueue {
  constructor({ onMoreTasks: () => void, ... }): void;
  enqueue(task: Task): void;
  enqueueTasks(tasks: Array<Task>): void;
  cancelTasks(tasksToCancel: Array<Task>): void;
  hasTasksToProcess(): boolean;
  processNext(): void;
  _queueStack: Array<{
    tasks: Array<Task>,
    popable: boolean,
    ...
  }>;
  _onMoreTasks: () => void;
  _getCurrentQueue(): Array<Task>;
  _genPromise(task: PromiseTask): void;
}
declare module.exports: TaskQueue;
"
`;

exports[`public API should not change unintentionally Libraries/Interaction/TouchHistoryMath.js 1`] = `
"declare const TouchHistoryMath: {
  centroidDimension: (
    touchHistory: TouchHistoryMath,
    touchesChangedAfter: number,
    isXAxis: boolean,
    ofCurrent: boolean
  ) => number,
  currentCentroidXOfTouchesChangedAfter: (
    touchHistory: TouchHistoryMath,
    touchesChangedAfter: number
  ) => number,
  currentCentroidYOfTouchesChangedAfter: (
    touchHistory: TouchHistoryMath,
    touchesChangedAfter: number
  ) => number,
  previousCentroidXOfTouchesChangedAfter: (
    touchHistory: TouchHistoryMath,
    touchesChangedAfter: number
  ) => number,
  previousCentroidYOfTouchesChangedAfter: (
    touchHistory: TouchHistoryMath,
    touchesChangedAfter: number
  ) => number,
  currentCentroidX: (touchHistory: TouchHistoryMath) => number,
  currentCentroidY: (touchHistory: TouchHistoryMath) => number,
  noCentroid: $FlowFixMe,
};
declare module.exports: TouchHistoryMath;
"
`;

exports[`public API should not change unintentionally Libraries/JSInspector/InspectorAgent.js 1`] = `
"export type EventSender = (name: string, params: mixed) => void;
declare class InspectorAgent {
  _eventSender: EventSender;
  constructor(eventSender: EventSender): void;
  sendEvent(name: string, params: mixed): void;
}
declare module.exports: InspectorAgent;
"
`;

exports[`public API should not change unintentionally Libraries/JSInspector/JSInspector.js 1`] = `
"interface Agent {
  constructor(eventSender: EventSender): void;
}
type AgentClass = Class<Agent> & { DOMAIN: string, ... };
declare const JSInspector: {
  registerAgent(type: AgentClass): void,
  getTimestamp(): number,
};
declare module.exports: JSInspector;
"
`;

exports[`public API should not change unintentionally Libraries/JSInspector/NetworkAgent.js 1`] = `
"declare const InspectorAgent: $FlowFixMe;
type RequestId = string;
type Headers = { [string]: string };
declare class Interceptor {
  _agent: NetworkAgent;
  _requests: Map<string, string>;
  constructor(agent: NetworkAgent): void;
  getData(requestId: string): ?string;
  requestSent(id: number, url: string, method: string, headers: Headers): void;
  responseReceived(
    id: number,
    url: string,
    status: number,
    headers: Headers
  ): void;
  dataReceived(id: number, data: string): void;
  loadingFinished(id: number, encodedDataLength: number): void;
  loadingFailed(id: number, error: string): void;
  _getMimeType(headers: Headers): string;
}
type EnableArgs = {
  maxResourceBufferSize?: number,
  maxTotalBufferSize?: number,
  ...
};
declare class NetworkAgent extends InspectorAgent {
  static DOMAIN: string;
  _sendEvent: EventSender;
  _interceptor: ?Interceptor;
  enable(EnableArgs): void;
  disable(): void;
  getResponseBody({ requestId: RequestId, ... }): {
    body: ?string,
    base64Encoded: boolean,
    ...
  };
  interceptor(): Interceptor;
}
declare module.exports: NetworkAgent;
"
`;

exports[`public API should not change unintentionally Libraries/LayoutAnimation/LayoutAnimation.js 1`] = `
"export type LayoutAnimationConfig = LayoutAnimationConfig_;
type OnAnimationDidEndCallback = () => void;
type OnAnimationDidFailCallback = () => void;
declare function setEnabled(value: boolean): void;
declare function configureNext(
  config: LayoutAnimationConfig,
  onAnimationDidEnd?: OnAnimationDidEndCallback,
  onAnimationDidFail?: OnAnimationDidFailCallback
): void;
declare function create(
  duration: number,
  type: LayoutAnimationType,
  property: LayoutAnimationProperty
): LayoutAnimationConfig;
declare const Presets: {
  easeInEaseOut: LayoutAnimationConfig,
  linear: LayoutAnimationConfig,
  spring: LayoutAnimationConfig,
};
declare const LayoutAnimation: {
  configureNext: configureNext,
  create: create,
  Types: $FlowFixMe,
  Properties: $FlowFixMe,
  checkConfig(...args: Array<mixed>): void,
  Presets: Presets,
  easeInEaseOut: (onAnimationDidEnd?: OnAnimationDidEndCallback) => void,
  linear: (onAnimationDidEnd?: OnAnimationDidEndCallback) => void,
  spring: (onAnimationDidEnd?: OnAnimationDidEndCallback) => void,
  setEnabled: setEnabled,
};
declare module.exports: LayoutAnimation;
"
`;

exports[`public API should not change unintentionally Libraries/Linking/Linking.js 1`] = `
"type LinkingEventDefinitions = {
  url: [{ url: string }],
};
declare class Linking extends NativeEventEmitter<LinkingEventDefinitions> {
  constructor(): void;
  addEventListener<K: $Keys<LinkingEventDefinitions>>(
    eventType: K,
    listener: (...$ElementType<LinkingEventDefinitions, K>) => mixed,
    context: $FlowFixMe
  ): EventSubscription;
  openURL(url: string): Promise<void>;
  canOpenURL(url: string): Promise<boolean>;
  openSettings(): Promise<void>;
  getInitialURL(): Promise<?string>;
  sendIntent(
    action: string,
    extras?: Array<{
      key: string,
      value: string | number | boolean,
      ...
    }>
  ): Promise<void>;
  _validateURL(url: string): void;
}
declare module.exports: Linking;
"
`;

exports[`public API should not change unintentionally Libraries/Linking/NativeIntentAndroid.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeIntentAndroid\\";
declare export default typeof NativeIntentAndroid;
"
`;

exports[`public API should not change unintentionally Libraries/Linking/NativeLinkingManager.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeLinkingManager\\";
declare export default typeof NativeLinkingManager;
"
`;

exports[`public API should not change unintentionally Libraries/Lists/FillRateHelper.js 1`] = `
"declare const FillRateHelper: FillRateHelperType;
export type { FillRateInfo } from \\"@react-native/virtualized-lists\\";
declare module.exports: FillRateHelper;
"
`;

exports[`public API should not change unintentionally Libraries/Lists/FlatList.js 1`] = `
"declare const View: $FlowFixMe;
declare const React: $FlowFixMe;
type RequiredProps<ItemT> = {|
  data: ?$ReadOnly<$ArrayLike<ItemT>>,
|};
type OptionalProps<ItemT> = {|
  renderItem?: ?RenderItemType<ItemT>,
  columnWrapperStyle?: ViewStyleProp,
  extraData?: any,
  getItemLayout?: (
    data: ?$ReadOnly<$ArrayLike<ItemT>>,
    index: number
  ) => {
    length: number,
    offset: number,
    index: number,
    ...
  },
  horizontal?: ?boolean,
  initialNumToRender?: ?number,
  initialScrollIndex?: ?number,
  inverted?: ?boolean,
  keyExtractor?: ?(item: ItemT, index: number) => string,
  numColumns?: number,
  removeClippedSubviews?: boolean,
  fadingEdgeLength?: ?number,
  strictMode?: boolean,
|};
type FlatListProps<ItemT> = {|
  ...RequiredProps<ItemT>,
  ...OptionalProps<ItemT>,
|};
type VirtualizedListProps = React.ElementConfig<typeof VirtualizedList>;
export type Props<ItemT> = {
  ...$Diff<
    VirtualizedListProps,
    {
      getItem: $PropertyType<VirtualizedListProps, \\"getItem\\">,
      getItemCount: $PropertyType<VirtualizedListProps, \\"getItemCount\\">,
      getItemLayout: $PropertyType<VirtualizedListProps, \\"getItemLayout\\">,
      renderItem: $PropertyType<VirtualizedListProps, \\"renderItem\\">,
      keyExtractor: $PropertyType<VirtualizedListProps, \\"keyExtractor\\">,
      ...
    },
  >,
  ...FlatListProps<ItemT>,
  ...
};
declare class FlatList<ItemT> extends React.PureComponent<Props<ItemT>, void> {
  scrollToEnd(params?: ?{ animated?: ?boolean, ... }): void;
  scrollToIndex(params: {
    animated?: ?boolean,
    index: number,
    viewOffset?: number,
    viewPosition?: number,
    ...
  }): void;
  scrollToItem(params: {
    animated?: ?boolean,
    item: ItemT,
    viewOffset?: number,
    viewPosition?: number,
    ...
  }): void;
  scrollToOffset(params: { animated?: ?boolean, offset: number, ... }): void;
  recordInteraction(): void;
  flashScrollIndicators(): void;
  getScrollResponder(): ?ScrollResponderType;
  getNativeScrollRef():
    | ?React.ElementRef<typeof View>
    | ?React.ElementRef<ScrollViewNativeComponent>;
  getScrollableNode(): any;
  setNativeProps(props: { [string]: mixed, ... }): void;
  constructor(props: Props<ItemT>): void;
  componentDidUpdate(prevProps: Props<ItemT>): void;
  _listRef: ?VirtualizedList;
  _virtualizedListPairs: Array<ViewabilityConfigCallbackPair>;
  _captureRef: $FlowFixMe;
  _checkProps(props: Props<ItemT>): void;
  _getItem: $FlowFixMe;
  _getItemCount: $FlowFixMe;
  _keyExtractor: $FlowFixMe;
  _pushMultiColumnViewable(arr: Array<ViewToken>, v: ViewToken): void;
  _createOnViewableItemsChanged(
    onViewableItemsChanged: ?(info: {
      viewableItems: Array<ViewToken>,
      changed: Array<ViewToken>,
      ...
    }) => void
  ): void;
  _renderer: $FlowFixMe;
  _memoizedRenderer: $FlowFixMe;
  render(): React.Node;
}
declare module.exports: FlatList;
"
`;

exports[`public API should not change unintentionally Libraries/Lists/SectionList.js 1`] = `
"type Item = any;
export type SectionBase<SectionItemT> = _SectionBase<SectionItemT>;
type RequiredProps<SectionT: SectionBase<any>> = {|
  sections: $ReadOnlyArray<SectionT>,
|};
type OptionalProps<SectionT: SectionBase<any>> = {|
  renderItem?: (info: {
    item: Item,
    index: number,
    section: SectionT,
    separators: {
      highlight: () => void,
      unhighlight: () => void,
      updateProps: (select: \\"leading\\" | \\"trailing\\", newProps: Object) => void,
      ...
    },
    ...
  }) => null | React.Node,
  extraData?: any,
  initialNumToRender?: ?number,
  inverted?: ?boolean,
  keyExtractor?: ?(item: Item, index: number) => string,
  onEndReached?: ?(info: { distanceFromEnd: number, ... }) => void,
  removeClippedSubviews?: boolean,
|};
export type Props<SectionT> = {|
  ...$Diff<
    VirtualizedSectionListProps<SectionT>,
    {
      getItem: $PropertyType<VirtualizedSectionListProps<SectionT>, \\"getItem\\">,
      getItemCount: $PropertyType<
        VirtualizedSectionListProps<SectionT>,
        \\"getItemCount\\",
      >,
      renderItem: $PropertyType<
        VirtualizedSectionListProps<SectionT>,
        \\"renderItem\\",
      >,
      keyExtractor: $PropertyType<
        VirtualizedSectionListProps<SectionT>,
        \\"keyExtractor\\",
      >,
      ...
    },
  >,
  ...RequiredProps<SectionT>,
  ...OptionalProps<SectionT>,
|};
declare export default class SectionList<SectionT: SectionBase<any>>
  extends React.PureComponent<Props<SectionT>, void>
{
  props: Props<SectionT>;
  scrollToLocation(params: ScrollToLocationParamsType): void;
  recordInteraction(): void;
  flashScrollIndicators(): void;
  getScrollResponder(): ?ScrollResponderType;
  getScrollableNode(): any;
  setNativeProps(props: Object): void;
  render(): React.Node;
  _wrapperListRef: ?React.ElementRef<typeof VirtualizedSectionList>;
  _captureRef: $FlowFixMe;
}
"
`;

exports[`public API should not change unintentionally Libraries/Lists/SectionListModern.js 1`] = `
"type Item = any;
export type SectionBase<SectionItemT> = _SectionBase<SectionItemT>;
type RequiredProps<SectionT: SectionBase<any>> = {|
  sections: $ReadOnlyArray<SectionT>,
|};
type OptionalProps<SectionT: SectionBase<any>> = {|
  renderItem?: (info: {
    item: Item,
    index: number,
    section: SectionT,
    separators: {
      highlight: () => void,
      unhighlight: () => void,
      updateProps: (select: \\"leading\\" | \\"trailing\\", newProps: Object) => void,
      ...
    },
    ...
  }) => null | React.MixedElement,
  extraData?: any,
  initialNumToRender?: ?number,
  inverted?: ?boolean,
  keyExtractor?: ?(item: Item, index: number) => string,
  onEndReached?: ?(info: { distanceFromEnd: number, ... }) => void,
  removeClippedSubviews?: boolean,
|};
export type Props<SectionT: SectionBase<any>> = $ReadOnly<{|
  ...$Diff<
    VirtualizedSectionListProps<SectionT>,
    {
      getItem: $PropertyType<VirtualizedSectionListProps<SectionT>, \\"getItem\\">,
      getItemCount: $PropertyType<
        VirtualizedSectionListProps<SectionT>,
        \\"getItemCount\\",
      >,
      renderItem: $PropertyType<
        VirtualizedSectionListProps<SectionT>,
        \\"renderItem\\",
      >,
      keyExtractor: $PropertyType<
        VirtualizedSectionListProps<SectionT>,
        \\"keyExtractor\\",
      >,
      ...
    },
  >,
  ...RequiredProps<SectionT>,
  ...OptionalProps<SectionT>,
|}>;
declare const SectionList: component(
  ref?: React.RefSetter<any>,
  ...Props<SectionBase<any>>
);
declare export default typeof SectionList;
"
`;

exports[`public API should not change unintentionally Libraries/Lists/ViewabilityHelper.js 1`] = `
"export type {
  ViewToken,
  ViewabilityConfig,
  ViewabilityConfigCallbackPair,
} from \\"@react-native/virtualized-lists\\";
declare const ViewabilityHelper: ViewabilityHelperType;
declare module.exports: ViewabilityHelper;
"
`;

exports[`public API should not change unintentionally Libraries/Lists/VirtualizeUtils.js 1`] = `
"declare const keyExtractor: KeyExtractorType;
declare module.exports: { keyExtractor: keyExtractor };
"
`;

exports[`public API should not change unintentionally Libraries/Lists/VirtualizedList.js 1`] = `
"declare const VirtualizedList: VirtualizedListType;
export type {
  RenderItemProps,
  RenderItemType,
  Separators,
} from \\"@react-native/virtualized-lists\\";
declare module.exports: VirtualizedList;
"
`;

exports[`public API should not change unintentionally Libraries/Lists/VirtualizedListContext.js 1`] = `
"declare const VirtualizedListContextResetter: VirtualizedListContextResetterType;
declare module.exports: {
  VirtualizedListContextResetter: VirtualizedListContextResetter,
};
"
`;

exports[`public API should not change unintentionally Libraries/Lists/VirtualizedSectionList.js 1`] = `
"declare const VirtualizedSectionList: VirtualizedSectionListType;
export type {
  SectionBase,
  ScrollToLocationParamsType,
} from \\"@react-native/virtualized-lists\\";
declare module.exports: VirtualizedSectionList;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/Data/LogBoxData.js 1`] = `
"export type LogBoxLogs = Set<LogBoxLog>;
export type LogData = $ReadOnly<{
  level: LogLevel,
  message: Message,
  category: Category,
  componentStack: ComponentStack,
  componentStackType: ComponentStackType | null,
  stack?: string,
}>;
export type Observer = (
  $ReadOnly<{|
    logs: LogBoxLogs,
    isDisabled: boolean,
    selectedLogIndex: number,
  |}>
) => void;
export type IgnorePattern = string | RegExp;
export type Subscription = $ReadOnly<{|
  unsubscribe: () => void,
|}>;
export type WarningInfo = {|
  finalFormat: string,
  forceDialogImmediately: boolean,
  suppressDialog_LEGACY: boolean,
  suppressCompletely: boolean,
  monitorEvent: string | null,
  monitorListVersion: number,
  monitorSampleRate: number,
|};
export type WarningFilter = (format: string) => WarningInfo;
type AppInfo = $ReadOnly<{|
  appVersion: string,
  engine: string,
  onPress?: ?() => void,
|}>;
declare export function reportLogBoxError(
  error: ExtendedError,
  componentStack?: string
): void;
declare export function isLogBoxErrorMessage(message: string): boolean;
declare export function isMessageIgnored(message: string): boolean;
declare export function addLog(log: LogData): void;
declare export function addException(error: ExtendedExceptionData): void;
declare export function symbolicateLogNow(log: LogBoxLog): void;
declare export function retrySymbolicateLogNow(log: LogBoxLog): void;
declare export function symbolicateLogLazy(log: LogBoxLog): void;
declare export function clear(): void;
declare export function setSelectedLog(proposedNewIndex: number): void;
declare export function clearWarnings(): void;
declare export function clearErrors(): void;
declare export function dismiss(log: LogBoxLog): void;
declare export function setWarningFilter(filter: WarningFilter): void;
declare export function setAppInfo(info: () => AppInfo): void;
declare export function getAppInfo(): ?AppInfo;
declare export function checkWarningFilter(format: string): WarningInfo;
declare export function getIgnorePatterns(): $ReadOnlyArray<IgnorePattern>;
declare export function addIgnorePatterns(
  patterns: $ReadOnlyArray<IgnorePattern>
): void;
declare export function setDisabled(value: boolean): void;
declare export function isDisabled(): boolean;
declare export function observe(observer: Observer): Subscription;
type SubscribedComponent = React.ComponentType<
  $ReadOnly<{|
    logs: $ReadOnlyArray<LogBoxLog>,
    isDisabled: boolean,
    selectedLogIndex: number,
  |}>,
>;
declare export function withSubscription(
  WrappedComponent: SubscribedComponent
): React.ComponentType<{||}>;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/Data/LogBoxLog.js 1`] = `
"type SymbolicationStatus = \\"NONE\\" | \\"PENDING\\" | \\"COMPLETE\\" | \\"FAILED\\";
export type LogLevel = \\"warn\\" | \\"error\\" | \\"fatal\\" | \\"syntax\\";
export type LogBoxLogData = $ReadOnly<{
  level: LogLevel,
  type?: ?string,
  message: Message,
  stack: Stack,
  category: string,
  componentStackType?: ComponentStackType,
  componentStack: ComponentStack,
  codeFrame?: ?CodeFrame,
  isComponentError: boolean,
  extraData?: mixed,
  onNotificationPress?: ?() => void,
}>;
declare class LogBoxLog {
  message: Message;
  type: ?string;
  category: Category;
  componentStack: ComponentStack;
  componentStackType: ComponentStackType;
  stack: Stack;
  count: number;
  level: LogLevel;
  codeFrame: ?CodeFrame;
  isComponentError: boolean;
  extraData: mixed | void;
  symbolicated:
    | $ReadOnly<{| error: null, stack: null, status: \\"NONE\\" |}>
    | $ReadOnly<{| error: null, stack: null, status: \\"PENDING\\" |}>
    | $ReadOnly<{| error: null, stack: Stack, status: \\"COMPLETE\\" |}>
    | $ReadOnly<{| error: Error, stack: null, status: \\"FAILED\\" |}>;
  symbolicatedComponentStack:
    | $ReadOnly<{| error: null, componentStack: null, status: \\"NONE\\" |}>
    | $ReadOnly<{| error: null, componentStack: null, status: \\"PENDING\\" |}>
    | $ReadOnly<{|
        error: null,
        componentStack: ComponentStack,
        status: \\"COMPLETE\\",
      |}>
    | $ReadOnly<{| error: Error, componentStack: null, status: \\"FAILED\\" |}>;
  onNotificationPress: ?() => void;
  constructor(data: LogBoxLogData): void;
  incrementCount(): void;
  getAvailableStack(): Stack;
  getAvailableComponentStack(): ComponentStack;
  retrySymbolicate(callback?: (status: SymbolicationStatus) => void): void;
  symbolicate(callback?: (status: SymbolicationStatus) => void): void;
  handleSymbolicate(callback?: (status: SymbolicationStatus) => void): void;
  updateStatus(
    error: ?Error,
    stack: ?Stack,
    codeFrame: ?CodeFrame,
    callback?: (status: SymbolicationStatus) => void
  ): void;
  updateComponentStackStatus(
    error: ?Error,
    componentStack: ?ComponentStack,
    codeFrame: ?CodeFrame,
    callback?: (status: SymbolicationStatus) => void
  ): void;
}
declare export default typeof LogBoxLog;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/Data/LogBoxSymbolication.js 1`] = `
"export type Stack = Array<StackFrame>;
declare export function deleteStack(stack: Stack): void;
declare export function symbolicate(
  stack: Stack,
  extraData?: mixed
): Promise<SymbolicatedStackTrace>;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/Data/parseLogBoxLog.js 1`] = `
"declare export function hasComponentStack(args: $ReadOnlyArray<mixed>): boolean;
export type ExtendedExceptionData = ExceptionData & {
  isComponentError: boolean,
  ...
};
export type Category = string;
export type CodeFrame = $ReadOnly<{|
  content: string,
  location: ?{
    row: number,
    column: number,
    ...
  },
  fileName: string,
  collapse?: boolean,
|}>;
export type Message = $ReadOnly<{|
  content: string,
  substitutions: $ReadOnlyArray<
    $ReadOnly<{|
      length: number,
      offset: number,
    |}>,
  >,
|}>;
export type ComponentStack = $ReadOnlyArray<CodeFrame>;
export type ComponentStackType = \\"legacy\\" | \\"stack\\";
declare export function parseInterpolation(
  args: $ReadOnlyArray<mixed>
): $ReadOnly<{|
  category: Category,
  message: Message,
|}>;
declare export function parseComponentStack(message: string): {
  type: ComponentStackType,
  stack: ComponentStack,
};
declare export function parseLogBoxException(
  error: ExtendedExceptionData
): LogBoxLogData;
declare export function withoutANSIColorStyles(message: mixed): mixed;
declare export function parseLogBoxLog(args: $ReadOnlyArray<mixed>): {|
  componentStack: ComponentStack,
  componentStackType: ComponentStackType,
  category: Category,
  message: Message,
|};
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/LogBox.js 1`] = `
"export type { LogData, ExtendedExceptionData, IgnorePattern };
interface ILogBox {
  install(): void;
  uninstall(): void;
  isInstalled(): boolean;
  ignoreLogs($ReadOnlyArray<IgnorePattern>): void;
  ignoreAllLogs(?boolean): void;
  clearAllLogs(): void;
  addLog(log: LogData): void;
  addException(error: ExtendedExceptionData): void;
}
declare export default ILogBox;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/LogBoxInspectorContainer.js 1`] = `
"type Props = $ReadOnly<{|
  logs: $ReadOnlyArray<LogBoxLog>,
  selectedLogIndex: number,
  isDisabled?: ?boolean,
|}>;
declare export class _LogBoxInspectorContainer extends React.Component<Props> {
  render(): React.Node;
  _handleDismiss: $FlowFixMe;
  _handleMinimize: $FlowFixMe;
  _handleSetSelectedLog: $FlowFixMe;
}
declare export default React.ComponentType<{||}>;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/LogBoxNotificationContainer.js 1`] = `
"type Props = $ReadOnly<{|
  logs: $ReadOnlyArray<LogBoxLog>,
  selectedLogIndex: number,
  isDisabled?: ?boolean,
|}>;
declare export function _LogBoxNotificationContainer(props: Props): React.Node;
declare export default React.ComponentType<{||}>;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/AnsiHighlight.js 1`] = `
"declare export default function Ansi({
  text: string,
  style: TextStyleProp,
  ...
}): React.Node;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxButton.js 1`] = `
"type Props = $ReadOnly<{|
  backgroundColor: $ReadOnly<{|
    default: string,
    pressed: string,
  |}>,
  children?: React.Node,
  hitSlop?: ?EdgeInsetsProp,
  onPress?: ?(event: PressEvent) => void,
  style?: ViewStyleProp,
|}>;
declare function LogBoxButton(props: Props): React.Node;
declare export default typeof LogBoxButton;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxInspector.js 1`] = `
"type Props = $ReadOnly<{
  onDismiss: () => void,
  onChangeSelectedIndex: (index: number) => void,
  onMinimize: () => void,
  logs: $ReadOnlyArray<LogBoxLog>,
  selectedIndex: number,
  fatalType?: ?LogLevel,
}>;
declare export default function LogBoxInspector(props: Props): React.Node;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxInspectorBody.js 1`] = `
"declare export default function LogBoxInspectorBody(props: {
  log: LogBoxLog,
  onRetry: () => void,
}): React.Node;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxInspectorCodeFrame.js 1`] = `
"type Props = $ReadOnly<{|
  codeFrame: ?CodeFrame,
|}>;
declare function LogBoxInspectorCodeFrame(props: Props): React.Node;
declare export default typeof LogBoxInspectorCodeFrame;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxInspectorFooter.js 1`] = `
"type Props = $ReadOnly<{
  onDismiss: () => void,
  onMinimize: () => void,
  level?: ?LogLevel,
}>;
declare export default function LogBoxInspectorFooter(props: Props): React.Node;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxInspectorFooterButton.js 1`] = `
"type ButtonProps = $ReadOnly<{
  onPress: () => void,
  text: string,
}>;
declare export default function LogBoxInspectorFooterButton(
  props: ButtonProps
): React.Node;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxInspectorHeader.js 1`] = `
"type Props = $ReadOnly<{
  onSelectIndex: (selectedIndex: number) => void,
  selectedIndex: number,
  total: number,
  level: LogLevel,
}>;
declare export default function LogBoxInspectorHeader(props: Props): React.Node;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxInspectorHeaderButton.js 1`] = `
"declare export default function LogBoxInspectorHeaderButton(
  props: $ReadOnly<{
    disabled: boolean,
    image: ImageSource,
    level: LogLevel,
    onPress?: ?() => void,
  }>
): React.Node;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxInspectorMessageHeader.js 1`] = `
"type Props = $ReadOnly<{|
  collapsed: boolean,
  message: Message,
  level: LogLevel,
  title: string,
  onPress: () => void,
|}>;
declare function LogBoxInspectorMessageHeader(props: Props): React.Node;
declare export default typeof LogBoxInspectorMessageHeader;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxInspectorReactFrames.js 1`] = `
"type Props = $ReadOnly<{|
  log: LogBoxLog,
|}>;
declare function LogBoxInspectorReactFrames(props: Props): React.Node;
declare export default typeof LogBoxInspectorReactFrames;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxInspectorSection.js 1`] = `
"type Props = $ReadOnly<{|
  heading: string,
  children: React.Node,
  action?: ?React.Node,
|}>;
declare function LogBoxInspectorSection(props: Props): React.Node;
declare export default typeof LogBoxInspectorSection;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxInspectorSourceMapStatus.js 1`] = `
"type Props = $ReadOnly<{|
  onPress?: ?(event: PressEvent) => void,
  status: \\"COMPLETE\\" | \\"FAILED\\" | \\"NONE\\" | \\"PENDING\\",
|}>;
declare function LogBoxInspectorSourceMapStatus(props: Props): React.Node;
declare export default typeof LogBoxInspectorSourceMapStatus;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxInspectorStackFrame.js 1`] = `
"type Props = $ReadOnly<{
  frame: StackFrame,
  onPress?: ?(event: PressEvent) => void,
}>;
declare function LogBoxInspectorStackFrame(props: Props): React.Node;
declare export default typeof LogBoxInspectorStackFrame;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxInspectorStackFrames.js 1`] = `
"type Props = $ReadOnly<{|
  log: LogBoxLog,
  onRetry: () => void,
|}>;
declare export function getCollapseMessage(
  stackFrames: Stack,
  collapsed: boolean
): string;
declare function LogBoxInspectorStackFrames(props: Props): React.Node;
declare export default typeof LogBoxInspectorStackFrames;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxMessage.js 1`] = `
"type Props = {
  message: Message,
  style: TextStyleProp,
  plaintext?: ?boolean,
  maxLength?: ?number,
  ...
};
declare function LogBoxMessage(props: Props): React.Node;
declare export default typeof LogBoxMessage;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxNotification.js 1`] = `
"type Props = $ReadOnly<{
  log: LogBoxLog,
  totalLogCount: number,
  level: \\"warn\\" | \\"error\\",
  onPressOpen: () => void,
  onPressDismiss: () => void,
}>;
declare export default function LogBoxNotification(props: Props): React.Node;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxNotificationCountBadge.js 1`] = `
"declare export default function LogBoxNotificationCountBadge(props: {
  count: number,
  level: \\"error\\" | \\"warn\\",
}): React.Node;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxNotificationDismissButton.js 1`] = `
"declare export default function LogBoxNotificationDismissButton(props: {
  onPress: () => void,
}): React.Node;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxNotificationMessage.js 1`] = `
"declare export default function LogBoxNotificationMessage(props: {
  message: MessageType,
}): React.Node;
"
`;

exports[`public API should not change unintentionally Libraries/LogBox/UI/LogBoxStyle.js 1`] = `
"declare export function getBackgroundColor(opacity?: number): string;
declare export function getBackgroundLightColor(opacity?: number): string;
declare export function getBackgroundDarkColor(opacity?: number): string;
declare export function getWarningColor(opacity?: number): string;
declare export function getWarningDarkColor(opacity?: number): string;
declare export function getFatalColor(opacity?: number): string;
declare export function getFatalDarkColor(opacity?: number): string;
declare export function getErrorColor(opacity?: number): string;
declare export function getErrorDarkColor(opacity?: number): string;
declare export function getLogColor(opacity?: number): string;
declare export function getWarningHighlightColor(opacity?: number): string;
declare export function getDividerColor(opacity?: number): string;
declare export function getHighlightColor(opacity?: number): string;
declare export function getTextColor(opacity?: number): string;
"
`;

exports[`public API should not change unintentionally Libraries/Modal/Modal.js 1`] = `
"declare const React: $FlowFixMe;
type OrientationChangeEvent = $ReadOnly<{|
  orientation: \\"portrait\\" | \\"landscape\\",
|}>;
export type Props = $ReadOnly<{|
  ...ViewProps,
  animationType?: ?(\\"none\\" | \\"slide\\" | \\"fade\\"),
  presentationStyle?: ?(
    | \\"fullScreen\\"
    | \\"pageSheet\\"
    | \\"formSheet\\"
    | \\"overFullScreen\\"
  ),
  transparent?: ?boolean,
  statusBarTranslucent?: ?boolean,
  navigationBarTranslucent?: ?boolean,
  hardwareAccelerated?: ?boolean,
  visible?: ?boolean,
  onRequestClose?: ?DirectEventHandler<null>,
  onShow?: ?DirectEventHandler<null>,
  onDismiss?: ?() => mixed,
  supportedOrientations?: ?$ReadOnlyArray<
    | \\"portrait\\"
    | \\"portrait-upside-down\\"
    | \\"landscape\\"
    | \\"landscape-left\\"
    | \\"landscape-right\\",
  >,
  onOrientationChange?: ?DirectEventHandler<OrientationChangeEvent>,
  backdropColor?: ?string,
|}>;
type State = {
  isRendered: boolean,
};
declare class Modal extends React.Component<Props, State> {
  static defaultProps: {| hardwareAccelerated: boolean, visible: boolean |};
  static contextType: React.Context<RootTag>;
  _identifier: number;
  _eventSubscription: ?EventSubscription;
  constructor(props: Props): void;
  componentDidMount(): void;
  componentWillUnmount(): void;
  componentDidUpdate(prevProps: Props): void;
  _shouldShowModal(): boolean;
  render(): React.Node;
  _shouldSetResponder(): boolean;
}
declare const ExportedModal: React.ComponentType<
  React.ElementConfig<typeof Modal>,
>;
declare module.exports: ExportedModal;
"
`;

exports[`public API should not change unintentionally Libraries/Modal/ModalInjection.js 1`] = `
"declare export default { unstable_Modal: ?Modal };
"
`;

exports[`public API should not change unintentionally Libraries/Modal/NativeModalManager.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeModalManager\\";
declare export default typeof NativeModalManager;
"
`;

exports[`public API should not change unintentionally Libraries/Modal/RCTModalHostViewNativeComponent.js 1`] = `
"export * from \\"../../src/private/specs/components/RCTModalHostViewNativeComponent\\";
declare export default typeof RCTModalHostViewNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/NativeComponent/BaseViewConfig.js.flow 1`] = `
"declare const PlatformBaseViewConfig: PartialViewConfigWithoutName;
declare export default typeof PlatformBaseViewConfig;
"
`;

exports[`public API should not change unintentionally Libraries/NativeComponent/NativeComponentRegistry.js 1`] = `
"declare export function setRuntimeConfigProvider(
  runtimeConfigProvider: (name: string) => ?{
    native: boolean,
    verify: boolean,
  }
): void;
declare export function get<Config: { ... }>(
  name: string,
  viewConfigProvider: () => PartialViewConfig
): HostComponent<Config>;
declare export function getWithFallback_DEPRECATED<Config: { ... }>(
  name: string,
  viewConfigProvider: () => PartialViewConfig
): React.ComponentType<Config>;
declare export function unstable_hasStaticViewConfig(name: string): boolean;
"
`;

exports[`public API should not change unintentionally Libraries/NativeComponent/NativeComponentRegistryUnstable.js 1`] = `
"declare export function unstable_hasComponent(name: string): boolean;
"
`;

exports[`public API should not change unintentionally Libraries/NativeComponent/PlatformBaseViewConfig.js 1`] = `
"export type PartialViewConfigWithoutName = $Rest<
  PartialViewConfig,
  { uiViewClassName: string },
>;
declare const PlatformBaseViewConfig: PartialViewConfigWithoutName;
declare export default typeof PlatformBaseViewConfig;
"
`;

exports[`public API should not change unintentionally Libraries/NativeComponent/StaticViewConfigValidator.js 1`] = `
"export type Difference =
  | {
      type: \\"missing\\",
      path: Array<string>,
      nativeValue: mixed,
    }
  | {
      type: \\"unequal\\",
      path: Array<string>,
      nativeValue: mixed,
      staticValue: mixed,
    };
export type ValidationResult = ValidResult | InvalidResult;
type ValidResult = {
  type: \\"valid\\",
};
type InvalidResult = {
  type: \\"invalid\\",
  differences: Array<Difference>,
};
declare export function validate(
  name: string,
  nativeViewConfig: ViewConfig,
  staticViewConfig: ViewConfig
): ValidationResult;
declare export function stringifyValidationResult(
  name: string,
  validationResult: InvalidResult
): string;
"
`;

exports[`public API should not change unintentionally Libraries/NativeComponent/ViewConfig.js 1`] = `
"declare export function createViewConfig(
  partialViewConfig: PartialViewConfig
): ViewConfig;
"
`;

exports[`public API should not change unintentionally Libraries/NativeComponent/ViewConfigIgnore.js 1`] = `
"declare export function DynamicallyInjectedByGestureHandler<T: { ... }>(
  object: T
): T;
declare export function ConditionallyIgnoredEventHandlers<
  T: { [name: string]: true },
>(
  value: T
): T | void;
declare export function isIgnored(value: mixed): boolean;
"
`;

exports[`public API should not change unintentionally Libraries/NativeModules/specs/NativeDevMenu.js 1`] = `
"export * from \\"../../../src/private/specs/modules/NativeDevMenu\\";
declare export default typeof NativeDevMenu;
"
`;

exports[`public API should not change unintentionally Libraries/NativeModules/specs/NativeDevSettings.js 1`] = `
"export * from \\"../../../src/private/specs/modules/NativeDevSettings\\";
declare export default typeof NativeDevSettings;
"
`;

exports[`public API should not change unintentionally Libraries/NativeModules/specs/NativeDeviceEventManager.js 1`] = `
"export * from \\"../../../src/private/specs/modules/NativeDeviceEventManager\\";
declare export default typeof NativeDeviceEventManager;
"
`;

exports[`public API should not change unintentionally Libraries/NativeModules/specs/NativeDialogManagerAndroid.js 1`] = `
"export * from \\"../../../src/private/specs/modules/NativeDialogManagerAndroid\\";
declare export default typeof NativeDialogManagerAndroid;
"
`;

exports[`public API should not change unintentionally Libraries/NativeModules/specs/NativeLogBox.js 1`] = `
"export * from \\"../../../src/private/specs/modules/NativeLogBox\\";
declare export default typeof NativeLogBox;
"
`;

exports[`public API should not change unintentionally Libraries/NativeModules/specs/NativeRedBox.js 1`] = `
"export * from \\"../../../src/private/specs/modules/NativeRedBox\\";
declare export default typeof NativeRedBox;
"
`;

exports[`public API should not change unintentionally Libraries/NativeModules/specs/NativeSourceCode.js 1`] = `
"export * from \\"../../../src/private/specs/modules/NativeSourceCode\\";
declare export default typeof NativeSourceCode;
"
`;

exports[`public API should not change unintentionally Libraries/Network/FormData.js 1`] = `
"type FormDataValue = string | { name?: string, type?: string, uri: string };
type FormDataNameValuePair = [string, FormDataValue];
type Headers = { [name: string]: string, ... };
type FormDataPart =
  | {
      string: string,
      headers: Headers,
      ...
    }
  | {
      uri: string,
      headers: Headers,
      name?: string,
      type?: string,
      ...
    };
declare class FormData {
  _parts: Array<FormDataNameValuePair>;
  constructor(): void;
  append(key: string, value: FormDataValue): void;
  getAll(key: string): Array<FormDataValue>;
  getParts(): Array<FormDataPart>;
}
declare module.exports: FormData;
"
`;

exports[`public API should not change unintentionally Libraries/Network/NativeNetworkingAndroid.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeNetworkingAndroid\\";
declare export default typeof NativeNetworkingAndroid;
"
`;

exports[`public API should not change unintentionally Libraries/Network/NativeNetworkingIOS.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeNetworkingIOS\\";
declare export default typeof NativeNetworkingIOS;
"
`;

exports[`public API should not change unintentionally Libraries/Network/RCTNetworking.js.flow 1`] = `
"declare const RCTNetworking: interface {
  addListener<K: $Keys<RCTNetworkingEventDefinitions>>(
    eventType: K,
    listener: (...$ElementType<RCTNetworkingEventDefinitions, K>) => mixed,
    context?: mixed
  ): EventSubscription,
  sendRequest(
    method: string,
    trackingName: string,
    url: string,
    headers: { ... },
    data: RequestBody,
    responseType: NativeResponseType,
    incrementalUpdates: boolean,
    timeout: number,
    callback: (requestId: number) => void,
    withCredentials: boolean
  ): void,
  abortRequest(requestId: number): void,
  clearCookies(callback: (result: boolean) => void): void,
};
declare export default typeof RCTNetworking;
"
`;

exports[`public API should not change unintentionally Libraries/Network/RCTNetworkingEventDefinitions.flow.js 1`] = `
"export type RCTNetworkingEventDefinitions = $ReadOnly<{
  didSendNetworkData: [[number, number, number]],
  didReceiveNetworkResponse: [[number, number, ?{ [string]: string }, ?string]],
  didReceiveNetworkData: [[number, string]],
  didReceiveNetworkIncrementalData: [[number, string, number, number]],
  didReceiveNetworkDataProgress: [[number, number, number]],
  didCompleteNetworkResponse: [[number, string, boolean]],
}>;
"
`;

exports[`public API should not change unintentionally Libraries/Network/XHRInterceptor.js 1`] = `
"type XHRInterceptorOpenCallback = (
  method: string,
  url: string,
  request: XMLHttpRequest
) => void;
type XHRInterceptorSendCallback = (
  data: string,
  request: XMLHttpRequest
) => void;
type XHRInterceptorRequestHeaderCallback = (
  header: string,
  value: string,
  request: XMLHttpRequest
) => void;
type XHRInterceptorHeaderReceivedCallback = (
  responseContentType: string | void,
  responseSize: number | void,
  allHeaders: string,
  request: XMLHttpRequest
) => void;
type XHRInterceptorResponseCallback = (
  status: number,
  timeout: number,
  response: string,
  responseURL: string,
  responseType: string,
  request: XMLHttpRequest
) => void;
declare const XHRInterceptor: {
  setOpenCallback(callback: XHRInterceptorOpenCallback): void,
  setSendCallback(callback: XHRInterceptorSendCallback): void,
  setHeaderReceivedCallback(
    callback: XHRInterceptorHeaderReceivedCallback
  ): void,
  setResponseCallback(callback: XHRInterceptorResponseCallback): void,
  setRequestHeaderCallback(callback: XHRInterceptorRequestHeaderCallback): void,
  isInterceptorEnabled(): boolean,
  enableInterception(): void,
  disableInterception(): void,
};
declare module.exports: XHRInterceptor;
"
`;

exports[`public API should not change unintentionally Libraries/Network/XMLHttpRequest.js 1`] = `
"export type NativeResponseType = \\"base64\\" | \\"blob\\" | \\"text\\";
export type ResponseType =
  | \\"\\"
  | \\"arraybuffer\\"
  | \\"blob\\"
  | \\"document\\"
  | \\"json\\"
  | \\"text\\";
export type Response = ?Object | string;
type XHRInterceptor = interface {
  requestSent(id: number, url: string, method: string, headers: Object): void,
  responseReceived(
    id: number,
    url: string,
    status: number,
    headers: Object
  ): void,
  dataReceived(id: number, data: string): void,
  loadingFinished(id: number, encodedDataLength: number): void,
  loadingFailed(id: number, error: string): void,
};
declare class XMLHttpRequestEventTarget extends EventTarget {
  onload: ?Function;
  onloadstart: ?Function;
  onprogress: ?Function;
  ontimeout: ?Function;
  onerror: ?Function;
  onabort: ?Function;
  onloadend: ?Function;
}
declare class XMLHttpRequest extends EventTarget {
  static UNSENT: number;
  static OPENED: number;
  static HEADERS_RECEIVED: number;
  static LOADING: number;
  static DONE: number;
  static _interceptor: ?XHRInterceptor;
  static _profiling: boolean;
  UNSENT: number;
  OPENED: number;
  HEADERS_RECEIVED: number;
  LOADING: number;
  DONE: number;
  onload: ?Function;
  onloadstart: ?Function;
  onprogress: ?Function;
  ontimeout: ?Function;
  onerror: ?Function;
  onabort: ?Function;
  onloadend: ?Function;
  onreadystatechange: ?Function;
  readyState: number;
  responseHeaders: ?Object;
  status: number;
  timeout: number;
  responseURL: ?string;
  withCredentials: boolean;
  upload: XMLHttpRequestEventTarget;
  _requestId: ?number;
  _subscriptions: Array<EventSubscription>;
  _aborted: boolean;
  _cachedResponse: Response;
  _hasError: boolean;
  _headers: Object;
  _lowerCaseResponseHeaders: Object;
  _method: ?string;
  _perfKey: ?string;
  _responseType: ResponseType;
  _response: string;
  _sent: boolean;
  _url: ?string;
  _timedOut: boolean;
  _trackingName: string;
  _incrementalEvents: boolean;
  _startTime: ?number;
  _performanceLogger: IPerformanceLogger;
  static setInterceptor(interceptor: ?XHRInterceptor): void;
  static enableProfiling(enableProfiling: boolean): void;
  constructor(): void;
  _reset(): void;
  get responseType(): ResponseType;
  set responseType(responseType: ResponseType): void;
  get responseText(): string;
  get response(): Response;
  __didCreateRequest(requestId: number): void;
  __didUploadProgress(requestId: number, progress: number, total: number): void;
  __didReceiveResponse(
    requestId: number,
    status: number,
    responseHeaders: ?Object,
    responseURL: ?string
  ): void;
  __didReceiveData(requestId: number, response: string): void;
  __didReceiveIncrementalData(
    requestId: number,
    responseText: string,
    progress: number,
    total: number
  ): void;
  __didReceiveDataProgress(
    requestId: number,
    loaded: number,
    total: number
  ): void;
  __didCompleteResponse(
    requestId: number,
    error: string,
    timeOutError: boolean
  ): void;
  _clearSubscriptions(): void;
  getAllResponseHeaders(): ?string;
  getResponseHeader(header: string): ?string;
  setRequestHeader(header: string, value: any): void;
  setTrackingName(trackingName: string): XMLHttpRequest;
  setPerformanceLogger(performanceLogger: IPerformanceLogger): XMLHttpRequest;
  open(method: string, url: string, async: ?boolean): void;
  send(data: any): void;
  abort(): void;
  setResponseHeaders(responseHeaders: ?Object): void;
  setReadyState(newState: number): void;
  addEventListener(type: string, listener: EventListener): void;
  _getMeasureURL(): string;
}
declare module.exports: XMLHttpRequest;
"
`;

exports[`public API should not change unintentionally Libraries/Network/convertRequestBody.js 1`] = `
"export type RequestBody =
  | string
  | Blob
  | FormData
  | { uri: string, ... }
  | ArrayBuffer
  | $ArrayBufferView;
declare function convertRequestBody(body: RequestBody): Object;
declare module.exports: convertRequestBody;
"
`;

exports[`public API should not change unintentionally Libraries/Network/fetch.js 1`] = `
"declare module.exports: {
  fetch: fetch,
  Headers: Headers,
  Request: Request,
  Response: Response,
};
"
`;

exports[`public API should not change unintentionally Libraries/NewAppScreen/index.js 1`] = `
"export {
  Colors,
  Header,
  HermesBadge,
  LearnMoreLinks,
  DebugInstructions,
  ReloadInstructions,
};
"
`;

exports[`public API should not change unintentionally Libraries/Performance/NativeJSCSamplingProfiler.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeJSCSamplingProfiler\\";
declare export default typeof NativeJSCSamplingProfiler;
"
`;

exports[`public API should not change unintentionally Libraries/Performance/SamplingProfiler.js 1`] = `
"declare const SamplingProfiler: { poke: (token: number) => void };
declare module.exports: SamplingProfiler;
"
`;

exports[`public API should not change unintentionally Libraries/Performance/Systrace.js 1`] = `
"type EventName = string | (() => string);
type EventArgs = ?{ [string]: string };
declare export function isEnabled(): boolean;
declare export function setEnabled(_doEnable: boolean): void;
declare export function beginEvent(
  eventName: EventName,
  args?: EventArgs
): void;
declare export function endEvent(args?: EventArgs): void;
declare export function beginAsyncEvent(
  eventName: EventName,
  args?: EventArgs
): number;
declare export function endAsyncEvent(
  eventName: EventName,
  cookie: number,
  args?: EventArgs
): void;
declare export function counterEvent(eventName: EventName, value: number): void;
"
`;

exports[`public API should not change unintentionally Libraries/PermissionsAndroid/NativePermissionsAndroid.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativePermissionsAndroid\\";
declare export default typeof NativePermissionsAndroid;
"
`;

exports[`public API should not change unintentionally Libraries/PermissionsAndroid/PermissionsAndroid.js 1`] = `
"export type Rationale = {
  title: string,
  message: string,
  buttonPositive?: string,
  buttonNegative?: string,
  buttonNeutral?: string,
  ...
};
declare class PermissionsAndroid {
  PERMISSIONS: $ReadOnly<{|
    ACCEPT_HANDOVER: string,
    ACCESS_BACKGROUND_LOCATION: string,
    ACCESS_COARSE_LOCATION: string,
    ACCESS_FINE_LOCATION: string,
    ACCESS_MEDIA_LOCATION: string,
    ACTIVITY_RECOGNITION: string,
    ADD_VOICEMAIL: string,
    READ_VOICEMAIL: string,
    WRITE_VOICEMAIL: string,
    ANSWER_PHONE_CALLS: string,
    BLUETOOTH_ADVERTISE: string,
    BLUETOOTH_CONNECT: string,
    BLUETOOTH_SCAN: string,
    BODY_SENSORS: string,
    BODY_SENSORS_BACKGROUND: string,
    CALL_PHONE: string,
    CAMERA: string,
    GET_ACCOUNTS: string,
    NEARBY_WIFI_DEVICES: string,
    POST_NOTIFICATIONS: string,
    PROCESS_OUTGOING_CALLS: string,
    READ_CALENDAR: string,
    READ_CALL_LOG: string,
    READ_CONTACTS: string,
    READ_EXTERNAL_STORAGE: string,
    READ_MEDIA_IMAGES: string,
    READ_MEDIA_VIDEO: string,
    READ_MEDIA_AUDIO: string,
    READ_MEDIA_VISUAL_USER_SELECTED: string,
    READ_PHONE_NUMBERS: string,
    READ_PHONE_STATE: string,
    READ_SMS: string,
    RECEIVE_MMS: string,
    RECEIVE_SMS: string,
    RECEIVE_WAP_PUSH: string,
    RECORD_AUDIO: string,
    SEND_SMS: string,
    USE_SIP: string,
    UWB_RANGING: string,
    WRITE_CALENDAR: string,
    WRITE_CALL_LOG: string,
    WRITE_CONTACTS: string,
    WRITE_EXTERNAL_STORAGE: string,
  |}>;
  RESULTS: $ReadOnly<{|
    DENIED: \\"denied\\",
    GRANTED: \\"granted\\",
    NEVER_ASK_AGAIN: \\"never_ask_again\\",
  |}>;
  checkPermission(permission: PermissionType): Promise<boolean>;
  check(permission: PermissionType): Promise<boolean>;
  requestPermission(
    permission: PermissionType,
    rationale?: Rationale
  ): Promise<boolean>;
  request(
    permission: PermissionType,
    rationale?: Rationale
  ): Promise<PermissionStatus>;
  requestMultiple(
    permissions: Array<PermissionType>
  ): Promise<{ [permission: PermissionType]: PermissionStatus, ... }>;
}
declare const PermissionsAndroidInstance: PermissionsAndroid;
declare module.exports: PermissionsAndroidInstance;
"
`;

exports[`public API should not change unintentionally Libraries/Pressability/HoverState.js 1`] = `
"declare export function isHoverEnabled(): boolean;
"
`;

exports[`public API should not change unintentionally Libraries/Pressability/Pressability.js 1`] = `
"export type PressabilityConfig = $ReadOnly<{|
  cancelable?: ?boolean,
  disabled?: ?boolean,
  hitSlop?: ?RectOrSize,
  pressRectOffset?: ?RectOrSize,
  android_disableSound?: ?boolean,
  delayHoverIn?: ?number,
  delayHoverOut?: ?number,
  delayLongPress?: ?number,
  delayPressIn?: ?number,
  delayPressOut?: ?number,
  minPressDuration?: ?number,
  onBlur?: ?(event: BlurEvent) => mixed,
  onFocus?: ?(event: FocusEvent) => mixed,
  onHoverIn?: ?(event: MouseEvent) => mixed,
  onHoverOut?: ?(event: MouseEvent) => mixed,
  onLongPress?: ?(event: PressEvent) => mixed,
  onPress?: ?(event: PressEvent) => mixed,
  onPressIn?: ?(event: PressEvent) => mixed,
  onPressMove?: ?(event: PressEvent) => mixed,
  onPressOut?: ?(event: PressEvent) => mixed,
  blockNativeResponder?: ?boolean,
|}>;
export type EventHandlers = $ReadOnly<{|
  onBlur: (event: BlurEvent) => void,
  onClick: (event: PressEvent) => void,
  onFocus: (event: FocusEvent) => void,
  onMouseEnter?: (event: MouseEvent) => void,
  onMouseLeave?: (event: MouseEvent) => void,
  onPointerEnter?: (event: PointerEvent) => void,
  onPointerLeave?: (event: PointerEvent) => void,
  onResponderGrant: (event: PressEvent) => void | boolean,
  onResponderMove: (event: PressEvent) => void,
  onResponderRelease: (event: PressEvent) => void,
  onResponderTerminate: (event: PressEvent) => void,
  onResponderTerminationRequest: () => boolean,
  onStartShouldSetResponder: () => boolean,
|}>;
type TouchState =
  | \\"NOT_RESPONDER\\"
  | \\"RESPONDER_INACTIVE_PRESS_IN\\"
  | \\"RESPONDER_INACTIVE_PRESS_OUT\\"
  | \\"RESPONDER_ACTIVE_PRESS_IN\\"
  | \\"RESPONDER_ACTIVE_PRESS_OUT\\"
  | \\"RESPONDER_ACTIVE_LONG_PRESS_IN\\"
  | \\"RESPONDER_ACTIVE_LONG_PRESS_OUT\\"
  | \\"ERROR\\";
declare export default class Pressability {
  _config: PressabilityConfig;
  _eventHandlers: ?EventHandlers;
  _hoverInDelayTimeout: ?TimeoutID;
  _hoverOutDelayTimeout: ?TimeoutID;
  _isHovered: boolean;
  _longPressDelayTimeout: ?TimeoutID;
  _pressDelayTimeout: ?TimeoutID;
  _pressOutDelayTimeout: ?TimeoutID;
  _responderID: ?number | HostInstance;
  _responderRegion: ?$ReadOnly<{|
    bottom: number,
    left: number,
    right: number,
    top: number,
  |}>;
  _touchActivatePosition: ?$ReadOnly<{|
    pageX: number,
    pageY: number,
  |}>;
  _touchActivateTime: ?number;
  _touchState: TouchState;
  constructor(config: PressabilityConfig): void;
  configure(config: PressabilityConfig): void;
  reset(): void;
  getEventHandlers(): EventHandlers;
  static setLongPressDeactivationDistance(distance: number): void;
  _createEventHandlers(): EventHandlers;
  _receiveSignal(signal: TouchSignal, event: PressEvent): void;
  _performTransitionSideEffects(
    prevState: TouchState,
    nextState: TouchState,
    signal: TouchSignal,
    event: PressEvent
  ): void;
  _activate(event: PressEvent): void;
  _deactivate(event: PressEvent): void;
  _measureResponderRegion(): void;
  _measureCallback: $FlowFixMe;
  _isTouchWithinResponderRegion(
    touch: $PropertyType<PressEvent, \\"nativeEvent\\">,
    responderRegion: $ReadOnly<{|
      bottom: number,
      left: number,
      right: number,
      top: number,
    |}>
  ): boolean;
  _handleLongPress(event: PressEvent): void;
  _cancelHoverInDelayTimeout(): void;
  _cancelHoverOutDelayTimeout(): void;
  _cancelLongPressDelayTimeout(): void;
  _cancelPressDelayTimeout(): void;
  _cancelPressOutDelayTimeout(): void;
}
"
`;

exports[`public API should not change unintentionally Libraries/Pressability/PressabilityDebug.js 1`] = `
"type Props = $ReadOnly<{|
  color: ColorValue,
  hitSlop: ?RectOrSize,
|}>;
declare export function PressabilityDebugView(props: Props): React.Node;
declare export function isEnabled(): boolean;
declare export function setEnabled(value: boolean): void;
"
`;

exports[`public API should not change unintentionally Libraries/Pressability/PressabilityPerformanceEventEmitter.js 1`] = `
"export type PressabilityPerformanceEvent = $ReadOnly<{|
  signal: TouchSignal,
  nativeTimestamp: number,
|}>;
export type PressabilityPerformanceEventListener =
  (PressabilityPerformanceEvent) => void;
declare class PressabilityPerformanceEventEmitter {
  _listeners: Array<PressabilityPerformanceEventListener>;
  constructor(): void;
  addListener(listener: PressabilityPerformanceEventListener): void;
  removeListener(listener: PressabilityPerformanceEventListener): void;
  emitEvent(constructEvent: () => PressabilityPerformanceEvent): void;
}
declare const PressabilityPerformanceEventEmitterSingleton: PressabilityPerformanceEventEmitter;
declare export default typeof PressabilityPerformanceEventEmitterSingleton;
"
`;

exports[`public API should not change unintentionally Libraries/Pressability/PressabilityTypes.js 1`] = `
"export type PressabilityTouchSignal =
  | \\"DELAY\\"
  | \\"RESPONDER_GRANT\\"
  | \\"RESPONDER_RELEASE\\"
  | \\"RESPONDER_TERMINATED\\"
  | \\"ENTER_PRESS_RECT\\"
  | \\"LEAVE_PRESS_RECT\\"
  | \\"LONG_PRESS_DETECTED\\";
"
`;

exports[`public API should not change unintentionally Libraries/Pressability/usePressability.js 1`] = `
"declare export default function usePressability(
  config: ?PressabilityConfig
): null | EventHandlers;
"
`;

exports[`public API should not change unintentionally Libraries/Promise.js 1`] = `
"declare const Promise: $FlowFixMe;
declare module.exports: Promise;
"
`;

exports[`public API should not change unintentionally Libraries/PushNotificationIOS/NativePushNotificationManagerIOS.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativePushNotificationManagerIOS\\";
declare export default typeof NativePushNotificationManagerIOS;
"
`;

exports[`public API should not change unintentionally Libraries/PushNotificationIOS/PushNotificationIOS.js 1`] = `
"export type ContentAvailable = 1 | null | void;
export type FetchResult = {
  NewData: string,
  NoData: string,
  ResultFailed: string,
  ...
};
export type PushNotificationEventName = $Keys<{
  notification: string,
  localNotification: string,
  register: string,
  registrationError: string,
  ...
}>;
declare class PushNotificationIOS {
  _data: Object;
  _alert: string | Object;
  _sound: string;
  _category: string;
  _contentAvailable: ContentAvailable;
  _badgeCount: number;
  _notificationId: string;
  _isRemote: boolean;
  _remoteNotificationCompleteCallbackCalled: boolean;
  _threadID: string;
  static FetchResult: FetchResult;
  static presentLocalNotification(details: Object): void;
  static scheduleLocalNotification(details: Object): void;
  static cancelAllLocalNotifications(): void;
  static removeAllDeliveredNotifications(): void;
  static getDeliveredNotifications(
    callback: (notifications: Array<Object>) => void
  ): void;
  static removeDeliveredNotifications(identifiers: Array<string>): void;
  static setApplicationIconBadgeNumber(number: number): void;
  static getApplicationIconBadgeNumber(callback: Function): void;
  static cancelLocalNotifications(userInfo: Object): void;
  static getScheduledLocalNotifications(callback: Function): void;
  static addEventListener(
    type: PushNotificationEventName,
    handler: Function
  ): void;
  static removeEventListener(type: PushNotificationEventName): void;
  static requestPermissions(permissions?: {
    alert?: boolean,
    badge?: boolean,
    sound?: boolean,
    ...
  }): Promise<{
    alert: boolean,
    badge: boolean,
    sound: boolean,
    ...
  }>;
  static abandonPermissions(): void;
  static checkPermissions(callback: Function): void;
  static getInitialNotification(): Promise<?PushNotificationIOS>;
  static getAuthorizationStatus(
    callback: (authorizationStatus: number) => void
  ): void;
  constructor(nativeNotif: Object): void;
  finish(fetchResult: string): void;
  getMessage(): ?string | ?Object;
  getSound(): ?string;
  getCategory(): ?string;
  getAlert(): ?string | ?Object;
  getContentAvailable(): ContentAvailable;
  getBadgeCount(): ?number;
  getData(): ?Object;
  getThreadID(): ?string;
}
declare module.exports: PushNotificationIOS;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/AppContainer.js 1`] = `
"export type Props = $ReadOnly<{|
  children?: React.Node,
  fabric?: boolean,
  rootTag: number | RootTag,
  initialProps?: { ... },
  WrapperComponent?: ?React.ComponentType<any>,
  rootViewStyle?: ?ViewStyleProp,
  internal_excludeLogBox?: boolean,
  internal_excludeInspector?: boolean,
|}>;
declare const AppContainer: component(...Props);
declare module.exports: AppContainer;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/AppContainer-dev.js 1`] = `
"declare const AppContainer: (Props) => React.Node;
export type AppContainerRootViewRef = React.RefObject<React.ElementRef<
  typeof View,
> | null>;
export type InspectedViewRef = React.RefObject<React.ElementRef<
  typeof View,
> | null>;
export type DebuggingOverlayRef = React.RefObject<React.ElementRef<
  typeof DebuggingOverlay,
> | null>;
declare export default typeof AppContainer;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/AppContainer-prod.js 1`] = `
"declare const AppContainer: (Props) => React.Node;
declare export default typeof AppContainer;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/AppRegistry.js 1`] = `
"type Task = (taskData: any) => Promise<void>;
export type TaskProvider = () => Task;
type TaskCanceller = () => void;
type TaskCancelProvider = () => TaskCanceller;
export type ComponentProvider = () => React$ComponentType<any>;
export type ComponentProviderInstrumentationHook = (
  component_: ComponentProvider,
  scopedPerformanceLogger: IPerformanceLogger
) => React$ComponentType<any>;
export type AppConfig = {
  appKey: string,
  component?: ComponentProvider,
  run?: Runnable,
  section?: boolean,
  ...
};
type AppParameters = {
  initialProps: $ReadOnly<{ [string]: mixed, ... }>,
  rootTag: RootTag,
  fabric?: boolean,
};
export type Runnable = (
  appParameters: AppParameters,
  displayMode: DisplayModeType
) => void;
export type Runnables = { [appKey: string]: Runnable };
export type Registry = {
  sections: $ReadOnlyArray<string>,
  runnables: Runnables,
  ...
};
export type WrapperComponentProvider = (
  appParameters: Object
) => React$ComponentType<any>;
export type RootViewStyleProvider = (appParameters: Object) => ViewStyleProp;
declare const AppRegistry: {
  setWrapperComponentProvider(provider: WrapperComponentProvider): void,
  setRootViewStyleProvider(provider: RootViewStyleProvider): void,
  registerConfig(config: Array<AppConfig>): void,
  registerComponent(
    appKey: string,
    componentProvider: ComponentProvider,
    section?: boolean
  ): string,
  registerRunnable(appKey: string, run: Runnable): string,
  registerSection(appKey: string, component: ComponentProvider): void,
  getAppKeys(): $ReadOnlyArray<string>,
  getSectionKeys(): $ReadOnlyArray<string>,
  getSections(): Runnables,
  getRunnable(appKey: string): ?Runnable,
  getRegistry(): Registry,
  setComponentProviderInstrumentationHook(
    hook: ComponentProviderInstrumentationHook
  ): void,
  runApplication(
    appKey: string,
    appParameters: AppParameters,
    displayMode?: number
  ): void,
  setSurfaceProps(
    appKey: string,
    appParameters: Object,
    displayMode?: number
  ): void,
  unmountApplicationComponentAtRootTag(rootTag: RootTag): void,
  registerHeadlessTask(taskKey: string, taskProvider: TaskProvider): void,
  registerCancellableHeadlessTask(
    taskKey: string,
    taskProvider: TaskProvider,
    taskCancelProvider: TaskCancelProvider
  ): void,
  startHeadlessTask(taskId: number, taskKey: string, data: any): void,
  cancelHeadlessTask(taskId: number, taskKey: string): void,
};
declare module.exports: AppRegistry;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/BridgelessUIManager.js 1`] = `
"declare const UIManagerJS: UIManagerJSInterface & { [string]: any };
declare module.exports: UIManagerJS;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/DisplayMode.js 1`] = `
"declare export opaque type DisplayModeType;
declare const DisplayMode: { +[string]: DisplayModeType };
declare export function coerceDisplayMode(value: ?number): DisplayModeType;
declare export default typeof DisplayMode;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/FabricUIManager.js 1`] = `
"export type NodeSet = Array<Node>;
export type NodeProps = { ... };
export interface Spec {
  +createNode: (
    reactTag: number,
    viewName: string,
    rootTag: RootTag,
    props: NodeProps,
    instanceHandle: InternalInstanceHandle
  ) => Node;
  +cloneNode: (node: Node) => Node;
  +cloneNodeWithNewChildren: (node: Node) => Node;
  +cloneNodeWithNewProps: (node: Node, newProps: NodeProps) => Node;
  +cloneNodeWithNewChildrenAndProps: (node: Node, newProps: NodeProps) => Node;
  +createChildSet: (rootTag: RootTag) => NodeSet;
  +appendChild: (parentNode: Node, child: Node) => Node;
  +appendChildToSet: (childSet: NodeSet, child: Node) => void;
  +completeRoot: (rootTag: RootTag, childSet: NodeSet) => void;
  +measure: (node: Node, callback: MeasureOnSuccessCallback) => void;
  +measureInWindow: (
    node: Node,
    callback: MeasureInWindowOnSuccessCallback
  ) => void;
  +measureLayout: (
    node: Node,
    relativeNode: Node,
    onFail: () => void,
    onSuccess: MeasureLayoutOnSuccessCallback
  ) => void;
  +configureNextLayoutAnimation: (
    config: LayoutAnimationConfig,
    callback: () => void,
    errorCallback: () => void
  ) => void;
  +sendAccessibilityEvent: (node: Node, eventType: string) => void;
  +findShadowNodeByTag_DEPRECATED: (reactTag: number) => ?Node;
  +setNativeProps: (node: Node, newProps: NodeProps) => void;
  +dispatchCommand: (
    node: Node,
    commandName: string,
    args: Array<mixed>
  ) => void;
  +findNodeAtPoint: (
    node: Node,
    locationX: number,
    locationY: number,
    callback: (instanceHandle: ?InternalInstanceHandle) => void
  ) => void;
  +compareDocumentPosition: (node: Node, otherNode: Node) => number;
  +getBoundingClientRect: (
    node: Node,
    includeTransform: boolean
  ) => ?[number, number, number, number];
}
declare export function getFabricUIManager(): ?Spec;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/HeadlessJsTaskError.js 1`] = `
"declare export default class HeadlessJsTaskError extends Error {}
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/I18nManager.js 1`] = `
"declare module.exports: {
  getConstants: () => I18nManagerConstants,
  allowRTL: (shouldAllow: boolean) => void,
  forceRTL: (shouldForce: boolean) => void,
  swapLeftAndRightInRTL: (flipStyles: boolean) => void,
  isRTL: $FlowFixMe,
  doLeftAndRightSwapInRTL: $FlowFixMe,
};
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/NativeHeadlessJsTaskSupport.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeHeadlessJsTaskSupport\\";
declare export default typeof NativeHeadlessJsTaskSupport;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/NativeI18nManager.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeI18nManager\\";
declare export default typeof NativeI18nManager;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/NativeUIManager.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeUIManager\\";
declare export default typeof NativeUIManager;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/PaperUIManager.js 1`] = `
"declare const UIManagerJS: UIManagerJSInterface;
declare module.exports: UIManagerJS;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/ReactFabricPublicInstance/ReactFabricHostComponent.js 1`] = `
"declare export default class ReactFabricHostComponent
  implements INativeMethods
{
  __nativeTag: number;
  __internalInstanceHandle: InternalInstanceHandle;
  _viewConfig: ViewConfig;
  constructor(
    tag: number,
    viewConfig: ViewConfig,
    internalInstanceHandle: InternalInstanceHandle
  ): void;
  blur(): void;
  focus(): void;
  measure(callback: MeasureOnSuccessCallback): void;
  measureInWindow(callback: MeasureInWindowOnSuccessCallback): void;
  measureLayout(
    relativeToNativeNode: number | HostInstance,
    onSuccess: MeasureLayoutOnSuccessCallback,
    onFail?: () => void
  ): void;
  unstable_getBoundingClientRect(): DOMRect;
  setNativeProps(nativeProps: { ... }): void;
}
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstance.js 1`] = `
"declare export function createPublicInstance(
  tag: number,
  viewConfig: ViewConfig,
  internalInstanceHandle: InternalInstanceHandle
): ReactFabricHostComponent | ReactNativeElement;
declare export function createPublicTextInstance(
  internalInstanceHandle: InternalInstanceHandle
): ReadOnlyText;
declare export function getNativeTagFromPublicInstance(
  publicInstance: ReactFabricHostComponent | ReactNativeElement
): number;
declare export function getNodeFromPublicInstance(
  publicInstance: ReactFabricHostComponent | ReactNativeElement
): ?Node;
declare export function getInternalInstanceHandleFromPublicInstance(
  publicInstance: ReactFabricHostComponent | ReactNativeElement
): InternalInstanceHandle;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstanceUtils.js 1`] = `
"declare export function isPublicInstance(maybeInstance: mixed): boolean;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/ReactFabricPublicInstance/ReactNativeAttributePayload.js 1`] = `
"declare export function create(
  props: Object,
  validAttributes: AttributeConfiguration
): null | Object;
declare export function diff(
  prevProps: Object,
  nextProps: Object,
  validAttributes: AttributeConfiguration
): null | Object;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/ReactFabricPublicInstance/warnForStyleProps.js 1`] = `
"declare export default function warnForStyleProps(
  props: { ... },
  validAttributes: AttributeConfiguration
): void;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/ReactNativeFeatureFlags.js 1`] = `
"export type FeatureFlags = {|
  shouldEmitW3CPointerEvents: () => boolean,
  shouldPressibilityUseW3CPointerEventsForHover: () => boolean,
|};
declare const ReactNativeFeatureFlags: FeatureFlags;
declare module.exports: ReactNativeFeatureFlags;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/ReactNativeRuntimeDiagnostics.js 1`] = `
"export type RuntimeDiagnostics = {|
  isEnabled: () => boolean,
  simulateEarlyJavaScriptErrors: () => void,
|};
export type RuntimeDiagnosticFlag = \\"early_js_errors\\" | \\"all\\";
declare const ReactNativeRuntimeDiagnostics: RuntimeDiagnostics;
declare module.exports: ReactNativeRuntimeDiagnostics;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/RendererImplementation.js 1`] = `
"declare export function renderElement({
  element: React.MixedElement,
  rootTag: number,
  useFabric: boolean,
  useConcurrentRoot: boolean,
}): void;
declare export function findHostInstance_DEPRECATED<TElementType: ElementType>(
  componentOrHandle: ?(ElementRef<TElementType> | number)
): ?HostInstance;
declare export function findNodeHandle<TElementType: ElementType>(
  componentOrHandle: ?(ElementRef<TElementType> | number)
): ?number;
declare export function dispatchCommand(
  handle: HostInstance,
  command: string,
  args: Array<mixed>
): void;
declare export function sendAccessibilityEvent(
  handle: HostInstance,
  eventType: string
): void;
declare export function unmountComponentAtNodeAndRemoveContainer(
  rootTag: RootTag
): void;
declare export function unstable_batchedUpdates<T>(
  fn: (T) => void,
  bookkeeping: T
): void;
declare export function isProfilingRenderer(): boolean;
declare export function isChildPublicInstance(
  parentInstance: ReactFabricHostComponent | HostComponent<empty>,
  childInstance: ReactFabricHostComponent | HostComponent<empty>
): boolean;
declare export function getNodeFromInternalInstanceHandle(
  internalInstanceHandle: InternalInstanceHandle
): ?Node;
declare export function getPublicInstanceFromInternalInstanceHandle(
  internalInstanceHandle: InternalInstanceHandle
): mixed;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/RendererProxy.js 1`] = `
"export * from \\"./RendererImplementation\\";
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/RootTag.js 1`] = `
"declare export opaque type RootTag;
declare export const RootTagContext: React$Context<RootTag>;
declare export function createRootTag(rootTag: number | RootTag): RootTag;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/UIManager.js 1`] = `
"declare const UIManager: UIManagerJSInterface;
declare module.exports: UIManager;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/UIManagerProperties.js 1`] = `
"declare module.exports: $FlowFixMe;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/getCachedComponentWithDebugName.js 1`] = `
"type NoopComponent = component(children: React.Node);
declare export default function getCachedComponentWithDisplayName(
  displayName: string
): NoopComponent;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/getNativeComponentAttributes.js 1`] = `
"declare function getNativeComponentAttributes(uiViewClassName: string): any;
declare module.exports: getNativeComponentAttributes;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/renderApplication.js 1`] = `
"declare export default function renderApplication<Props: Object>(
  RootComponent: React.ComponentType<Props>,
  initialProps: Props,
  rootTag: any,
  WrapperComponent?: ?React.ComponentType<any>,
  rootViewStyle?: ?ViewStyleProp,
  fabric?: boolean,
  scopedPerformanceLogger?: IPerformanceLogger,
  isLogBox?: boolean,
  debugName?: string,
  displayMode?: ?DisplayModeType,
  useOffscreen?: boolean
): void;
"
`;

exports[`public API should not change unintentionally Libraries/ReactNative/requireNativeComponent.js 1`] = `
"declare const requireNativeComponent: <T: { ... }>(
  uiViewClassName: string
) => HostComponent<T>;
declare export default typeof requireNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/Settings/NativeSettingsManager.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeSettingsManager\\";
declare export default typeof NativeSettingsManager;
"
`;

exports[`public API should not change unintentionally Libraries/Settings/Settings.js 1`] = `
"declare const Settings: {
  get(key: string): mixed,
  set(settings: Object): void,
  watchKeys(keys: string | Array<string>, callback: Function): number,
  clearWatch(watchId: number): void,
};
declare module.exports: Settings;
"
`;

exports[`public API should not change unintentionally Libraries/Share/NativeShareModule.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeShareModule\\";
declare export default typeof NativeShareModule;
"
`;

exports[`public API should not change unintentionally Libraries/Share/Share.js 1`] = `
"export type ShareContent =
  | {
      title?: string,
      url: string,
      message?: string,
    }
  | {
      title?: string,
      url?: string,
      message: string,
    };
export type ShareOptions = {
  dialogTitle?: string,
  excludedActivityTypes?: Array<string>,
  tintColor?: string,
  subject?: string,
  anchor?: number,
};
declare class Share {
  static share(
    content: ShareContent,
    options: ShareOptions
  ): Promise<{ action: string, activityType: ?string }>;
  static sharedAction: \\"sharedAction\\";
  static dismissedAction: \\"dismissedAction\\";
}
declare module.exports: Share;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/EdgeInsetsPropType.js 1`] = `
"export type EdgeInsetsProp = Rect;
export type EdgeInsetsOrSizeProp = RectOrSize;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/PlatformColorValueTypes.js.flow 1`] = `
"declare export function PlatformColor(...names: Array<string>): ColorValue;
declare export function normalizeColorObject(
  color: NativeColorValue
): ?ProcessedColorValue;
declare export function processColorObject(
  color: NativeColorValue
): ?NativeColorValue;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/PlatformColorValueTypesIOS.js 1`] = `
"export type DynamicColorIOSTuple = {
  light: ColorValue,
  dark: ColorValue,
  highContrastLight?: ColorValue,
  highContrastDark?: ColorValue,
};
declare export const DynamicColorIOS: (
  tuple: DynamicColorIOSTuple
) => ColorValue;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/PointPropType.js 1`] = `
"export type PointProp = $ReadOnly<{
  x: number,
  y: number,
  ...
}>;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/Rect.js 1`] = `
"export type Rect = $ReadOnly<{|
  bottom?: ?number,
  left?: ?number,
  right?: ?number,
  top?: ?number,
|}>;
export type RectOrSize = Rect | number;
declare export function createSquare(size: number): Rect;
declare export function normalizeRect(rectOrSize: ?RectOrSize): ?Rect;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/StyleSheet.js 1`] = `
"declare const flatten: $FlowFixMe;
export type { NativeColorValue } from \\"./StyleSheetTypes\\";
export type ColorValue = ____ColorValue_Internal;
export type ViewStyleProp = ____ViewStyleProp_Internal;
export type TextStyleProp = ____TextStyleProp_Internal;
export type ImageStyleProp = ____ImageStyleProp_Internal;
export type DangerouslyImpreciseStyleProp =
  ____DangerouslyImpreciseStyleProp_Internal;
export type TypeForStyleKey<
  +key: $Keys<____DangerouslyImpreciseStyle_Internal>,
> = $ElementType<____DangerouslyImpreciseStyle_Internal, key>;
export type ViewStyle = ____ViewStyle_Internal;
export type TextStyle = ____TextStyle_Internal;
export type ImageStyle = ____ImageStyle_Internal;
export type DangerouslyImpreciseStyle = ____DangerouslyImpreciseStyle_Internal;
declare let hairlineWidth: number;
declare const absoluteFill: {
  +bottom: 0,
  +left: 0,
  +position: \\"absolute\\",
  +right: 0,
  +top: 0,
};
declare module.exports: {
  hairlineWidth: hairlineWidth,
  absoluteFill: any,
  absoluteFillObject: absoluteFill,
  compose: composeStyles,
  flatten: flatten,
  setStyleAttributePreprocessor(
    property: string,
    process: (nextProp: mixed) => mixed
  ): void,
  create<+S: ____Styles_Internal>(obj: S): $ReadOnly<S>,
};
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/StyleSheetTypes.js 1`] = `
"declare export opaque type NativeColorValue;
export type ____ColorValue_Internal = null | string | number | NativeColorValue;
export type ColorArrayValue = null | $ReadOnlyArray<____ColorValue_Internal>;
export type PointValue = {
  x: number,
  y: number,
};
export type EdgeInsetsValue = {
  top: number,
  left: number,
  right: number,
  bottom: number,
};
export type DimensionValue = number | string | \\"auto\\" | AnimatedNode | null;
export type AnimatableNumericValue = number | AnimatedNode;
export type CursorValue = \\"auto\\" | \\"pointer\\";
type ____LayoutStyle_Internal = $ReadOnly<{
  display?: \\"none\\" | \\"flex\\" | \\"contents\\",
  width?: DimensionValue,
  height?: DimensionValue,
  bottom?: DimensionValue,
  end?: DimensionValue,
  left?: DimensionValue,
  right?: DimensionValue,
  start?: DimensionValue,
  top?: DimensionValue,
  inset?: DimensionValue,
  insetBlock?: DimensionValue,
  insetBlockEnd?: DimensionValue,
  insetBlockStart?: DimensionValue,
  insetInline?: DimensionValue,
  insetInlineEnd?: DimensionValue,
  insetInlineStart?: DimensionValue,
  minWidth?: DimensionValue,
  maxWidth?: DimensionValue,
  minHeight?: DimensionValue,
  maxHeight?: DimensionValue,
  margin?: DimensionValue,
  marginBlock?: DimensionValue,
  marginBlockEnd?: DimensionValue,
  marginBlockStart?: DimensionValue,
  marginBottom?: DimensionValue,
  marginEnd?: DimensionValue,
  marginHorizontal?: DimensionValue,
  marginInline?: DimensionValue,
  marginInlineEnd?: DimensionValue,
  marginInlineStart?: DimensionValue,
  marginLeft?: DimensionValue,
  marginRight?: DimensionValue,
  marginStart?: DimensionValue,
  marginTop?: DimensionValue,
  marginVertical?: DimensionValue,
  padding?: DimensionValue,
  paddingBlock?: DimensionValue,
  paddingBlockEnd?: DimensionValue,
  paddingBlockStart?: DimensionValue,
  paddingBottom?: DimensionValue,
  paddingEnd?: DimensionValue,
  paddingHorizontal?: DimensionValue,
  paddingInline?: DimensionValue,
  paddingInlineEnd?: DimensionValue,
  paddingInlineStart?: DimensionValue,
  paddingLeft?: DimensionValue,
  paddingRight?: DimensionValue,
  paddingStart?: DimensionValue,
  paddingTop?: DimensionValue,
  paddingVertical?: DimensionValue,
  borderWidth?: number,
  borderBottomWidth?: number,
  borderEndWidth?: number,
  borderLeftWidth?: number,
  borderRightWidth?: number,
  borderStartWidth?: number,
  borderTopWidth?: number,
  position?: \\"absolute\\" | \\"relative\\" | \\"static\\",
  flexDirection?: \\"row\\" | \\"row-reverse\\" | \\"column\\" | \\"column-reverse\\",
  flexWrap?: \\"wrap\\" | \\"nowrap\\" | \\"wrap-reverse\\",
  justifyContent?:
    | \\"flex-start\\"
    | \\"flex-end\\"
    | \\"center\\"
    | \\"space-between\\"
    | \\"space-around\\"
    | \\"space-evenly\\",
  alignItems?: \\"flex-start\\" | \\"flex-end\\" | \\"center\\" | \\"stretch\\" | \\"baseline\\",
  alignSelf?:
    | \\"auto\\"
    | \\"flex-start\\"
    | \\"flex-end\\"
    | \\"center\\"
    | \\"stretch\\"
    | \\"baseline\\",
  alignContent?:
    | \\"flex-start\\"
    | \\"flex-end\\"
    | \\"center\\"
    | \\"stretch\\"
    | \\"space-between\\"
    | \\"space-around\\"
    | \\"space-evenly\\",
  overflow?: \\"visible\\" | \\"hidden\\" | \\"scroll\\",
  flex?: number,
  flexGrow?: number,
  flexShrink?: number,
  flexBasis?: number | string,
  aspectRatio?: number | string,
  boxSizing?: \\"border-box\\" | \\"content-box\\",
  zIndex?: number,
  direction?: \\"inherit\\" | \\"ltr\\" | \\"rtl\\",
  rowGap?: number | string,
  columnGap?: number | string,
  gap?: number | string,
}>;
export type ____ShadowStyle_InternalCore = $ReadOnly<{
  shadowColor?: ____ColorValue_Internal,
  shadowOffset?: $ReadOnly<{
    width?: number,
    height?: number,
  }>,
  shadowOpacity?: AnimatableNumericValue,
  shadowRadius?: number,
}>;
export type ____ShadowStyle_Internal = $ReadOnly<{
  ...____ShadowStyle_InternalCore,
  ...____ShadowStyle_InternalOverrides,
}>;
export type FilterFunction =
  | { brightness: number | string }
  | { blur: number | string }
  | { contrast: number | string }
  | { grayscale: number | string }
  | { hueRotate: number | string }
  | { invert: number | string }
  | { opacity: number | string }
  | { saturate: number | string }
  | { sepia: number | string }
  | { dropShadow: DropShadowValue | string };
export type DropShadowValue = {
  offsetX: number | string,
  offsetY: number | string,
  standardDeviation?: number | string,
  color?: ____ColorValue_Internal,
};
export type GradientValue = {
  type: \\"linearGradient\\",
  direction?: string,
  colorStops: $ReadOnlyArray<{
    color: ____ColorValue_Internal,
    positions?: $ReadOnlyArray<string>,
  }>,
};
export type BoxShadowValue = {
  offsetX: number | string,
  offsetY: number | string,
  color?: ____ColorValue_Internal,
  blurRadius?: number | string,
  spreadDistance?: number | string,
  inset?: boolean,
};
type ____BlendMode_Internal =
  | \\"normal\\"
  | \\"multiply\\"
  | \\"screen\\"
  | \\"overlay\\"
  | \\"darken\\"
  | \\"lighten\\"
  | \\"color-dodge\\"
  | \\"color-burn\\"
  | \\"hard-light\\"
  | \\"soft-light\\"
  | \\"difference\\"
  | \\"exclusion\\"
  | \\"hue\\"
  | \\"saturation\\"
  | \\"color\\"
  | \\"luminosity\\";
export type ____ViewStyle_InternalCore = $ReadOnly<{
  ...$Exact<____LayoutStyle_Internal>,
  ...$Exact<____ShadowStyle_Internal>,
  ...$Exact<____TransformStyle_Internal>,
  backfaceVisibility?: \\"visible\\" | \\"hidden\\",
  backgroundColor?: ____ColorValue_Internal,
  borderColor?: ____ColorValue_Internal,
  borderCurve?: \\"circular\\" | \\"continuous\\",
  borderBottomColor?: ____ColorValue_Internal,
  borderEndColor?: ____ColorValue_Internal,
  borderLeftColor?: ____ColorValue_Internal,
  borderRightColor?: ____ColorValue_Internal,
  borderStartColor?: ____ColorValue_Internal,
  borderTopColor?: ____ColorValue_Internal,
  borderBlockColor?: ____ColorValue_Internal,
  borderBlockEndColor?: ____ColorValue_Internal,
  borderBlockStartColor?: ____ColorValue_Internal,
  borderRadius?: AnimatableNumericValue | string,
  borderBottomEndRadius?: AnimatableNumericValue | string,
  borderBottomLeftRadius?: AnimatableNumericValue | string,
  borderBottomRightRadius?: AnimatableNumericValue | string,
  borderBottomStartRadius?: AnimatableNumericValue | string,
  borderEndEndRadius?: AnimatableNumericValue | string,
  borderEndStartRadius?: AnimatableNumericValue | string,
  borderStartEndRadius?: AnimatableNumericValue | string,
  borderStartStartRadius?: AnimatableNumericValue | string,
  borderTopEndRadius?: AnimatableNumericValue | string,
  borderTopLeftRadius?: AnimatableNumericValue | string,
  borderTopRightRadius?: AnimatableNumericValue | string,
  borderTopStartRadius?: AnimatableNumericValue | string,
  borderStyle?: \\"solid\\" | \\"dotted\\" | \\"dashed\\",
  borderWidth?: AnimatableNumericValue,
  borderBottomWidth?: AnimatableNumericValue,
  borderEndWidth?: AnimatableNumericValue,
  borderLeftWidth?: AnimatableNumericValue,
  borderRightWidth?: AnimatableNumericValue,
  borderStartWidth?: AnimatableNumericValue,
  borderTopWidth?: AnimatableNumericValue,
  opacity?: AnimatableNumericValue,
  outlineColor?: ____ColorValue_Internal,
  outlineOffset?: AnimatableNumericValue,
  outlineStyle?: \\"solid\\" | \\"dotted\\" | \\"dashed\\",
  outlineWidth?: AnimatableNumericValue,
  elevation?: number,
  pointerEvents?: \\"auto\\" | \\"none\\" | \\"box-none\\" | \\"box-only\\",
  cursor?: CursorValue,
  boxShadow?: $ReadOnlyArray<BoxShadowValue> | string,
  filter?: $ReadOnlyArray<FilterFunction> | string,
  mixBlendMode?: ____BlendMode_Internal,
  experimental_backgroundImage?: $ReadOnlyArray<GradientValue> | string,
  isolation?: \\"auto\\" | \\"isolate\\",
}>;
export type ____ViewStyle_Internal = $ReadOnly<{
  ...____ViewStyle_InternalCore,
  ...____ViewStyle_InternalOverrides,
}>;
export type FontStyleType = {
  fontFamily: string,
  fontWeight: ____FontWeight_Internal,
};
export type FontStyleMap = {
  ultraLight: FontStyleType,
  thin: FontStyleType,
  light: FontStyleType,
  regular: FontStyleType,
  medium: FontStyleType,
  semibold: FontStyleType,
  bold: FontStyleType,
  heavy: FontStyleType,
  black: FontStyleType,
};
export type ____FontWeight_Internal =
  | \\"normal\\"
  | \\"bold\\"
  | \\"100\\"
  | \\"200\\"
  | \\"300\\"
  | \\"400\\"
  | \\"500\\"
  | \\"600\\"
  | \\"700\\"
  | \\"800\\"
  | \\"900\\"
  | 100
  | 200
  | 300
  | 400
  | 500
  | 600
  | 700
  | 800
  | 900
  | \\"ultralight\\"
  | \\"thin\\"
  | \\"light\\"
  | \\"medium\\"
  | \\"regular\\"
  | \\"semibold\\"
  | \\"condensedBold\\"
  | \\"condensed\\"
  | \\"heavy\\"
  | \\"black\\";
export type ____FontVariantArray_Internal = $ReadOnlyArray<
  | \\"small-caps\\"
  | \\"oldstyle-nums\\"
  | \\"lining-nums\\"
  | \\"tabular-nums\\"
  | \\"common-ligatures\\"
  | \\"no-common-ligatures\\"
  | \\"discretionary-ligatures\\"
  | \\"no-discretionary-ligatures\\"
  | \\"historical-ligatures\\"
  | \\"no-historical-ligatures\\"
  | \\"contextual\\"
  | \\"no-contextual\\"
  | \\"proportional-nums\\"
  | \\"stylistic-one\\"
  | \\"stylistic-two\\"
  | \\"stylistic-three\\"
  | \\"stylistic-four\\"
  | \\"stylistic-five\\"
  | \\"stylistic-six\\"
  | \\"stylistic-seven\\"
  | \\"stylistic-eight\\"
  | \\"stylistic-nine\\"
  | \\"stylistic-ten\\"
  | \\"stylistic-eleven\\"
  | \\"stylistic-twelve\\"
  | \\"stylistic-thirteen\\"
  | \\"stylistic-fourteen\\"
  | \\"stylistic-fifteen\\"
  | \\"stylistic-sixteen\\"
  | \\"stylistic-seventeen\\"
  | \\"stylistic-eighteen\\"
  | \\"stylistic-nineteen\\"
  | \\"stylistic-twenty\\",
>;
export type ____TextStyle_InternalCore = $ReadOnly<{
  ...$Exact<____ViewStyle_Internal>,
  color?: ____ColorValue_Internal,
  fontFamily?: string,
  fontSize?: number,
  fontStyle?: \\"normal\\" | \\"italic\\",
  fontWeight?: ____FontWeight_Internal,
  fontVariant?: ____FontVariantArray_Internal | string,
  textShadowOffset?: $ReadOnly<{
    width: number,
    height: number,
  }>,
  textShadowRadius?: number,
  textShadowColor?: ____ColorValue_Internal,
  letterSpacing?: number,
  lineHeight?: number,
  textAlign?: \\"auto\\" | \\"left\\" | \\"right\\" | \\"center\\" | \\"justify\\",
  textAlignVertical?: \\"auto\\" | \\"top\\" | \\"bottom\\" | \\"center\\",
  includeFontPadding?: boolean,
  textDecorationLine?:
    | \\"none\\"
    | \\"underline\\"
    | \\"line-through\\"
    | \\"underline line-through\\",
  textDecorationStyle?: \\"solid\\" | \\"double\\" | \\"dotted\\" | \\"dashed\\",
  textDecorationColor?: ____ColorValue_Internal,
  textTransform?: \\"none\\" | \\"capitalize\\" | \\"uppercase\\" | \\"lowercase\\",
  userSelect?: \\"auto\\" | \\"text\\" | \\"none\\" | \\"contain\\" | \\"all\\",
  verticalAlign?: \\"auto\\" | \\"top\\" | \\"bottom\\" | \\"middle\\",
  writingDirection?: \\"auto\\" | \\"ltr\\" | \\"rtl\\",
}>;
export type ____TextStyle_Internal = $ReadOnly<{
  ...____TextStyle_InternalCore,
  ...____TextStyle_InternalOverrides,
}>;
export type ____ImageStyle_InternalCore = $ReadOnly<{
  ...$Exact<____ViewStyle_Internal>,
  resizeMode?: ImageResizeMode,
  objectFit?: \\"cover\\" | \\"contain\\" | \\"fill\\" | \\"scale-down\\" | \\"none\\",
  tintColor?: ____ColorValue_Internal,
  overlayColor?: string,
}>;
export type ____ImageStyle_Internal = $ReadOnly<{
  ...____ImageStyle_InternalCore,
  ...____ImageStyle_InternalOverrides,
}>;
export type ____DangerouslyImpreciseStyle_InternalCore = $ReadOnly<{
  ...$Exact<____TextStyle_Internal>,
  resizeMode?: ImageResizeMode,
  objectFit?: \\"cover\\" | \\"contain\\" | \\"fill\\" | \\"scale-down\\" | \\"none\\",
  tintColor?: ____ColorValue_Internal,
  overlayColor?: string,
}>;
export type ____DangerouslyImpreciseStyle_Internal = $ReadOnly<{
  ...____DangerouslyImpreciseStyle_InternalCore,
  ...____DangerouslyImpreciseStyle_InternalOverrides,
  ...
}>;
type GenericStyleProp<+T> =
  | null
  | void
  | T
  | false
  | \\"\\"
  | $ReadOnlyArray<GenericStyleProp<T>>;
export type ____DangerouslyImpreciseStyleProp_Internal = GenericStyleProp<
  Partial<____DangerouslyImpreciseStyle_Internal>,
>;
export type ____ViewStyleProp_Internal = GenericStyleProp<
  $ReadOnly<Partial<____ViewStyle_Internal>>,
>;
export type ____TextStyleProp_Internal = GenericStyleProp<
  $ReadOnly<Partial<____TextStyle_Internal>>,
>;
export type ____ImageStyleProp_Internal = GenericStyleProp<
  $ReadOnly<Partial<____ImageStyle_Internal>>,
>;
export type ____Styles_Internal = {
  +[key: string]: Partial<____DangerouslyImpreciseStyle_Internal>,
  ...
};
export type ____FlattenStyleProp_Internal<
  +TStyleProp: GenericStyleProp<mixed>,
> = TStyleProp extends null | void | false | \\"\\"
  ? empty
  : TStyleProp extends $ReadOnlyArray<infer V>
    ? ____FlattenStyleProp_Internal<V>
    : TStyleProp;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/flattenStyle.js 1`] = `
"declare function flattenStyle<TStyleProp: DangerouslyImpreciseStyleProp>(
  style: ?TStyleProp
): ?____FlattenStyleProp_Internal<TStyleProp>;
declare module.exports: flattenStyle;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/normalizeColor.js 1`] = `
"declare function normalizeColor(
  color: ?(ColorValue | ProcessedColorValue)
): ?ProcessedColorValue;
declare module.exports: normalizeColor;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/private/_StyleSheetTypesOverrides.js 1`] = `
"export type ____DangerouslyImpreciseStyle_InternalOverrides = $ReadOnly<{}>;
export type ____ImageStyle_InternalOverrides = $ReadOnly<{}>;
export type ____ShadowStyle_InternalOverrides = $ReadOnly<{}>;
export type ____TextStyle_InternalOverrides = $ReadOnly<{}>;
export type ____ViewStyle_InternalOverrides = $ReadOnly<{}>;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/private/_TransformStyle.js 1`] = `
"export type ____TransformStyle_Internal = $ReadOnly<{|
  transform?:
    | $ReadOnlyArray<
        | {| +perspective: number | AnimatedNode |}
        | {| +rotate: string | AnimatedNode |}
        | {| +rotateX: string | AnimatedNode |}
        | {| +rotateY: string | AnimatedNode |}
        | {| +rotateZ: string | AnimatedNode |}
        | {| +scale: number | AnimatedNode |}
        | {| +scaleX: number | AnimatedNode |}
        | {| +scaleY: number | AnimatedNode |}
        | {| +translateX: number | AnimatedNode |}
        | {| +translateY: number | AnimatedNode |}
        | {|
            +translate:
              | [number | AnimatedNode, number | AnimatedNode]
              | AnimatedNode,
          |}
        | {| +skewX: string | AnimatedNode |}
        | {| +skewY: string | AnimatedNode |}
        | {|
            +matrix: $ReadOnlyArray<number | AnimatedNode> | AnimatedNode,
          |},
      >
    | string,
  transformOrigin?:
    | [string | number, string | number, string | number]
    | string,
|}>;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/processAspectRatio.js 1`] = `
"declare function processAspectRatio(aspectRatio?: number | string): ?number;
declare module.exports: processAspectRatio;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/processBackgroundImage.js 1`] = `
"type LinearGradientDirection =
  | { type: \\"angle\\", value: number }
  | { type: \\"keyword\\", value: string };
type ParsedGradientValue = {
  type: \\"linearGradient\\",
  direction: LinearGradientDirection,
  colorStops: $ReadOnlyArray<{
    color: ProcessedColorValue,
    position: number,
  }>,
};
declare export default function processBackgroundImage(
  backgroundImage: ?($ReadOnlyArray<GradientValue> | string)
): $ReadOnlyArray<ParsedGradientValue>;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/processBoxShadow.js 1`] = `
"export type ParsedBoxShadow = {
  offsetX: number,
  offsetY: number,
  color?: ProcessedColorValue,
  blurRadius?: number,
  spreadDistance?: number,
  inset?: boolean,
};
declare export default function processBoxShadow(
  rawBoxShadows: ?($ReadOnlyArray<BoxShadowValue> | string)
): Array<ParsedBoxShadow>;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/processColor.js 1`] = `
"export type ProcessedColorValue = number | NativeColorValue;
declare function processColor(
  color?: ?(number | ColorValue)
): ?ProcessedColorValue;
declare export default typeof processColor;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/processColorArray.js 1`] = `
"declare function processColorArray(
  colors: ?$ReadOnlyArray<ColorValue>
): ?$ReadOnlyArray<ProcessedColorValue>;
declare module.exports: processColorArray;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/processFilter.js 1`] = `
"type ParsedFilter =
  | { brightness: number }
  | { blur: number }
  | { contrast: number }
  | { grayscale: number }
  | { hueRotate: number }
  | { invert: number }
  | { opacity: number }
  | { saturate: number }
  | { sepia: number }
  | { dropShadow: ParsedDropShadow };
type ParsedDropShadow = {
  offsetX: number,
  offsetY: number,
  standardDeviation?: number,
  color?: ColorValue,
};
declare export default function processFilter(
  filter: ?($ReadOnlyArray<FilterFunction> | string)
): $ReadOnlyArray<ParsedFilter>;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/processFontVariant.js 1`] = `
"declare function processFontVariant(
  fontVariant: ____FontVariantArray_Internal | string
): ?____FontVariantArray_Internal;
declare module.exports: processFontVariant;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/processTransform.js 1`] = `
"declare function processTransform(
  transform: Array<Object> | string
): Array<Object> | Array<number>;
declare module.exports: processTransform;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/processTransformOrigin.js 1`] = `
"declare export default function processTransformOrigin(
  transformOrigin: Array<string | number> | string
): Array<string | number>;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/setNormalizedColorAlpha.js 1`] = `
"declare function setNormalizedColorAlpha(input: number, alpha: number): number;
declare module.exports: setNormalizedColorAlpha;
"
`;

exports[`public API should not change unintentionally Libraries/StyleSheet/splitLayoutProps.js 1`] = `
"declare export default function splitLayoutProps(
  props: ?____ViewStyle_Internal
): {
  outer: ?____ViewStyle_Internal,
  inner: ?____ViewStyle_Internal,
};
"
`;

exports[`public API should not change unintentionally Libraries/Text/Text.js 1`] = `
"type TextForwardRef = React.ElementRef<
  typeof NativeText | typeof NativeVirtualText,
>;
declare const Text: component(
  ref: React.RefSetter<TextForwardRef>,
  ...props: TextProps
);
declare module.exports: Text;
"
`;

exports[`public API should not change unintentionally Libraries/Text/TextAncestor.js 1`] = `
"declare const TextAncestorContext: React$Context<$FlowFixMe>;
declare module.exports: TextAncestorContext;
"
`;

exports[`public API should not change unintentionally Libraries/Text/TextNativeComponent.js 1`] = `
"export type NativeTextProps = $ReadOnly<{
  ...TextProps,
  isHighlighted?: ?boolean,
  selectionColor?: ?ProcessedColorValue,
  onClick?: ?(event: PressEvent) => mixed,
  isPressable?: ?boolean,
}>;
declare export const NativeText: HostComponent<NativeTextProps>;
declare export const NativeVirtualText: HostComponent<NativeTextProps>;
"
`;

exports[`public API should not change unintentionally Libraries/Text/TextProps.js 1`] = `
"export type PressRetentionOffset = $ReadOnly<{
  top: number,
  left: number,
  bottom: number,
  right: number,
}>;
type PointerEventProps = $ReadOnly<{
  onPointerEnter?: (event: PointerEvent) => void,
  onPointerLeave?: (event: PointerEvent) => void,
  onPointerMove?: (event: PointerEvent) => void,
}>;
export type TextProps = $ReadOnly<{
  ...PointerEventProps,
  accessible?: ?boolean,
  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,
  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,
  accessibilityHint?: ?Stringish,
  accessibilityLanguage?: ?Stringish,
  accessibilityLabel?: ?Stringish,
  accessibilityRole?: ?AccessibilityRole,
  accessibilityState?: ?AccessibilityState,
  \\"aria-label\\"?: ?string,
  adjustsFontSizeToFit?: ?boolean,
  allowFontScaling?: ?boolean,
  android_hyphenationFrequency?: ?(\\"normal\\" | \\"none\\" | \\"full\\"),
  \\"aria-busy\\"?: ?boolean,
  \\"aria-checked\\"?: ?boolean | \\"mixed\\",
  \\"aria-disabled\\"?: ?boolean,
  \\"aria-expanded\\"?: ?boolean,
  \\"aria-selected\\"?: ?boolean,
  \\"aria-labelledby\\"?: ?string,
  children?: ?Node,
  ellipsizeMode?: ?(\\"clip\\" | \\"head\\" | \\"middle\\" | \\"tail\\"),
  id?: string,
  maxFontSizeMultiplier?: ?number,
  nativeID?: ?string,
  numberOfLines?: ?number,
  onLayout?: ?(event: LayoutEvent) => mixed,
  onLongPress?: ?(event: PressEvent) => mixed,
  onPress?: ?(event: PressEvent) => mixed,
  onPressIn?: ?(event: PressEvent) => mixed,
  onPressOut?: ?(event: PressEvent) => mixed,
  onResponderGrant?: ?(event: PressEvent) => void,
  onResponderMove?: ?(event: PressEvent) => void,
  onResponderRelease?: ?(event: PressEvent) => void,
  onResponderTerminate?: ?(event: PressEvent) => void,
  onResponderTerminationRequest?: ?() => boolean,
  onStartShouldSetResponder?: ?() => boolean,
  onMoveShouldSetResponder?: ?() => boolean,
  onTextLayout?: ?(event: TextLayoutEvent) => mixed,
  pressRetentionOffset?: ?PressRetentionOffset,
  role?: ?Role,
  selectable?: ?boolean,
  style?: ?TextStyleProp,
  testID?: ?string,
  disabled?: ?boolean,
  selectionColor?: ?ColorValue,
  dataDetectorType?: ?(\\"phoneNumber\\" | \\"link\\" | \\"email\\" | \\"none\\" | \\"all\\"),
  textBreakStrategy?: ?(\\"balanced\\" | \\"highQuality\\" | \\"simple\\"),
  adjustsFontSizeToFit?: ?boolean,
  dynamicTypeRamp?: ?(
    | \\"caption2\\"
    | \\"caption1\\"
    | \\"footnote\\"
    | \\"subheadline\\"
    | \\"callout\\"
    | \\"body\\"
    | \\"headline\\"
    | \\"title3\\"
    | \\"title2\\"
    | \\"title1\\"
    | \\"largeTitle\\"
  ),
  minimumFontScale?: ?number,
  suppressHighlighting?: ?boolean,
  lineBreakStrategyIOS?: ?(\\"none\\" | \\"standard\\" | \\"hangul-word\\" | \\"push-out\\"),
}>;
"
`;

exports[`public API should not change unintentionally Libraries/TurboModule/RCTExport.js 1`] = `
"export interface DEPRECATED_RCTExport<T: void = void> {
  +getConstants?: () => { ... };
}
export interface TurboModule extends DEPRECATED_RCTExport<void> {}
export type { RootTag } from \\"../Types/RootTagTypes.js\\";
"
`;

exports[`public API should not change unintentionally Libraries/TurboModule/TurboModuleRegistry.js 1`] = `
"declare export function get<T: TurboModule>(name: string): ?T;
declare export function getEnforcing<T: TurboModule>(name: string): T;
"
`;

exports[`public API should not change unintentionally Libraries/TurboModule/samples/NativeSampleTurboModule.js 1`] = `
"export * from \\"../../../src/private/specs/modules/NativeSampleTurboModule\\";
declare export default typeof NativeSampleTurboModule;
"
`;

exports[`public API should not change unintentionally Libraries/Types/CodegenTypes.js 1`] = `
"export type BubblingEventHandler<T, PaperName: string | empty = empty> = (
  event: SyntheticEvent<T>
) => void | Promise<void>;
export type DirectEventHandler<T, PaperName: string | empty = empty> = (
  event: SyntheticEvent<T>
) => void | Promise<void>;
export type Double = number;
export type Float = number;
export type Int32 = number;
export type UnsafeObject = $FlowFixMe;
export type UnsafeMixed = mixed;
type DefaultTypes = number | boolean | string | $ReadOnlyArray<string>;
export type WithDefault<Type: DefaultTypes, Value: ?Type | string> = ?Type;
export type EventEmitter<T> = (
  handler: (T) => void | Promise<void>
) => EventSubscription;
"
`;

exports[`public API should not change unintentionally Libraries/Types/CoreEventTypes.js 1`] = `
"export type SyntheticEvent<+T> = $ReadOnly<{|
  bubbles: ?boolean,
  cancelable: ?boolean,
  currentTarget: number | HostInstance,
  defaultPrevented: ?boolean,
  dispatchConfig: $ReadOnly<{|
    registrationName: string,
  |}>,
  eventPhase: ?number,
  preventDefault: () => void,
  isDefaultPrevented: () => boolean,
  stopPropagation: () => void,
  isPropagationStopped: () => boolean,
  isTrusted: ?boolean,
  nativeEvent: T,
  persist: () => void,
  target: ?number | HostInstance,
  timeStamp: number,
  type: ?string,
|}>;
export type ResponderSyntheticEvent<T> = $ReadOnly<{|
  ...SyntheticEvent<T>,
  touchHistory: $ReadOnly<{|
    indexOfSingleActiveTouch: number,
    mostRecentTimeStamp: number,
    numberActiveTouches: number,
    touchBank: $ReadOnlyArray<
      $ReadOnly<{|
        touchActive: boolean,
        startPageX: number,
        startPageY: number,
        startTimeStamp: number,
        currentPageX: number,
        currentPageY: number,
        currentTimeStamp: number,
        previousPageX: number,
        previousPageY: number,
        previousTimeStamp: number,
      |}>,
    >,
  |}>,
|}>;
export type Layout = $ReadOnly<{|
  x: number,
  y: number,
  width: number,
  height: number,
|}>;
export type TextLayout = $ReadOnly<{|
  ...Layout,
  ascender: number,
  capHeight: number,
  descender: number,
  text: string,
  xHeight: number,
|}>;
export type LayoutEvent = SyntheticEvent<
  $ReadOnly<{|
    layout: Layout,
  |}>,
>;
export type TextLayoutEvent = SyntheticEvent<
  $ReadOnly<{|
    lines: Array<TextLayout>,
  |}>,
>;
export interface NativeUIEvent {
  +detail: number;
}
export interface NativeMouseEvent extends NativeUIEvent {
  +screenX: number;
  +screenY: number;
  +pageX: number;
  +pageY: number;
  +clientX: number;
  +clientY: number;
  +x: number;
  +y: number;
  +ctrlKey: boolean;
  +shiftKey: boolean;
  +altKey: boolean;
  +metaKey: boolean;
  +button: number;
  +buttons: number;
  +relatedTarget: null | number | HostInstance;
  +offsetX: number;
  +offsetY: number;
}
export interface NativePointerEvent extends NativeMouseEvent {
  +pointerId: number;
  +width: number;
  +height: number;
  +pressure: number;
  +tangentialPressure: number;
  +tiltX: number;
  +tiltY: number;
  +twist: number;
  +pointerType: string;
  +isPrimary: boolean;
}
export type PointerEvent = SyntheticEvent<NativePointerEvent>;
export type PressEvent = ResponderSyntheticEvent<
  $ReadOnly<{|
    changedTouches: $ReadOnlyArray<$PropertyType<PressEvent, \\"nativeEvent\\">>,
    force?: number,
    identifier: number,
    locationX: number,
    locationY: number,
    pageX: number,
    pageY: number,
    target: ?number,
    timestamp: number,
    touches: $ReadOnlyArray<$PropertyType<PressEvent, \\"nativeEvent\\">>,
  |}>,
>;
export type ScrollEvent = SyntheticEvent<
  $ReadOnly<{|
    contentInset: $ReadOnly<{|
      bottom: number,
      left: number,
      right: number,
      top: number,
    |}>,
    contentOffset: $ReadOnly<{|
      y: number,
      x: number,
    |}>,
    contentSize: $ReadOnly<{|
      height: number,
      width: number,
    |}>,
    layoutMeasurement: $ReadOnly<{|
      height: number,
      width: number,
    |}>,
    targetContentOffset?: $ReadOnly<{|
      y: number,
      x: number,
    |}>,
    velocity?: $ReadOnly<{|
      y: number,
      x: number,
    |}>,
    zoomScale?: number,
    responderIgnoreScroll?: boolean,
  |}>,
>;
export type BlurEvent = SyntheticEvent<
  $ReadOnly<{|
    target: number,
  |}>,
>;
export type FocusEvent = SyntheticEvent<
  $ReadOnly<{|
    target: number,
  |}>,
>;
export type MouseEvent = SyntheticEvent<
  $ReadOnly<{|
    clientX: number,
    clientY: number,
    pageX: number,
    pageY: number,
    timestamp: number,
  |}>,
>;
"
`;

exports[`public API should not change unintentionally Libraries/Types/ReactDevToolsTypes.js 1`] = `
"type PublicInstance = {
  ...NativeMethods,
};
export type InstanceFromReactDevTools =
  | PublicInstance
  | {
      canonical?:
        | PublicInstance
        | {
            publicInstance?: PublicInstance,
          },
    };
export type ReactDevToolsAgentEvents = {
  drawTraceUpdates: [Array<{ node: InstanceFromReactDevTools, color: string }>],
  disableTraceUpdates: [],
  showNativeHighlight: [nodes: Array<InstanceFromReactDevTools>],
  hideNativeHighlight: [],
  shutdown: [],
  startInspectingNative: [],
  stopInspectingNative: [],
};
export type ReactDevToolsAgent = {
  selectNode(node: mixed): void,
  stopInspectingNative(value: boolean): void,
  addListener<Event: $Keys<ReactDevToolsAgentEvents>>(
    event: Event,
    listener: (...ReactDevToolsAgentEvents[Event]) => void
  ): void,
  removeListener(
    event: $Keys<ReactDevToolsAgentEvents>,
    listener: () => void
  ): void,
};
export type ReactDevToolsGlobalHook = {
  on: (eventName: string, (agent: ReactDevToolsAgent) => void) => void,
  off: (eventName: string, (agent: ReactDevToolsAgent) => void) => void,
  reactDevtoolsAgent?: ReactDevToolsAgent,
  resolveRNStyle?: mixed,
  nativeStyleEditorValidAttributes?: Array<string>,
};
"
`;

exports[`public API should not change unintentionally Libraries/Types/RootTagTypes.js 1`] = `
"export type { RootTag } from \\"../ReactNative/RootTag\\";
"
`;

exports[`public API should not change unintentionally Libraries/Types/UIManagerJSInterface.js 1`] = `
"export interface UIManagerJSInterface extends Spec {
  +getViewManagerConfig: (viewManagerName: string) => Object;
  +hasViewManagerConfig: (viewManagerName: string) => boolean;
}
"
`;

exports[`public API should not change unintentionally Libraries/UTFSequence.js 1`] = `
"declare const UTFSequence: {|
  BOM: string,
  BULLET: string,
  BULLET_SP: string,
  MDASH: string,
  MDASH_SP: string,
  MIDDOT: string,
  MIDDOT_KATAKANA: string,
  MIDDOT_SP: string,
  NBSP: string,
  NDASH: string,
  NDASH_SP: string,
  NEWLINE: string,
  PIZZA: string,
  TRIANGLE_LEFT: string,
  TRIANGLE_RIGHT: string,
|};
declare export default typeof UTFSequence;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/Appearance.js 1`] = `
"declare export function getColorScheme(): ?ColorSchemeName;
declare export function setColorScheme(colorScheme: ?ColorSchemeName): void;
declare export function addChangeListener(
  listener: ({ colorScheme: ?ColorSchemeName }) => void
): EventSubscription;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/BackHandler.js.flow 1`] = `
"type BackPressEventName = \\"backPress\\" | \\"hardwareBackPress\\";
type TBackHandler = {|
  +exitApp: () => void,
  +addEventListener: (
    eventName: BackPressEventName,
    handler: () => ?boolean
  ) => { remove: () => void, ... },
|};
declare module.exports: TBackHandler;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/DebugEnvironment.js 1`] = `
"declare export let isAsyncDebugging: boolean;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/DevLoadingView.js 1`] = `
"declare module.exports: {
  showMessage(message: string, type: \\"load\\" | \\"refresh\\"): void,
  hide(): void,
};
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/DevSettings.js 1`] = `
"declare let DevSettings: {
  addMenuItem(title: string, handler: () => mixed): void,
  reload(reason?: string): void,
  onFastRefresh(): void,
};
declare module.exports: DevSettings;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/DeviceInfo.js 1`] = `
"declare module.exports: NativeDeviceInfo;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/Dimensions.js 1`] = `
"declare class Dimensions {
  static get(dim: string): DisplayMetrics | DisplayMetricsAndroid;
  static set(dims: $ReadOnly<DimensionsPayload>): void;
  static addEventListener(type: \\"change\\", handler: Function): EventSubscription;
}
declare export default typeof Dimensions;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/FeatureDetection.js 1`] = `
"declare function isNativeFunction(f: Function): boolean;
declare function hasNativeConstructor(o: Object, expectedName: string): boolean;
declare module.exports: {
  isNativeFunction: isNativeFunction,
  hasNativeConstructor: hasNativeConstructor,
};
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/GlobalPerformanceLogger.js 1`] = `
"declare const GlobalPerformanceLogger: IPerformanceLogger;
declare module.exports: GlobalPerformanceLogger;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/HMRClient.js 1`] = `
"type LogLevel =
  | \\"trace\\"
  | \\"info\\"
  | \\"warn\\"
  | \\"error\\"
  | \\"log\\"
  | \\"group\\"
  | \\"groupCollapsed\\"
  | \\"groupEnd\\"
  | \\"debug\\";
export type HMRClientNativeInterface = {|
  enable(): void,
  disable(): void,
  registerBundle(requestUrl: string): void,
  log(level: LogLevel, data: $ReadOnlyArray<mixed>): void,
  setup(
    platform: string,
    bundleEntry: string,
    host: string,
    port: number | string,
    isEnabled: boolean,
    scheme?: string
  ): void,
  unstable_notifyFuseboxConsoleEnabled(): void,
|};
declare const HMRClient: HMRClientNativeInterface;
declare module.exports: HMRClient;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/HMRClientProdShim.js 1`] = `
"declare const HMRClientProdShim: HMRClientNativeInterface;
declare module.exports: HMRClientProdShim;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/IPerformanceLogger.js 1`] = `
"export type Timespan = {
  startTime: number,
  endTime?: number,
  totalTime?: number,
  startExtras?: Extras,
  endExtras?: Extras,
};
export type ExtraValue = number | string | boolean;
export type Extras = { [key: string]: ExtraValue };
export interface IPerformanceLogger {
  addTimespan(
    key: string,
    startTime: number,
    endTime: number,
    startExtras?: Extras,
    endExtras?: Extras
  ): void;
  append(logger: IPerformanceLogger): void;
  clear(): void;
  clearCompleted(): void;
  close(): void;
  currentTimestamp(): number;
  getExtras(): $ReadOnly<{ [key: string]: ?ExtraValue, ... }>;
  getPoints(): $ReadOnly<{ [key: string]: ?number, ... }>;
  getPointExtras(): $ReadOnly<{ [key: string]: ?Extras, ... }>;
  getTimespans(): $ReadOnly<{ [key: string]: ?Timespan, ... }>;
  hasTimespan(key: string): boolean;
  isClosed(): boolean;
  logEverything(): void;
  markPoint(key: string, timestamp?: number, extras?: Extras): void;
  removeExtra(key: string): ?ExtraValue;
  setExtra(key: string, value: ExtraValue): void;
  startTimespan(key: string, timestamp?: number, extras?: Extras): void;
  stopTimespan(key: string, timestamp?: number, extras?: Extras): void;
}
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/NativeAppearance.js 1`] = `
"export type * from \\"../../src/private/specs/modules/NativeAppearance\\";
declare export default typeof NativeAppearance;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/NativeDevLoadingView.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeDevLoadingView\\";
declare export default typeof NativeDevLoadingView;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/NativeDeviceInfo.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeDeviceInfo\\";
declare export default typeof NativeDeviceInfo;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/NativePlatformConstantsAndroid.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativePlatformConstantsAndroid\\";
declare export default typeof NativePlatformConstantsAndroid;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/NativePlatformConstantsIOS.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativePlatformConstantsIOS\\";
declare export default typeof NativePlatformConstantsIOS;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/PerformanceLoggerContext.js 1`] = `
"declare const PerformanceLoggerContext: React.Context<IPerformanceLogger>;
declare export function usePerformanceLogger(): IPerformanceLogger;
declare export default typeof PerformanceLoggerContext;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/PixelRatio.js 1`] = `
"declare class PixelRatio {
  static get(): number;
  static getFontScale(): number;
  static getPixelSizeForLayoutSize(layoutSize: number): number;
  static roundToNearestPixel(layoutSize: number): number;
  static startDetecting(): void;
}
declare export default typeof PixelRatio;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/Platform.flow.js 1`] = `
"export type PlatformSelectSpec<T> = {
  default?: T,
  native?: T,
  ios?: T,
  android?: T,
  ...
};
type IOSPlatform = {
  __constants: null,
  OS: \\"ios\\",
  get Version(): string,
  get constants(): {|
    forceTouchAvailable: boolean,
    interfaceIdiom: string,
    isTesting: boolean,
    isDisableAnimations?: boolean,
    osVersion: string,
    reactNativeVersion: {|
      major: number,
      minor: number,
      patch: number,
      prerelease: ?string,
    |},
    systemName: string,
    isMacCatalyst?: boolean,
  |},
  get isPad(): boolean,
  get isTV(): boolean,
  get isVision(): boolean,
  get isTesting(): boolean,
  get isDisableAnimations(): boolean,
  get isMacCatalyst(): boolean,
  select: <T>(spec: PlatformSelectSpec<T>) => T,
};
type AndroidPlatform = {
  __constants: null,
  OS: \\"android\\",
  get Version(): number,
  get constants(): {|
    isTesting: boolean,
    isDisableAnimations?: boolean,
    reactNativeVersion: {|
      major: number,
      minor: number,
      patch: number,
      prerelease: ?string,
    |},
    Version: number,
    Release: string,
    Serial: string,
    Fingerprint: string,
    Model: string,
    ServerHost?: string,
    uiMode: string,
    Brand: string,
    Manufacturer: string,
  |},
  get isTV(): boolean,
  get isVision(): boolean,
  get isTesting(): boolean,
  get isDisableAnimations(): boolean,
  select: <T>(spec: PlatformSelectSpec<T>) => T,
};
export type Platform = IOSPlatform | AndroidPlatform;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/Platform.js.flow 1`] = `
"declare module.exports: Platform;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/PolyfillFunctions.js 1`] = `
"declare function polyfillObjectProperty<T>(
  object: { ... },
  name: string,
  getValue: () => T
): void;
declare function polyfillGlobal<T>(name: string, getValue: () => T): void;
declare module.exports: {
  polyfillObjectProperty: polyfillObjectProperty,
  polyfillGlobal: polyfillGlobal,
};
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/RCTLog.js 1`] = `
"declare let warningHandler: ?(...Array<mixed>) => void;
declare const RCTLog: {
  logIfNoNativeHook(level: string, ...args: Array<mixed>): void,
  logToConsole(level: string, ...args: Array<mixed>): void,
  setWarningHandler(handler: typeof warningHandler): void,
};
declare module.exports: RCTLog;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/ReactNativeTestTools.js 1`] = `
"declare const React: $FlowFixMe;
declare const ReactTestRenderer: $FlowFixMe;
export type ReactTestInstance = $PropertyType<ReactTestRendererType, \\"root\\">;
export type Predicate = (node: ReactTestInstance) => boolean;
export type ReactTestRendererJSON = ReturnType<ReactTestRenderer.create.toJSON>;
declare function byClickable(): Predicate;
declare function byTestID(testID: string): Predicate;
declare function byTextMatching(regex: RegExp): Predicate;
declare function enter(instance: ReactTestInstance, text: string): void;
declare function maximumDepthError(
  tree: ReactTestRendererType,
  maxDepthLimit: number
): ?string;
declare function expectNoConsoleWarn(): void;
declare function expectNoConsoleError(): void;
declare function expectRendersMatchingSnapshot(
  name: string,
  ComponentProvider: () => React.MixedElement,
  unmockComponent: () => mixed
): void;
declare function maximumDepthOfJSON(node: ?ReactTestRendererJSON): number;
declare function renderAndEnforceStrictMode(element: React.Node): any;
declare function renderWithStrictMode(
  element: React.Node
): ReactTestRendererType;
declare function tap(instance: ReactTestInstance): void;
declare function scrollToBottom(instance: ReactTestInstance): void;
declare function withMessage(fn: Predicate, message: string): Predicate;
export { byClickable };
export { byTestID };
export { byTextMatching };
export { enter };
export { expectNoConsoleWarn };
export { expectNoConsoleError };
export { expectRendersMatchingSnapshot };
export { maximumDepthError };
export { maximumDepthOfJSON };
export { renderAndEnforceStrictMode };
export { renderWithStrictMode };
export { scrollToBottom };
export { tap };
export { withMessage };
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/SceneTracker.js 1`] = `
"export type Scene = { name: string, [string]: mixed, ... };
declare const SceneTracker: {
  setActiveScene(scene: Scene): void,
  getActiveScene(): Scene,
  addActiveSceneChangedListener(callback: (scene: Scene) => void): {
    remove: () => void,
    ...
  },
};
declare module.exports: SceneTracker;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/binaryToBase64.js 1`] = `
"declare function binaryToBase64(data: ArrayBuffer | $ArrayBufferView): string;
declare module.exports: binaryToBase64;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/codegenNativeCommands.js 1`] = `
"type Options<T = string> = $ReadOnly<{|
  supportedCommands: $ReadOnlyArray<T>,
|}>;
declare function codegenNativeCommands<T: interface {}>(
  options: Options<$Keys<T>>
): T;
declare export default typeof codegenNativeCommands;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/codegenNativeComponent.js 1`] = `
"type Options = $ReadOnly<{|
  interfaceOnly?: boolean,
  paperComponentName?: string,
  paperComponentNameDeprecated?: string,
  excludedPlatforms?: $ReadOnlyArray<\\"iOS\\" | \\"android\\">,
|}>;
export type NativeComponentType<T> = HostComponent<T>;
declare function codegenNativeComponent<Props: { ... }>(
  componentName: string,
  options?: Options
): NativeComponentType<Props>;
declare export default typeof codegenNativeComponent;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/createPerformanceLogger.js 1`] = `
"declare export const getCurrentTimestamp: () => number;
export type { Extras, ExtraValue, IPerformanceLogger, Timespan };
declare export default function createPerformanceLogger(): IPerformanceLogger;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/deepFreezeAndThrowOnMutationInDev.js 1`] = `
"declare function deepFreezeAndThrowOnMutationInDev<T: { ... } | Array<mixed>>(
  object: T
): T;
declare module.exports: deepFreezeAndThrowOnMutationInDev;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/defineLazyObjectProperty.js 1`] = `
"declare function defineLazyObjectProperty<T>(
  object: interface {},
  name: string,
  descriptor: {
    get: () => T,
    enumerable?: boolean,
    writable?: boolean,
    ...
  }
): void;
declare module.exports: defineLazyObjectProperty;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/differ/deepDiffer.js 1`] = `
"type Options = {| +unsafelyIgnoreFunctions?: boolean |};
declare const deepDiffer: (
  one: any,
  two: any,
  maxDepthOrOptions: Options | number,
  maybeOptions?: Options
) => boolean;
declare module.exports: deepDiffer;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/differ/insetsDiffer.js 1`] = `
"type Inset = {
  top: ?number,
  left: ?number,
  right: ?number,
  bottom: ?number,
  ...
};
declare const insetsDiffer: (one: Inset, two: Inset) => boolean;
declare module.exports: insetsDiffer;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/differ/matricesDiffer.js 1`] = `
"declare const matricesDiffer: (
  one: ?Array<number>,
  two: ?Array<number>
) => boolean;
declare module.exports: matricesDiffer;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/differ/pointsDiffer.js 1`] = `
"type Point = {
  x: ?number,
  y: ?number,
  ...
};
declare const pointsDiffer: (one: ?Point, two: ?Point) => boolean;
declare module.exports: pointsDiffer;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/differ/sizesDiffer.js 1`] = `
"type Size = { width: ?number, height: ?number };
declare const sizesDiffer: (one: Size, two: Size) => boolean;
declare module.exports: sizesDiffer;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/dismissKeyboard.js 1`] = `
"declare function dismissKeyboard(): void;
declare module.exports: dismissKeyboard;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/infoLog.js 1`] = `
"declare function infoLog(...args: Array<mixed>): void;
declare module.exports: infoLog;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/logError.js 1`] = `
"declare const logError: (...args: $ReadOnlyArray<mixed>) => void;
declare module.exports: logError;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/mapWithSeparator.js 1`] = `
"declare function mapWithSeparator<TFrom, TTo>(
  items: Array<TFrom>,
  itemRenderer: (item: TFrom, index: number, items: Array<TFrom>) => TTo,
  spacerRenderer: (index: number) => TTo
): Array<TTo>;
declare module.exports: mapWithSeparator;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/stringifySafe.js 1`] = `
"declare export function createStringifySafeWithLimits(limits: {|
  maxDepth?: number,
  maxStringLimit?: number,
  maxArrayLimit?: number,
  maxObjectKeysLimit?: number,
|}): (mixed) => string;
declare const stringifySafe: (mixed) => string;
declare export default typeof stringifySafe;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/stringifyViewConfig.js 1`] = `
"declare export default function stringifyViewConfig(viewConfig: any): string;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/useColorScheme.js 1`] = `
"declare export default function useColorScheme(): ?ColorSchemeName;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/useMergeRefs.js 1`] = `
"declare export default function useMergeRefs<Instance>(
  ...refs: $ReadOnlyArray<?React.RefSetter<Instance>>
): React.RefSetter<Instance>;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/useRefEffect.js 1`] = `
"type CallbackRef<T> = (T) => mixed;
declare export default function useRefEffect<TInstance>(
  effect: (TInstance) => (() => void) | void
): CallbackRef<TInstance | null>;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/useWindowDimensions.js 1`] = `
"declare export default function useWindowDimensions():
  | DisplayMetrics
  | DisplayMetricsAndroid;
"
`;

exports[`public API should not change unintentionally Libraries/Utilities/warnOnce.js 1`] = `
"declare function warnOnce(key: string, message: string): void;
declare module.exports: warnOnce;
"
`;

exports[`public API should not change unintentionally Libraries/Vibration/NativeVibration.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeVibration\\";
declare export default typeof NativeVibration;
"
`;

exports[`public API should not change unintentionally Libraries/Vibration/Vibration.js 1`] = `
"declare const Vibration: {
  vibrate: (pattern: number | Array<number>, repeat: boolean) => void,
  cancel: () => void,
};
declare module.exports: Vibration;
"
`;

exports[`public API should not change unintentionally Libraries/WebSocket/NativeWebSocketModule.js 1`] = `
"export * from \\"../../src/private/specs/modules/NativeWebSocketModule\\";
declare export default typeof NativeWebSocketModule;
"
`;

exports[`public API should not change unintentionally Libraries/WebSocket/WebSocket.js 1`] = `
"type ArrayBufferView =
  | Int8Array
  | Uint8Array
  | Uint8ClampedArray
  | Int16Array
  | Uint16Array
  | Int32Array
  | Uint32Array
  | Float32Array
  | Float64Array
  | DataView;
type BinaryType = \\"blob\\" | \\"arraybuffer\\";
type WebSocketEventDefinitions = {
  websocketOpen: [{ id: number, protocol: string }],
  websocketClosed: [{ id: number, code: number, reason: string }],
  websocketMessage: [
    | { type: \\"binary\\", id: number, data: string }
    | { type: \\"text\\", id: number, data: string }
    | { type: \\"blob\\", id: number, data: BlobData },
  ],
  websocketFailed: [{ id: number, message: string }],
};
declare class WebSocket extends EventTarget {
  static CONNECTING: number;
  static OPEN: number;
  static CLOSING: number;
  static CLOSED: number;
  CONNECTING: number;
  OPEN: number;
  CLOSING: number;
  CLOSED: number;
  _socketId: number;
  _eventEmitter: NativeEventEmitter<WebSocketEventDefinitions>;
  _subscriptions: Array<EventSubscription>;
  _binaryType: ?BinaryType;
  onclose: ?Function;
  onerror: ?Function;
  onmessage: ?Function;
  onopen: ?Function;
  bufferedAmount: number;
  extension: ?string;
  protocol: ?string;
  readyState: number;
  url: ?string;
  constructor(
    url: string,
    protocols: ?string | ?Array<string>,
    options: ?{ headers?: { origin?: string, ... }, ... }
  ): void;
  get binaryType(): ?BinaryType;
  set binaryType(binaryType: BinaryType): void;
  close(code?: number, reason?: string): void;
  send(data: string | ArrayBuffer | ArrayBufferView | Blob): void;
  ping(): void;
  _close(code?: number, reason?: string): void;
  _unregisterEvents(): void;
  _registerEvents(): void;
}
declare module.exports: WebSocket;
"
`;

exports[`public API should not change unintentionally Libraries/WebSocket/WebSocketEvent.js 1`] = `
"declare class WebSocketEvent {
  type: string;
  constructor(type: string, eventInitDict: $FlowFixMe): void;
}
declare module.exports: WebSocketEvent;
"
`;

exports[`public API should not change unintentionally Libraries/WebSocket/WebSocketInterceptor.js 1`] = `
"declare const WebSocketInterceptor: {
  setCloseCallback(callback: $FlowFixMe): void,
  setSendCallback(callback: $FlowFixMe): void,
  setConnectCallback(callback: $FlowFixMe): void,
  setOnOpenCallback(callback: $FlowFixMe): void,
  setOnMessageCallback(callback: $FlowFixMe): void,
  setOnErrorCallback(callback: $FlowFixMe): void,
  setOnCloseCallback(callback: $FlowFixMe): void,
  isInterceptorEnabled(): boolean,
  _unregisterEvents(): void,
  _registerEvents(): void,
  enableInterception(): void,
  _arrayBufferToString(data: string): ArrayBuffer | string,
  disableInterception(): void,
};
declare module.exports: WebSocketInterceptor;
"
`;

exports[`public API should not change unintentionally Libraries/YellowBox/YellowBoxDeprecated.js 1`] = `
"declare const React: $FlowFixMe;
type Props = $ReadOnly<{||}>;
declare module.exports: Class<React.Component<Props>> & {
  ignoreWarnings($ReadOnlyArray<IgnorePattern>): void,
  install(): void,
  uninstall(): void,
  ...
};
"
`;

exports[`public API should not change unintentionally Libraries/promiseRejectionTrackingOptions.js 1`] = `
"declare let rejectionTrackingOptions: $NonMaybeType<Parameters<enable>[0]>;
declare export default typeof rejectionTrackingOptions;
"
`;

exports[`public API should not change unintentionally Libraries/vendor/core/ErrorUtils.js 1`] = `
"declare module.exports: ErrorUtilsT;
"
`;

exports[`public API should not change unintentionally Libraries/vendor/emitter/EventEmitter.js 1`] = `
"export interface EventSubscription {
  remove(): void;
}
export interface IEventEmitter<TEventToArgsMap: { ... }> {
  addListener<TEvent: $Keys<TEventToArgsMap>>(
    eventType: TEvent,
    listener: (...args: TEventToArgsMap[TEvent]) => mixed,
    context?: mixed
  ): EventSubscription;
  emit<TEvent: $Keys<TEventToArgsMap>>(
    eventType: TEvent,
    ...args: TEventToArgsMap[TEvent]
  ): void;
  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(eventType?: ?TEvent): void;
  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number;
}
declare export default class EventEmitter<TEventToArgsMap: { ... }>
  implements IEventEmitter<TEventToArgsMap>
{
  addListener<TEvent: $Keys<TEventToArgsMap>>(
    eventType: TEvent,
    listener: (...args: TEventToArgsMap[TEvent]) => mixed,
    context: mixed
  ): EventSubscription;
  emit<TEvent: $Keys<TEventToArgsMap>>(
    eventType: TEvent,
    ...args: TEventToArgsMap[TEvent]
  ): void;
  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(eventType?: ?TEvent): void;
  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number;
}
"
`;

exports[`public API should not change unintentionally index.js 1`] = `
"export type { HostComponent, HostInstance };
declare module.exports: {
  get registerCallableModule(): RegisterCallableModule,
  get AccessibilityInfo(): AccessibilityInfo,
  get ActivityIndicator(): ActivityIndicator,
  get Button(): Button,
  get DrawerLayoutAndroid(): DrawerLayoutAndroid,
  get FlatList(): FlatList,
  get Image(): Image,
  get ImageBackground(): ImageBackground,
  get InputAccessoryView(): InputAccessoryView,
  get KeyboardAvoidingView(): KeyboardAvoidingView,
  get Modal(): Modal,
  get Pressable(): Pressable,
  get ProgressBarAndroid(): ProgressBarAndroid,
  get RefreshControl(): RefreshControl,
  get SafeAreaView(): SafeAreaView,
  get ScrollView(): ScrollView,
  get SectionList(): SectionList,
  get StatusBar(): StatusBar,
  get Switch(): Switch,
  get Text(): Text,
  get TextInput(): TextInput,
  get Touchable(): Touchable,
  get TouchableHighlight(): TouchableHighlight,
  get TouchableNativeFeedback(): TouchableNativeFeedback,
  get TouchableOpacity(): TouchableOpacity,
  get TouchableWithoutFeedback(): TouchableWithoutFeedback,
  get View(): View,
  get VirtualizedList(): VirtualizedList,
  get VirtualizedSectionList(): VirtualizedSectionList,
  get ActionSheetIOS(): ActionSheetIOS,
  get Alert(): Alert,
  get Animated(): { ...$Diff<AnimatedModule, { default: any }>, ...Animated },
  get Appearance(): Appearance,
  get AppRegistry(): AppRegistry,
  get AppState(): AppState,
  get BackHandler(): BackHandler,
  get Clipboard(): Clipboard,
  get DeviceInfo(): DeviceInfo,
  get DevMenu(): DevMenu,
  get DevSettings(): DevSettings,
  get Dimensions(): Dimensions,
  get Easing(): Easing,
  get findNodeHandle(): $PropertyType<ReactNative, \\"findNodeHandle\\">,
  get I18nManager(): I18nManager,
  get InteractionManager(): InteractionManager,
  get Keyboard(): Keyboard,
  get LayoutAnimation(): LayoutAnimation,
  get Linking(): Linking,
  get LogBox(): LogBox,
  get NativeDialogManagerAndroid(): NativeDialogManagerAndroid,
  get NativeEventEmitter(): NativeEventEmitter,
  get Networking(): Networking,
  get PanResponder(): PanResponder,
  get PermissionsAndroid(): PermissionsAndroid,
  get PixelRatio(): PixelRatio,
  get PushNotificationIOS(): PushNotificationIOS,
  get Settings(): Settings,
  get Share(): Share,
  get StyleSheet(): StyleSheet,
  get Systrace(): Systrace,
  get ToastAndroid(): ToastAndroid,
  get TurboModuleRegistry(): TurboModuleRegistry,
  get UIManager(): UIManager,
  get unstable_batchedUpdates(): $PropertyType<
    ReactNative,
    \\"unstable_batchedUpdates\\",
  >,
  get useAnimatedValue(): useAnimatedValue,
  get useColorScheme(): useColorScheme,
  get useWindowDimensions(): useWindowDimensions,
  get UTFSequence(): UTFSequence,
  get Vibration(): Vibration,
  get YellowBox(): YellowBox,
  get DeviceEventEmitter(): RCTDeviceEventEmitter,
  get DynamicColorIOS(): DynamicColorIOS,
  get NativeAppEventEmitter(): RCTNativeAppEventEmitter,
  get NativeModules(): NativeModules,
  get Platform(): Platform,
  get PlatformColor(): PlatformColor,
  get processColor(): processColor,
  get requireNativeComponent(): <T: { ... }>(
    uiViewClassName: string
  ) => HostComponent<T>,
  get RootTagContext(): RootTagContext,
  get unstable_enableLogBox(): () => void,
};
"
`;
