// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SectionList rendering empty section headers is fine 1`] = `
<RCTScrollView
  data={
    Array [
      Object {
        "data": Array [
          Object {
            "key": "i1",
          },
          Object {
            "key": "i2",
          },
        ],
        "key": "s1",
      },
    ]
  }
  getItem={[Function]}
  getItemCount={[Function]}
  keyExtractor={[Function]}
  onContentSizeChange={[Function]}
  onLayout={[Function]}
  onMomentumScrollBegin={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  renderItem={[Function]}
  scrollEventThrottle={0.0001}
  stickyHeaderIndices={
    Array [
      0,
      3,
    ]
  }
>
  <View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    />
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <item
        v="i1"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <item
        v="i2"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    />
  </View>
</RCTScrollView>
`;

exports[`SectionList renders a footer when there is no data 1`] = `
<RCTScrollView
  data={
    Array [
      Object {
        "data": Array [],
        "key": "s1",
      },
    ]
  }
  getItem={[Function]}
  getItemCount={[Function]}
  keyExtractor={[Function]}
  onContentSizeChange={[Function]}
  onLayout={[Function]}
  onMomentumScrollBegin={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  renderItem={[Function]}
  scrollEventThrottle={0.0001}
  stickyHeaderIndices={
    Array [
      0,
      1,
    ]
  }
>
  <View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <sectionHeader
        v="section:s1"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <sectionFooter
        v="section:s1"
      />
    </View>
  </View>
</RCTScrollView>
`;

exports[`SectionList renders a footer when there is no data and no header 1`] = `
<RCTScrollView
  data={
    Array [
      Object {
        "data": Array [],
        "key": "s1",
      },
    ]
  }
  getItem={[Function]}
  getItemCount={[Function]}
  keyExtractor={[Function]}
  onContentSizeChange={[Function]}
  onLayout={[Function]}
  onMomentumScrollBegin={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  renderItem={[Function]}
  scrollEventThrottle={0.0001}
  stickyHeaderIndices={
    Array [
      0,
      1,
    ]
  }
>
  <View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    />
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <sectionFooter
        v="section:s1"
      />
    </View>
  </View>
</RCTScrollView>
`;

exports[`SectionList renders all the bells and whistles 1`] = `
<RCTScrollView
  ListEmptyComponent={[Function]}
  ListFooterComponent={[Function]}
  ListHeaderComponent={[Function]}
  data={
    Array [
      Object {
        "ItemSeparatorComponent": [Function],
        "data": Array [
          Object {
            "id": "i1s1",
          },
          Object {
            "id": "i2s1",
          },
        ],
        "key": "s1",
        "keyExtractor": [Function],
        "renderItem": [Function],
      },
      Object {
        "data": Array [
          Object {
            "key": "i1s2",
          },
          Object {
            "key": "i2s2",
          },
        ],
        "key": "s2",
      },
      Object {
        "data": Array [
          Object {
            "key": "i1s3",
          },
          Object {
            "key": "i2s3",
          },
        ],
        "key": "s3",
      },
    ]
  }
  getItem={[Function]}
  getItemCount={[Function]}
  initialNumToRender={Infinity}
  keyExtractor={[Function]}
  onContentSizeChange={[Function]}
  onLayout={[Function]}
  onMomentumScrollBegin={[Function]}
  onMomentumScrollEnd={[Function]}
  onRefresh={[MockFunction]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  refreshControl={
    <RefreshControlMock
      onRefresh={[MockFunction]}
      refreshing={false}
    />
  }
  refreshing={false}
  renderItem={[Function]}
  scrollEventThrottle={0.0001}
  stickyHeaderIndices={
    Array [
      1,
      4,
      5,
      8,
      9,
      12,
    ]
  }
>
  <RCTRefreshControl />
  <View>
    <View
      collapsable={false}
      onLayout={[Function]}
    >
      <header
        v=""
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <sectionHeader
        v="section:s1"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <sectionSeparator
        v="highlighted:false,leadingItem:undefined,leadingSection:undefined,section:s1,trailingItem:i1s1,trailingSection:s2"
      />
      <itemForSection1
        v="item:i1s1,index:0,section:s1,separators:[object Object]"
      />
      <itemSeparatorForSection1
        v="highlighted:false,leadingItem:i1s1,leadingSection:undefined,section:s1,trailingItem:i2s1,trailingSection:s2"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <itemForSection1
        v="item:i2s1,index:1,section:s1,separators:[object Object]"
      />
      <sectionSeparator
        v="highlighted:false,leadingItem:i2s1,leadingSection:undefined,section:s1,trailingItem:undefined,trailingSection:s2"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <sectionFooter
        v="section:s1"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <sectionHeader
        v="section:s2"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <sectionSeparator
        v="highlighted:false,leadingItem:undefined,leadingSection:s1,section:s2,trailingItem:i1s2,trailingSection:s3"
      />
      <defaultItem
        v="item:i1s2,index:0,section:s2,separators:[object Object]"
      />
      <defaultItemSeparator
        v="highlighted:false,leadingItem:i1s2,leadingSection:s1,section:s2,trailingItem:i2s2,trailingSection:s3"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <defaultItem
        v="item:i2s2,index:1,section:s2,separators:[object Object]"
      />
      <sectionSeparator
        v="highlighted:false,leadingItem:i2s2,leadingSection:s1,section:s2,trailingItem:undefined,trailingSection:s3"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <sectionFooter
        v="section:s2"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <sectionHeader
        v="section:s3"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <sectionSeparator
        v="highlighted:false,leadingItem:undefined,leadingSection:s2,section:s3,trailingItem:i1s3,trailingSection:undefined"
      />
      <defaultItem
        v="item:i1s3,index:0,section:s3,separators:[object Object]"
      />
      <defaultItemSeparator
        v="highlighted:false,leadingItem:i1s3,leadingSection:s2,section:s3,trailingItem:i2s3,trailingSection:undefined"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <defaultItem
        v="item:i2s3,index:1,section:s3,separators:[object Object]"
      />
      <sectionSeparator
        v="highlighted:false,leadingItem:i2s3,leadingSection:s2,section:s3,trailingItem:undefined,trailingSection:undefined"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <sectionFooter
        v="section:s3"
      />
    </View>
    <View
      onLayout={[Function]}
    >
      <footer
        v=""
      />
    </View>
  </View>
</RCTScrollView>
`;

exports[`SectionList renders empty list 1`] = `
<RCTScrollView
  data={Array []}
  getItem={[Function]}
  getItemCount={[Function]}
  keyExtractor={[Function]}
  onContentSizeChange={[Function]}
  onLayout={[Function]}
  onMomentumScrollBegin={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  renderItem={[Function]}
  scrollEventThrottle={0.0001}
  stickyHeaderIndices={Array []}
>
  <View />
</RCTScrollView>
`;

exports[`SectionList renders footers 1`] = `
<RCTScrollView
  data={
    Array [
      Object {
        "data": Array [
          Object {
            "key": "i1s1",
          },
          Object {
            "key": "i2s1",
          },
        ],
        "key": "s1",
      },
      Object {
        "data": Array [
          Object {
            "key": "i1s2",
          },
          Object {
            "key": "i2s2",
          },
          Object {
            "key": "i3s2",
          },
        ],
        "key": "s2",
      },
      Object {
        "data": Array [
          Object {
            "key": "i1s3",
          },
          Object {
            "key": "i2s3",
          },
        ],
        "key": "s3",
      },
    ]
  }
  getItem={[Function]}
  getItemCount={[Function]}
  keyExtractor={[Function]}
  onContentSizeChange={[Function]}
  onLayout={[Function]}
  onMomentumScrollBegin={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  renderItem={[Function]}
  scrollEventThrottle={0.0001}
  stickyHeaderIndices={
    Array [
      0,
      3,
      4,
      8,
      9,
    ]
  }
>
  <View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    />
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <item
        v="i1s1"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <item
        v="i2s1"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <sectionFooter
        v="section:s1"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    />
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <item
        v="i1s2"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <item
        v="i2s2"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <item
        v="i3s2"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    >
      <sectionFooter
        v="section:s2"
      />
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={null}
    />
    <View
      style={
        Object {
          "height": 0,
        }
      }
    />
  </View>
</RCTScrollView>
`;
