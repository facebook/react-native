// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GeneratePropsCpp can generate fixture ARRAY_PROPS 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/ARRAY_PROPS/Props.h>
#include <react/renderer/components/image/conversions.h>
#include <react/renderer/components/view/conversions.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

ArrayPropsNativeComponentProps::ArrayPropsNativeComponentProps(
    const PropsParserContext &context,
    const ArrayPropsNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    names(convertRawProp(context, rawProps, \\"names\\", sourceProps.names, {})),
    disableds(convertRawProp(context, rawProps, \\"disableds\\", sourceProps.disableds, {})),
    progress(convertRawProp(context, rawProps, \\"progress\\", sourceProps.progress, {})),
    radii(convertRawProp(context, rawProps, \\"radii\\", sourceProps.radii, {})),
    colors(convertRawProp(context, rawProps, \\"colors\\", sourceProps.colors, {})),
    srcs(convertRawProp(context, rawProps, \\"srcs\\", sourceProps.srcs, {})),
    points(convertRawProp(context, rawProps, \\"points\\", sourceProps.points, {})),
    dimensions(convertRawProp(context, rawProps, \\"dimensions\\", sourceProps.dimensions, {})),
    sizes(convertRawProp(context, rawProps, \\"sizes\\", ArrayPropsNativeComponentSizesMaskWrapped{ .value = sourceProps.sizes }, {static_cast<ArrayPropsNativeComponentSizesMask>(ArrayPropsNativeComponentSizes::Small)}).value),
    object(convertRawProp(context, rawProps, \\"object\\", sourceProps.object, {})),
    array(convertRawProp(context, rawProps, \\"array\\", sourceProps.array, {})),
    arrayOfArrayOfObject(convertRawProp(context, rawProps, \\"arrayOfArrayOfObject\\", sourceProps.arrayOfArrayOfObject, {})),
    arrayOfMixed(convertRawProp(context, rawProps, \\"arrayOfMixed\\", sourceProps.arrayOfMixed, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName ArrayPropsNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"ArrayPropsNativeComponent\\";
}

folly::dynamic ArrayPropsNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = ArrayPropsNativeComponentProps();
  const ArrayPropsNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const ArrayPropsNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (names != oldProps->names) {
    result[\\"names\\"] = toDynamic(names);
  }
    
  if (disableds != oldProps->disableds) {
    result[\\"disableds\\"] = toDynamic(disableds);
  }
    
  if (progress != oldProps->progress) {
    result[\\"progress\\"] = toDynamic(progress);
  }
    
  if (radii != oldProps->radii) {
    result[\\"radii\\"] = toDynamic(radii);
  }
    
  if (colors != oldProps->colors) {
    result[\\"colors\\"] = toDynamic(colors);
  }
    
  if (srcs != oldProps->srcs) {
    result[\\"srcs\\"] = toDynamic(srcs);
  }
    
  if (points != oldProps->points) {
    result[\\"points\\"] = toDynamic(points);
  }
    
  if (dimensions != oldProps->dimensions) {
    result[\\"dimensions\\"] = toDynamic(dimensions);
  }
    
  if (sizes != oldProps->sizes) {
    result[\\"sizes\\"] = toDynamic(sizes);
  }
    
  if (object != oldProps->object) {
    result[\\"object\\"] = toDynamic(object);
  }
    
  if (array != oldProps->array) {
    result[\\"array\\"] = toDynamic(array);
  }
    
  if (arrayOfArrayOfObject != oldProps->arrayOfArrayOfObject) {
    result[\\"arrayOfArrayOfObject\\"] = toDynamic(arrayOfArrayOfObject);
  }
    
  if (arrayOfMixed != oldProps->arrayOfMixed) {
    result[\\"arrayOfMixed\\"] = toDynamic(arrayOfMixed);
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture ARRAY_PROPS_WITH_NESTED_OBJECT 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/ARRAY_PROPS_WITH_NESTED_OBJECT/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

ArrayPropsNativeComponentProps::ArrayPropsNativeComponentProps(
    const PropsParserContext &context,
    const ArrayPropsNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    nativePrimitives(convertRawProp(context, rawProps, \\"nativePrimitives\\", sourceProps.nativePrimitives, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName ArrayPropsNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"ArrayPropsNativeComponent\\";
}

folly::dynamic ArrayPropsNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = ArrayPropsNativeComponentProps();
  const ArrayPropsNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const ArrayPropsNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (nativePrimitives != oldProps->nativePrimitives) {
    result[\\"nativePrimitives\\"] = toDynamic(nativePrimitives);
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture BOOLEAN_PROP 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/BOOLEAN_PROP/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

BooleanPropNativeComponentProps::BooleanPropNativeComponentProps(
    const PropsParserContext &context,
    const BooleanPropNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    disabled(convertRawProp(context, rawProps, \\"disabled\\", sourceProps.disabled, {false})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName BooleanPropNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"BooleanPropNativeComponent\\";
}

folly::dynamic BooleanPropNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = BooleanPropNativeComponentProps();
  const BooleanPropNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const BooleanPropNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (disabled != oldProps->disabled) {
    result[\\"disabled\\"] = disabled;
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture COLOR_PROP 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/COLOR_PROP/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

ColorPropNativeComponentProps::ColorPropNativeComponentProps(
    const PropsParserContext &context,
    const ColorPropNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    tintColor(convertRawProp(context, rawProps, \\"tintColor\\", sourceProps.tintColor, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName ColorPropNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"ColorPropNativeComponent\\";
}

folly::dynamic ColorPropNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = ColorPropNativeComponentProps();
  const ColorPropNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const ColorPropNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (tintColor != oldProps->tintColor) {
    result[\\"tintColor\\"] = *tintColor;
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture COMMANDS 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/COMMANDS/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

CommandNativeComponentProps::CommandNativeComponentProps(
    const PropsParserContext &context,
    const CommandNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)

     {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName CommandNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"CommandNativeComponent\\";
}

folly::dynamic CommandNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = CommandNativeComponentProps();
  const CommandNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const CommandNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture COMMANDS_AND_PROPS 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/COMMANDS_AND_PROPS/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

CommandNativeComponentProps::CommandNativeComponentProps(
    const PropsParserContext &context,
    const CommandNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    accessibilityHint(convertRawProp(context, rawProps, \\"accessibilityHint\\", sourceProps.accessibilityHint, {\\"\\"})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName CommandNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"CommandNativeComponent\\";
}

folly::dynamic CommandNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = CommandNativeComponentProps();
  const CommandNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const CommandNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (accessibilityHint != oldProps->accessibilityHint) {
    result[\\"accessibilityHint\\"] = accessibilityHint;
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture DIMENSION_PROP 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/DIMENSION_PROP/Props.h>
#include <react/renderer/components/view/conversions.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

DimensionPropNativeComponentProps::DimensionPropNativeComponentProps(
    const PropsParserContext &context,
    const DimensionPropNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    marginBack(convertRawProp(context, rawProps, \\"marginBack\\", sourceProps.marginBack, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName DimensionPropNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"DimensionPropNativeComponent\\";
}

folly::dynamic DimensionPropNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = DimensionPropNativeComponentProps();
  const DimensionPropNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const DimensionPropNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (marginBack != oldProps->marginBack) {
    result[\\"marginBack\\"] = toDynamic(marginBack);
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture DOUBLE_PROPS 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/DOUBLE_PROPS/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

DoublePropNativeComponentProps::DoublePropNativeComponentProps(
    const PropsParserContext &context,
    const DoublePropNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    blurRadius(convertRawProp(context, rawProps, \\"blurRadius\\", sourceProps.blurRadius, {0.0})),
    blurRadius2(convertRawProp(context, rawProps, \\"blurRadius2\\", sourceProps.blurRadius2, {0.001})),
    blurRadius3(convertRawProp(context, rawProps, \\"blurRadius3\\", sourceProps.blurRadius3, {2.1})),
    blurRadius4(convertRawProp(context, rawProps, \\"blurRadius4\\", sourceProps.blurRadius4, {0.0})),
    blurRadius5(convertRawProp(context, rawProps, \\"blurRadius5\\", sourceProps.blurRadius5, {1.0})),
    blurRadius6(convertRawProp(context, rawProps, \\"blurRadius6\\", sourceProps.blurRadius6, {0.0})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName DoublePropNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"DoublePropNativeComponent\\";
}

folly::dynamic DoublePropNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = DoublePropNativeComponentProps();
  const DoublePropNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const DoublePropNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if ((blurRadius != oldProps->blurRadius) && !(std::isnan(blurRadius) && std::isnan(oldProps->blurRadius))) {
    result[\\"blurRadius\\"] = blurRadius;
  }
    
  if ((blurRadius2 != oldProps->blurRadius2) && !(std::isnan(blurRadius2) && std::isnan(oldProps->blurRadius2))) {
    result[\\"blurRadius2\\"] = blurRadius2;
  }
    
  if ((blurRadius3 != oldProps->blurRadius3) && !(std::isnan(blurRadius3) && std::isnan(oldProps->blurRadius3))) {
    result[\\"blurRadius3\\"] = blurRadius3;
  }
    
  if ((blurRadius4 != oldProps->blurRadius4) && !(std::isnan(blurRadius4) && std::isnan(oldProps->blurRadius4))) {
    result[\\"blurRadius4\\"] = blurRadius4;
  }
    
  if ((blurRadius5 != oldProps->blurRadius5) && !(std::isnan(blurRadius5) && std::isnan(oldProps->blurRadius5))) {
    result[\\"blurRadius5\\"] = blurRadius5;
  }
    
  if ((blurRadius6 != oldProps->blurRadius6) && !(std::isnan(blurRadius6) && std::isnan(oldProps->blurRadius6))) {
    result[\\"blurRadius6\\"] = blurRadius6;
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture EVENT_NESTED_OBJECT_PROPS 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/EVENT_NESTED_OBJECT_PROPS/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

EventsNestedObjectNativeComponentProps::EventsNestedObjectNativeComponentProps(
    const PropsParserContext &context,
    const EventsNestedObjectNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    disabled(convertRawProp(context, rawProps, \\"disabled\\", sourceProps.disabled, {false})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName EventsNestedObjectNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"EventsNestedObjectNativeComponent\\";
}

folly::dynamic EventsNestedObjectNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = EventsNestedObjectNativeComponentProps();
  const EventsNestedObjectNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const EventsNestedObjectNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (disabled != oldProps->disabled) {
    result[\\"disabled\\"] = disabled;
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture EVENT_PROPS 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/EVENT_PROPS/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

EventsNativeComponentProps::EventsNativeComponentProps(
    const PropsParserContext &context,
    const EventsNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    disabled(convertRawProp(context, rawProps, \\"disabled\\", sourceProps.disabled, {false})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName EventsNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"EventsNativeComponent\\";
}

folly::dynamic EventsNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = EventsNativeComponentProps();
  const EventsNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const EventsNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (disabled != oldProps->disabled) {
    result[\\"disabled\\"] = disabled;
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture EVENTS_WITH_PAPER_NAME 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/EVENTS_WITH_PAPER_NAME/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

InterfaceOnlyComponentProps::InterfaceOnlyComponentProps(
    const PropsParserContext &context,
    const InterfaceOnlyComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)

     {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName InterfaceOnlyComponentProps::getDiffPropsImplementationTarget() const {
  return \\"InterfaceOnlyComponent\\";
}

folly::dynamic InterfaceOnlyComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = InterfaceOnlyComponentProps();
  const InterfaceOnlyComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const InterfaceOnlyComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture EXCLUDE_ANDROID 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/EXCLUDE_ANDROID/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

ExcludedAndroidComponentProps::ExcludedAndroidComponentProps(
    const PropsParserContext &context,
    const ExcludedAndroidComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)

     {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName ExcludedAndroidComponentProps::getDiffPropsImplementationTarget() const {
  return \\"ExcludedAndroidComponent\\";
}

folly::dynamic ExcludedAndroidComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = ExcludedAndroidComponentProps();
  const ExcludedAndroidComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const ExcludedAndroidComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture EXCLUDE_ANDROID_IOS 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/EXCLUDE_ANDROID_IOS/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

ExcludedAndroidIosComponentProps::ExcludedAndroidIosComponentProps(
    const PropsParserContext &context,
    const ExcludedAndroidIosComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)

     {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName ExcludedAndroidIosComponentProps::getDiffPropsImplementationTarget() const {
  return \\"ExcludedAndroidIosComponent\\";
}

folly::dynamic ExcludedAndroidIosComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = ExcludedAndroidIosComponentProps();
  const ExcludedAndroidIosComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const ExcludedAndroidIosComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture EXCLUDE_IOS_TWO_COMPONENTS_DIFFERENT_FILES 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/EXCLUDE_IOS_TWO_COMPONENTS_DIFFERENT_FILES/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

ExcludedIosComponentProps::ExcludedIosComponentProps(
    const PropsParserContext &context,
    const ExcludedIosComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)

     {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName ExcludedIosComponentProps::getDiffPropsImplementationTarget() const {
  return \\"ExcludedIosComponent\\";
}

folly::dynamic ExcludedIosComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = ExcludedIosComponentProps();
  const ExcludedIosComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const ExcludedIosComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  return result;
}
#endif
MultiFileIncludedNativeComponentProps::MultiFileIncludedNativeComponentProps(
    const PropsParserContext &context,
    const MultiFileIncludedNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    disabled(convertRawProp(context, rawProps, \\"disabled\\", sourceProps.disabled, {true})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName MultiFileIncludedNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"MultiFileIncludedNativeComponent\\";
}

folly::dynamic MultiFileIncludedNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = MultiFileIncludedNativeComponentProps();
  const MultiFileIncludedNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const MultiFileIncludedNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (disabled != oldProps->disabled) {
    result[\\"disabled\\"] = disabled;
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture FLOAT_PROPS 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/FLOAT_PROPS/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

FloatPropNativeComponentProps::FloatPropNativeComponentProps(
    const PropsParserContext &context,
    const FloatPropNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    blurRadius(convertRawProp(context, rawProps, \\"blurRadius\\", sourceProps.blurRadius, {0.0})),
    blurRadius2(convertRawProp(context, rawProps, \\"blurRadius2\\", sourceProps.blurRadius2, {0.001})),
    blurRadius3(convertRawProp(context, rawProps, \\"blurRadius3\\", sourceProps.blurRadius3, {2.1})),
    blurRadius4(convertRawProp(context, rawProps, \\"blurRadius4\\", sourceProps.blurRadius4, {0.0})),
    blurRadius5(convertRawProp(context, rawProps, \\"blurRadius5\\", sourceProps.blurRadius5, {1.0})),
    blurRadius6(convertRawProp(context, rawProps, \\"blurRadius6\\", sourceProps.blurRadius6, {0.0})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName FloatPropNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"FloatPropNativeComponent\\";
}

folly::dynamic FloatPropNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = FloatPropNativeComponentProps();
  const FloatPropNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const FloatPropNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if ((blurRadius != oldProps->blurRadius) && !(std::isnan(blurRadius) && std::isnan(oldProps->blurRadius))) {
    result[\\"blurRadius\\"] = blurRadius;
  }
    
  if ((blurRadius2 != oldProps->blurRadius2) && !(std::isnan(blurRadius2) && std::isnan(oldProps->blurRadius2))) {
    result[\\"blurRadius2\\"] = blurRadius2;
  }
    
  if ((blurRadius3 != oldProps->blurRadius3) && !(std::isnan(blurRadius3) && std::isnan(oldProps->blurRadius3))) {
    result[\\"blurRadius3\\"] = blurRadius3;
  }
    
  if ((blurRadius4 != oldProps->blurRadius4) && !(std::isnan(blurRadius4) && std::isnan(oldProps->blurRadius4))) {
    result[\\"blurRadius4\\"] = blurRadius4;
  }
    
  if ((blurRadius5 != oldProps->blurRadius5) && !(std::isnan(blurRadius5) && std::isnan(oldProps->blurRadius5))) {
    result[\\"blurRadius5\\"] = blurRadius5;
  }
    
  if ((blurRadius6 != oldProps->blurRadius6) && !(std::isnan(blurRadius6) && std::isnan(oldProps->blurRadius6))) {
    result[\\"blurRadius6\\"] = blurRadius6;
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture IMAGE_PROP 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/IMAGE_PROP/Props.h>
#include <react/renderer/components/image/conversions.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

ImagePropNativeComponentProps::ImagePropNativeComponentProps(
    const PropsParserContext &context,
    const ImagePropNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    thumbImage(convertRawProp(context, rawProps, \\"thumbImage\\", sourceProps.thumbImage, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName ImagePropNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"ImagePropNativeComponent\\";
}

folly::dynamic ImagePropNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = ImagePropNativeComponentProps();
  const ImagePropNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const ImagePropNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (thumbImage != oldProps->thumbImage) {
    result[\\"thumbImage\\"] = toDynamic(thumbImage);
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture INSETS_PROP 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/INSETS_PROP/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

InsetsPropNativeComponentProps::InsetsPropNativeComponentProps(
    const PropsParserContext &context,
    const InsetsPropNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    contentInset(convertRawProp(context, rawProps, \\"contentInset\\", sourceProps.contentInset, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName InsetsPropNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"InsetsPropNativeComponent\\";
}

folly::dynamic InsetsPropNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = InsetsPropNativeComponentProps();
  const InsetsPropNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const InsetsPropNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (contentInset != oldProps->contentInset) {
    result[\\"contentInset\\"] = toDynamic(contentInset);
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture INT32_ENUM_PROP 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/INT32_ENUM_PROP/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

Int32EnumPropsNativeComponentProps::Int32EnumPropsNativeComponentProps(
    const PropsParserContext &context,
    const Int32EnumPropsNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    maxInterval(convertRawProp(context, rawProps, \\"maxInterval\\", sourceProps.maxInterval, {Int32EnumPropsNativeComponentMaxInterval::MaxInterval0})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName Int32EnumPropsNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"Int32EnumPropsNativeComponent\\";
}

folly::dynamic Int32EnumPropsNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = Int32EnumPropsNativeComponentProps();
  const Int32EnumPropsNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const Int32EnumPropsNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (maxInterval != oldProps->maxInterval) {
    result[\\"maxInterval\\"] = toDynamic(maxInterval);
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture INTEGER_PROPS 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/INTEGER_PROPS/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

IntegerPropNativeComponentProps::IntegerPropNativeComponentProps(
    const PropsParserContext &context,
    const IntegerPropNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    progress1(convertRawProp(context, rawProps, \\"progress1\\", sourceProps.progress1, {0})),
    progress2(convertRawProp(context, rawProps, \\"progress2\\", sourceProps.progress2, {-1})),
    progress3(convertRawProp(context, rawProps, \\"progress3\\", sourceProps.progress3, {10})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName IntegerPropNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"IntegerPropNativeComponent\\";
}

folly::dynamic IntegerPropNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = IntegerPropNativeComponentProps();
  const IntegerPropNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const IntegerPropNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (progress1 != oldProps->progress1) {
    result[\\"progress1\\"] = progress1;
  }
    
  if (progress2 != oldProps->progress2) {
    result[\\"progress2\\"] = progress2;
  }
    
  if (progress3 != oldProps->progress3) {
    result[\\"progress3\\"] = progress3;
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture INTERFACE_ONLY 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/INTERFACE_ONLY/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

InterfaceOnlyComponentProps::InterfaceOnlyComponentProps(
    const PropsParserContext &context,
    const InterfaceOnlyComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    accessibilityHint(convertRawProp(context, rawProps, \\"accessibilityHint\\", sourceProps.accessibilityHint, {\\"\\"})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName InterfaceOnlyComponentProps::getDiffPropsImplementationTarget() const {
  return \\"InterfaceOnlyComponent\\";
}

folly::dynamic InterfaceOnlyComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = InterfaceOnlyComponentProps();
  const InterfaceOnlyComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const InterfaceOnlyComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (accessibilityHint != oldProps->accessibilityHint) {
    result[\\"accessibilityHint\\"] = accessibilityHint;
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture MIXED_PROP 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/MIXED_PROP/Props.h>
#include <folly/dynamic.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

MixedPropNativeComponentProps::MixedPropNativeComponentProps(
    const PropsParserContext &context,
    const MixedPropNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    mixedProp(convertRawProp(context, rawProps, \\"mixedProp\\", sourceProps.mixedProp, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName MixedPropNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"MixedPropNativeComponent\\";
}

folly::dynamic MixedPropNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = MixedPropNativeComponentProps();
  const MixedPropNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const MixedPropNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (mixedProp != oldProps->mixedProp) {
    result[\\"mixedProp\\"] = mixedProp;
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture MULTI_NATIVE_PROP 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/MULTI_NATIVE_PROP/Props.h>
#include <react/renderer/components/image/conversions.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

ImageColorPropNativeComponentProps::ImageColorPropNativeComponentProps(
    const PropsParserContext &context,
    const ImageColorPropNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    thumbImage(convertRawProp(context, rawProps, \\"thumbImage\\", sourceProps.thumbImage, {})),
    color(convertRawProp(context, rawProps, \\"color\\", sourceProps.color, {})),
    thumbTintColor(convertRawProp(context, rawProps, \\"thumbTintColor\\", sourceProps.thumbTintColor, {})),
    point(convertRawProp(context, rawProps, \\"point\\", sourceProps.point, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName ImageColorPropNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"ImageColorPropNativeComponent\\";
}

folly::dynamic ImageColorPropNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = ImageColorPropNativeComponentProps();
  const ImageColorPropNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const ImageColorPropNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (thumbImage != oldProps->thumbImage) {
    result[\\"thumbImage\\"] = toDynamic(thumbImage);
  }
    
  if (color != oldProps->color) {
    result[\\"color\\"] = *color;
  }
    
  if (thumbTintColor != oldProps->thumbTintColor) {
    result[\\"thumbTintColor\\"] = *thumbTintColor;
  }
    
  if (point != oldProps->point) {
    result[\\"point\\"] = toDynamic(point);
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture NO_PROPS_NO_EVENTS 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/NO_PROPS_NO_EVENTS/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

NoPropsNoEventsComponentProps::NoPropsNoEventsComponentProps(
    const PropsParserContext &context,
    const NoPropsNoEventsComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)

     {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName NoPropsNoEventsComponentProps::getDiffPropsImplementationTarget() const {
  return \\"NoPropsNoEventsComponent\\";
}

folly::dynamic NoPropsNoEventsComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = NoPropsNoEventsComponentProps();
  const NoPropsNoEventsComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const NoPropsNoEventsComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture OBJECT_PROPS 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/OBJECT_PROPS/Props.h>
#include <react/renderer/components/image/conversions.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

ObjectPropsProps::ObjectPropsProps(
    const PropsParserContext &context,
    const ObjectPropsProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    objectProp(convertRawProp(context, rawProps, \\"objectProp\\", sourceProps.objectProp, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName ObjectPropsProps::getDiffPropsImplementationTarget() const {
  return \\"ObjectProps\\";
}

folly::dynamic ObjectPropsProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = ObjectPropsProps();
  const ObjectPropsProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const ObjectPropsProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (objectProp != oldProps->objectProp) {
    result[\\"objectProp\\"] = toDynamic(objectProp);
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture POINT_PROP 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/POINT_PROP/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

PointPropNativeComponentProps::PointPropNativeComponentProps(
    const PropsParserContext &context,
    const PointPropNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    startPoint(convertRawProp(context, rawProps, \\"startPoint\\", sourceProps.startPoint, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName PointPropNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"PointPropNativeComponent\\";
}

folly::dynamic PointPropNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = PointPropNativeComponentProps();
  const PointPropNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const PointPropNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (startPoint != oldProps->startPoint) {
    result[\\"startPoint\\"] = toDynamic(startPoint);
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture STRING_ENUM_PROP 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/STRING_ENUM_PROP/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

StringEnumPropsNativeComponentProps::StringEnumPropsNativeComponentProps(
    const PropsParserContext &context,
    const StringEnumPropsNativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    alignment(convertRawProp(context, rawProps, \\"alignment\\", sourceProps.alignment, {StringEnumPropsNativeComponentAlignment::Center})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName StringEnumPropsNativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"StringEnumPropsNativeComponent\\";
}

folly::dynamic StringEnumPropsNativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = StringEnumPropsNativeComponentProps();
  const StringEnumPropsNativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const StringEnumPropsNativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (alignment != oldProps->alignment) {
    result[\\"alignment\\"] = toDynamic(alignment);
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture STRING_PROP 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/STRING_PROP/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

StringPropComponentProps::StringPropComponentProps(
    const PropsParserContext &context,
    const StringPropComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    accessibilityHint(convertRawProp(context, rawProps, \\"accessibilityHint\\", sourceProps.accessibilityHint, {\\"\\"})),
    accessibilityRole(convertRawProp(context, rawProps, \\"accessibilityRole\\", sourceProps.accessibilityRole, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName StringPropComponentProps::getDiffPropsImplementationTarget() const {
  return \\"StringPropComponent\\";
}

folly::dynamic StringPropComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = StringPropComponentProps();
  const StringPropComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const StringPropComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (accessibilityHint != oldProps->accessibilityHint) {
    result[\\"accessibilityHint\\"] = accessibilityHint;
  }
    
  if (accessibilityRole != oldProps->accessibilityRole) {
    result[\\"accessibilityRole\\"] = accessibilityRole;
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture TWO_COMPONENTS_DIFFERENT_FILES 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/TWO_COMPONENTS_DIFFERENT_FILES/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

MultiFile1NativeComponentProps::MultiFile1NativeComponentProps(
    const PropsParserContext &context,
    const MultiFile1NativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    disabled(convertRawProp(context, rawProps, \\"disabled\\", sourceProps.disabled, {false})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName MultiFile1NativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"MultiFile1NativeComponent\\";
}

folly::dynamic MultiFile1NativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = MultiFile1NativeComponentProps();
  const MultiFile1NativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const MultiFile1NativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (disabled != oldProps->disabled) {
    result[\\"disabled\\"] = disabled;
  }
  return result;
}
#endif
MultiFile2NativeComponentProps::MultiFile2NativeComponentProps(
    const PropsParserContext &context,
    const MultiFile2NativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    disabled(convertRawProp(context, rawProps, \\"disabled\\", sourceProps.disabled, {true})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName MultiFile2NativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"MultiFile2NativeComponent\\";
}

folly::dynamic MultiFile2NativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = MultiFile2NativeComponentProps();
  const MultiFile2NativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const MultiFile2NativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (disabled != oldProps->disabled) {
    result[\\"disabled\\"] = disabled;
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsCpp can generate fixture TWO_COMPONENTS_SAME_FILE 1`] = `
Map {
  "Props.cpp" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/TWO_COMPONENTS_SAME_FILE/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

MultiComponent1NativeComponentProps::MultiComponent1NativeComponentProps(
    const PropsParserContext &context,
    const MultiComponent1NativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    disabled(convertRawProp(context, rawProps, \\"disabled\\", sourceProps.disabled, {false})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName MultiComponent1NativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"MultiComponent1NativeComponent\\";
}

folly::dynamic MultiComponent1NativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = MultiComponent1NativeComponentProps();
  const MultiComponent1NativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const MultiComponent1NativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (disabled != oldProps->disabled) {
    result[\\"disabled\\"] = disabled;
  }
  return result;
}
#endif
MultiComponent2NativeComponentProps::MultiComponent2NativeComponentProps(
    const PropsParserContext &context,
    const MultiComponent2NativeComponentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    disabled(convertRawProp(context, rawProps, \\"disabled\\", sourceProps.disabled, {true})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName MultiComponent2NativeComponentProps::getDiffPropsImplementationTarget() const {
  return \\"MultiComponent2NativeComponent\\";
}

folly::dynamic MultiComponent2NativeComponentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = MultiComponent2NativeComponentProps();
  const MultiComponent2NativeComponentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const MultiComponent2NativeComponentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (disabled != oldProps->disabled) {
    result[\\"disabled\\"] = disabled;
  }
  return result;
}
#endif

} // namespace facebook::react
",
}
`;
