// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GeneratePropsH can generate fixture ARRAY_PROPS 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <cinttypes>
#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>
#include <react/renderer/graphics/Color.h>
#include <react/renderer/graphics/Point.h>
#include <react/renderer/imagemanager/primitives.h>
#include <vector>
#include <yoga/Yoga.h>

namespace facebook::react {

using ArrayPropsNativeComponentSizesMask = uint32_t;

struct ArrayPropsNativeComponentSizesMaskWrapped {
  ArrayPropsNativeComponentSizesMask value;
};

enum class ArrayPropsNativeComponentSizes: ArrayPropsNativeComponentSizesMask {
  Small = 1 << 0,
  Large = 1 << 1
};

constexpr bool operator&(
  ArrayPropsNativeComponentSizesMask const lhs,
  enum ArrayPropsNativeComponentSizes const rhs) {
  return lhs & static_cast<ArrayPropsNativeComponentSizesMask>(rhs);
}

constexpr ArrayPropsNativeComponentSizesMask operator|(
  ArrayPropsNativeComponentSizesMask const lhs,
  enum ArrayPropsNativeComponentSizes const rhs) {
  return lhs | static_cast<ArrayPropsNativeComponentSizesMask>(rhs);
}

constexpr void operator|=(
  ArrayPropsNativeComponentSizesMask &lhs,
  enum ArrayPropsNativeComponentSizes const rhs) {
  lhs = lhs | static_cast<ArrayPropsNativeComponentSizesMask>(rhs);
}

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ArrayPropsNativeComponentSizesMaskWrapped &wrapped) {
  auto items = std::vector<std::string>{value};
  for (const auto &item : items) {
    if (item == \\"small\\") {
      wrapped.value |= ArrayPropsNativeComponentSizes::Small;
      continue;
    }
    if (item == \\"large\\") {
      wrapped.value |= ArrayPropsNativeComponentSizes::Large;
      continue;
    }
    abort();
  }
}

static inline std::string toString(const ArrayPropsNativeComponentSizesMaskWrapped &wrapped) {
    auto result = std::string{};
    auto separator = std::string{\\", \\"};

    if (wrapped.value & ArrayPropsNativeComponentSizes::Small) {
      result += \\"small\\" + separator;
    }
    if (wrapped.value & ArrayPropsNativeComponentSizes::Large) {
      result += \\"large\\" + separator;
    }
    if (!result.empty()) {
      result.erase(result.length() - separator.length());
    }
    return result;
}
struct ArrayPropsNativeComponentObjectStruct {
  std::string stringProp{\\"\\"};
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ArrayPropsNativeComponentObjectStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_stringProp = map.find(\\"stringProp\\");
  if (tmp_stringProp != map.end()) {
    fromRawValue(context, tmp_stringProp->second, result.stringProp);
  }
}

static inline std::string toString(const ArrayPropsNativeComponentObjectStruct &value) {
  return \\"[Object ArrayPropsNativeComponentObjectStruct]\\";
}

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<ArrayPropsNativeComponentObjectStruct> &result) {
  auto items = (std::vector<RawValue>)value;
  for (const auto &item : items) {
    ArrayPropsNativeComponentObjectStruct newItem;
    fromRawValue(context, item, newItem);
    result.emplace_back(newItem);
  }
}


struct ArrayPropsNativeComponentArrayObjectStruct {
  std::string stringProp{\\"\\"};
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ArrayPropsNativeComponentArrayObjectStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_stringProp = map.find(\\"stringProp\\");
  if (tmp_stringProp != map.end()) {
    fromRawValue(context, tmp_stringProp->second, result.stringProp);
  }
}

static inline std::string toString(const ArrayPropsNativeComponentArrayObjectStruct &value) {
  return \\"[Object ArrayPropsNativeComponentArrayObjectStruct]\\";
}

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<ArrayPropsNativeComponentArrayObjectStruct> &result) {
  auto items = (std::vector<RawValue>)value;
  for (const auto &item : items) {
    ArrayPropsNativeComponentArrayObjectStruct newItem;
    fromRawValue(context, item, newItem);
    result.emplace_back(newItem);
  }
}


struct ArrayPropsNativeComponentArrayStruct {
  std::vector<ArrayPropsNativeComponentArrayObjectStruct> object{};
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ArrayPropsNativeComponentArrayStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_object = map.find(\\"object\\");
  if (tmp_object != map.end()) {
    fromRawValue(context, tmp_object->second, result.object);
  }
}

static inline std::string toString(const ArrayPropsNativeComponentArrayStruct &value) {
  return \\"[Object ArrayPropsNativeComponentArrayStruct]\\";
}

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<ArrayPropsNativeComponentArrayStruct> &result) {
  auto items = (std::vector<RawValue>)value;
  for (const auto &item : items) {
    ArrayPropsNativeComponentArrayStruct newItem;
    fromRawValue(context, item, newItem);
    result.emplace_back(newItem);
  }
}


struct ArrayPropsNativeComponentArrayOfArrayOfObjectStruct {
  std::string stringProp{\\"\\"};
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ArrayPropsNativeComponentArrayOfArrayOfObjectStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_stringProp = map.find(\\"stringProp\\");
  if (tmp_stringProp != map.end()) {
    fromRawValue(context, tmp_stringProp->second, result.stringProp);
  }
}

static inline std::string toString(const ArrayPropsNativeComponentArrayOfArrayOfObjectStruct &value) {
  return \\"[Object ArrayPropsNativeComponentArrayOfArrayOfObjectStruct]\\";
}

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<std::vector<ArrayPropsNativeComponentArrayOfArrayOfObjectStruct>> &result) {
  auto items = (std::vector<std::vector<RawValue>>)value;
  for (const std::vector<RawValue> &item : items) {
    auto nestedArray = std::vector<ArrayPropsNativeComponentArrayOfArrayOfObjectStruct>{};
    for (const RawValue &nestedItem : item) {
      ArrayPropsNativeComponentArrayOfArrayOfObjectStruct newItem;
      fromRawValue(context, nestedItem, newItem);
      nestedArray.emplace_back(newItem);
    }
    result.emplace_back(nestedArray);
  }
}

class ArrayPropsNativeComponentProps final : public ViewProps {
 public:
  ArrayPropsNativeComponentProps() = default;
  ArrayPropsNativeComponentProps(const PropsParserContext& context, const ArrayPropsNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::vector<std::string> names{};
  std::vector<bool> disableds{};
  std::vector<int> progress{};
  std::vector<Float> radii{};
  std::vector<SharedColor> colors{};
  std::vector<ImageSource> srcs{};
  std::vector<Point> points{};
  std::vector<YGValue> dimensions{};
  ArrayPropsNativeComponentSizesMask sizes{static_cast<ArrayPropsNativeComponentSizesMask>(ArrayPropsNativeComponentSizes::Small)};
  std::vector<ArrayPropsNativeComponentObjectStruct> object{};
  std::vector<ArrayPropsNativeComponentArrayStruct> array{};
  std::vector<std::vector<ArrayPropsNativeComponentArrayOfArrayOfObjectStruct>> arrayOfArrayOfObject{};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture ARRAY_PROPS_WITH_NESTED_OBJECT 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/image/conversions.h>
#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>
#include <react/renderer/graphics/Color.h>
#include <react/renderer/graphics/Point.h>
#include <react/renderer/imagemanager/primitives.h>
#include <vector>

namespace facebook::react {

struct ArrayPropsNativeComponentNativePrimitivesStruct {
  std::vector<SharedColor> colors{};
  std::vector<ImageSource> srcs{};
  std::vector<Point> points{};
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ArrayPropsNativeComponentNativePrimitivesStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_colors = map.find(\\"colors\\");
  if (tmp_colors != map.end()) {
    fromRawValue(context, tmp_colors->second, result.colors);
  }
  auto tmp_srcs = map.find(\\"srcs\\");
  if (tmp_srcs != map.end()) {
    fromRawValue(context, tmp_srcs->second, result.srcs);
  }
  auto tmp_points = map.find(\\"points\\");
  if (tmp_points != map.end()) {
    fromRawValue(context, tmp_points->second, result.points);
  }
}

static inline std::string toString(const ArrayPropsNativeComponentNativePrimitivesStruct &value) {
  return \\"[Object ArrayPropsNativeComponentNativePrimitivesStruct]\\";
}

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<ArrayPropsNativeComponentNativePrimitivesStruct> &result) {
  auto items = (std::vector<RawValue>)value;
  for (const auto &item : items) {
    ArrayPropsNativeComponentNativePrimitivesStruct newItem;
    fromRawValue(context, item, newItem);
    result.emplace_back(newItem);
  }
}

class ArrayPropsNativeComponentProps final : public ViewProps {
 public:
  ArrayPropsNativeComponentProps() = default;
  ArrayPropsNativeComponentProps(const PropsParserContext& context, const ArrayPropsNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::vector<ArrayPropsNativeComponentNativePrimitivesStruct> nativePrimitives{};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture BOOLEAN_PROP 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class BooleanPropNativeComponentProps final : public ViewProps {
 public:
  BooleanPropNativeComponentProps() = default;
  BooleanPropNativeComponentProps(const PropsParserContext& context, const BooleanPropNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  bool disabled{false};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture COLOR_PROP 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/graphics/Color.h>

namespace facebook::react {

class ColorPropNativeComponentProps final : public ViewProps {
 public:
  ColorPropNativeComponentProps() = default;
  ColorPropNativeComponentProps(const PropsParserContext& context, const ColorPropNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  SharedColor tintColor{};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture COMMANDS 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class CommandNativeComponentProps final : public ViewProps {
 public:
  CommandNativeComponentProps() = default;
  CommandNativeComponentProps(const PropsParserContext& context, const CommandNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture COMMANDS_AND_PROPS 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class CommandNativeComponentProps final : public ViewProps {
 public:
  CommandNativeComponentProps() = default;
  CommandNativeComponentProps(const PropsParserContext& context, const CommandNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::string accessibilityHint{\\"\\"};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture DIMENSION_PROP 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <yoga/Yoga.h>

namespace facebook::react {

class DimensionPropNativeComponentProps final : public ViewProps {
 public:
  DimensionPropNativeComponentProps() = default;
  DimensionPropNativeComponentProps(const PropsParserContext& context, const DimensionPropNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  YGValue marginBack{};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture DOUBLE_PROPS 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class DoublePropNativeComponentProps final : public ViewProps {
 public:
  DoublePropNativeComponentProps() = default;
  DoublePropNativeComponentProps(const PropsParserContext& context, const DoublePropNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  double blurRadius{0.0};
  double blurRadius2{0.001};
  double blurRadius3{2.1};
  double blurRadius4{0.0};
  double blurRadius5{1.0};
  double blurRadius6{0.0};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture EVENT_NESTED_OBJECT_PROPS 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class EventsNestedObjectNativeComponentProps final : public ViewProps {
 public:
  EventsNestedObjectNativeComponentProps() = default;
  EventsNestedObjectNativeComponentProps(const PropsParserContext& context, const EventsNestedObjectNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  bool disabled{false};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture EVENT_PROPS 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class EventsNativeComponentProps final : public ViewProps {
 public:
  EventsNativeComponentProps() = default;
  EventsNativeComponentProps(const PropsParserContext& context, const EventsNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  bool disabled{false};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture EVENTS_WITH_PAPER_NAME 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class InterfaceOnlyComponentProps final : public ViewProps {
 public:
  InterfaceOnlyComponentProps() = default;
  InterfaceOnlyComponentProps(const PropsParserContext& context, const InterfaceOnlyComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture EXCLUDE_ANDROID 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class ExcludedAndroidComponentProps final : public ViewProps {
 public:
  ExcludedAndroidComponentProps() = default;
  ExcludedAndroidComponentProps(const PropsParserContext& context, const ExcludedAndroidComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture EXCLUDE_ANDROID_IOS 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class ExcludedAndroidIosComponentProps final : public ViewProps {
 public:
  ExcludedAndroidIosComponentProps() = default;
  ExcludedAndroidIosComponentProps(const PropsParserContext& context, const ExcludedAndroidIosComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture EXCLUDE_IOS_TWO_COMPONENTS_DIFFERENT_FILES 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class ExcludedIosComponentProps final : public ViewProps {
 public:
  ExcludedIosComponentProps() = default;
  ExcludedIosComponentProps(const PropsParserContext& context, const ExcludedIosComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  
};

class MultiFileIncludedNativeComponentProps final : public ViewProps {
 public:
  MultiFileIncludedNativeComponentProps() = default;
  MultiFileIncludedNativeComponentProps(const PropsParserContext& context, const MultiFileIncludedNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  bool disabled{true};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture FLOAT_PROPS 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class FloatPropNativeComponentProps final : public ViewProps {
 public:
  FloatPropNativeComponentProps() = default;
  FloatPropNativeComponentProps(const PropsParserContext& context, const FloatPropNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  Float blurRadius{0.0};
  Float blurRadius2{0.001};
  Float blurRadius3{2.1};
  Float blurRadius4{0.0};
  Float blurRadius5{1.0};
  Float blurRadius6{0.0};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture IMAGE_PROP 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/imagemanager/primitives.h>

namespace facebook::react {

class ImagePropNativeComponentProps final : public ViewProps {
 public:
  ImagePropNativeComponentProps() = default;
  ImagePropNativeComponentProps(const PropsParserContext& context, const ImagePropNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  ImageSource thumbImage{};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture INSETS_PROP 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/graphics/RectangleEdges.h>

namespace facebook::react {

class InsetsPropNativeComponentProps final : public ViewProps {
 public:
  InsetsPropNativeComponentProps() = default;
  InsetsPropNativeComponentProps(const PropsParserContext& context, const InsetsPropNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  EdgeInsets contentInset{};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture INT32_ENUM_PROP 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

enum class Int32EnumPropsNativeComponentMaxInterval { MaxInterval0 = 0, MaxInterval1 = 1, MaxInterval2 = 2 };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, Int32EnumPropsNativeComponentMaxInterval &result) {
  assert(value.hasType<int>());
  auto integerValue = (int)value;
  switch (integerValue) {
    case 0:
      result = Int32EnumPropsNativeComponentMaxInterval::MaxInterval0;
      return;
    case 1:
      result = Int32EnumPropsNativeComponentMaxInterval::MaxInterval1;
      return;
    case 2:
      result = Int32EnumPropsNativeComponentMaxInterval::MaxInterval2;
      return;
  }
  abort();
}

static inline std::string toString(const Int32EnumPropsNativeComponentMaxInterval &value) {
  switch (value) {
    case Int32EnumPropsNativeComponentMaxInterval::MaxInterval0: return \\"0\\";
    case Int32EnumPropsNativeComponentMaxInterval::MaxInterval1: return \\"1\\";
    case Int32EnumPropsNativeComponentMaxInterval::MaxInterval2: return \\"2\\";
  }
}

class Int32EnumPropsNativeComponentProps final : public ViewProps {
 public:
  Int32EnumPropsNativeComponentProps() = default;
  Int32EnumPropsNativeComponentProps(const PropsParserContext& context, const Int32EnumPropsNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  Int32EnumPropsNativeComponentMaxInterval maxInterval{Int32EnumPropsNativeComponentMaxInterval::MaxInterval0};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture INTEGER_PROPS 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class IntegerPropNativeComponentProps final : public ViewProps {
 public:
  IntegerPropNativeComponentProps() = default;
  IntegerPropNativeComponentProps(const PropsParserContext& context, const IntegerPropNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  int progress1{0};
  int progress2{-1};
  int progress3{10};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture INTERFACE_ONLY 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class InterfaceOnlyComponentProps final : public ViewProps {
 public:
  InterfaceOnlyComponentProps() = default;
  InterfaceOnlyComponentProps(const PropsParserContext& context, const InterfaceOnlyComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::string accessibilityHint{\\"\\"};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture MIXED_PROP 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class MixedPropNativeComponentProps final : public ViewProps {
 public:
  MixedPropNativeComponentProps() = default;
  MixedPropNativeComponentProps(const PropsParserContext& context, const MixedPropNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic mixedProp{};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture MULTI_NATIVE_PROP 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/graphics/Color.h>
#include <react/renderer/graphics/Point.h>
#include <react/renderer/imagemanager/primitives.h>

namespace facebook::react {

class ImageColorPropNativeComponentProps final : public ViewProps {
 public:
  ImageColorPropNativeComponentProps() = default;
  ImageColorPropNativeComponentProps(const PropsParserContext& context, const ImageColorPropNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  ImageSource thumbImage{};
  SharedColor color{};
  SharedColor thumbTintColor{};
  Point point{};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture NO_PROPS_NO_EVENTS 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class NoPropsNoEventsComponentProps final : public ViewProps {
 public:
  NoPropsNoEventsComponentProps() = default;
  NoPropsNoEventsComponentProps(const PropsParserContext& context, const NoPropsNoEventsComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture OBJECT_PROPS 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/image/conversions.h>
#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>
#include <react/renderer/graphics/Color.h>
#include <react/renderer/graphics/Point.h>
#include <react/renderer/imagemanager/primitives.h>
#include <vector>

namespace facebook::react {

enum class ObjectPropsStringEnumProp { Option1 };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsStringEnumProp &result) {
  auto string = (std::string)value;
  if (string == \\"option1\\") { result = ObjectPropsStringEnumProp::Option1; return; }
  abort();
}

static inline std::string toString(const ObjectPropsStringEnumProp &value) {
  switch (value) {
    case ObjectPropsStringEnumProp::Option1: return \\"option1\\";
  }
}
enum class ObjectPropsIntEnumProp { IntEnumProp0 = 0 };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsIntEnumProp &result) {
  assert(value.hasType<int>());
  auto integerValue = (int)value;
  switch (integerValue) {
    case 0:
      result = ObjectPropsIntEnumProp::IntEnumProp0;
      return;
  }
  abort();
}

static inline std::string toString(const ObjectPropsIntEnumProp &value) {
  switch (value) {
    case ObjectPropsIntEnumProp::IntEnumProp0: return \\"0\\";
  }
}
struct ObjectPropsObjectPropObjectArrayPropStruct {
  std::vector<std::string> array{};
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsObjectPropObjectArrayPropStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_array = map.find(\\"array\\");
  if (tmp_array != map.end()) {
    fromRawValue(context, tmp_array->second, result.array);
  }
}

static inline std::string toString(const ObjectPropsObjectPropObjectArrayPropStruct &value) {
  return \\"[Object ObjectPropsObjectPropObjectArrayPropStruct]\\";
}

struct ObjectPropsObjectPropObjectPrimitiveRequiredPropStruct {
  ImageSource image{};
  SharedColor color{};
  Point point{};
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsObjectPropObjectPrimitiveRequiredPropStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_image = map.find(\\"image\\");
  if (tmp_image != map.end()) {
    fromRawValue(context, tmp_image->second, result.image);
  }
  auto tmp_color = map.find(\\"color\\");
  if (tmp_color != map.end()) {
    fromRawValue(context, tmp_color->second, result.color);
  }
  auto tmp_point = map.find(\\"point\\");
  if (tmp_point != map.end()) {
    fromRawValue(context, tmp_point->second, result.point);
  }
}

static inline std::string toString(const ObjectPropsObjectPropObjectPrimitiveRequiredPropStruct &value) {
  return \\"[Object ObjectPropsObjectPropObjectPrimitiveRequiredPropStruct]\\";
}

struct ObjectPropsObjectPropNestedPropANestedPropBStruct {
  std::string nestedPropC{\\"\\"};
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsObjectPropNestedPropANestedPropBStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_nestedPropC = map.find(\\"nestedPropC\\");
  if (tmp_nestedPropC != map.end()) {
    fromRawValue(context, tmp_nestedPropC->second, result.nestedPropC);
  }
}

static inline std::string toString(const ObjectPropsObjectPropNestedPropANestedPropBStruct &value) {
  return \\"[Object ObjectPropsObjectPropNestedPropANestedPropBStruct]\\";
}

struct ObjectPropsObjectPropNestedPropAStruct {
  ObjectPropsObjectPropNestedPropANestedPropBStruct nestedPropB{};
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsObjectPropNestedPropAStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_nestedPropB = map.find(\\"nestedPropB\\");
  if (tmp_nestedPropB != map.end()) {
    fromRawValue(context, tmp_nestedPropB->second, result.nestedPropB);
  }
}

static inline std::string toString(const ObjectPropsObjectPropNestedPropAStruct &value) {
  return \\"[Object ObjectPropsObjectPropNestedPropAStruct]\\";
}

struct ObjectPropsObjectPropNestedArrayAsPropertyArrayPropStruct {
  std::string stringProp{\\"\\"};
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsObjectPropNestedArrayAsPropertyArrayPropStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_stringProp = map.find(\\"stringProp\\");
  if (tmp_stringProp != map.end()) {
    fromRawValue(context, tmp_stringProp->second, result.stringProp);
  }
}

static inline std::string toString(const ObjectPropsObjectPropNestedArrayAsPropertyArrayPropStruct &value) {
  return \\"[Object ObjectPropsObjectPropNestedArrayAsPropertyArrayPropStruct]\\";
}

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<ObjectPropsObjectPropNestedArrayAsPropertyArrayPropStruct> &result) {
  auto items = (std::vector<RawValue>)value;
  for (const auto &item : items) {
    ObjectPropsObjectPropNestedArrayAsPropertyArrayPropStruct newItem;
    fromRawValue(context, item, newItem);
    result.emplace_back(newItem);
  }
}


struct ObjectPropsObjectPropNestedArrayAsPropertyStruct {
  std::vector<ObjectPropsObjectPropNestedArrayAsPropertyArrayPropStruct> arrayProp{};
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsObjectPropNestedArrayAsPropertyStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_arrayProp = map.find(\\"arrayProp\\");
  if (tmp_arrayProp != map.end()) {
    fromRawValue(context, tmp_arrayProp->second, result.arrayProp);
  }
}

static inline std::string toString(const ObjectPropsObjectPropNestedArrayAsPropertyStruct &value) {
  return \\"[Object ObjectPropsObjectPropNestedArrayAsPropertyStruct]\\";
}

struct ObjectPropsObjectPropStruct {
  std::string stringProp{\\"\\"};
  bool booleanProp{false};
  Float floatProp{0.0};
  int intProp{0};
  std::string stringUserDefaultProp{\\"user_default\\"};
  bool booleanUserDefaultProp{true};
  Float floatUserDefaultProp{3.14};
  int intUserDefaultProp{9999};
  ObjectPropsStringEnumProp stringEnumProp{ObjectPropsStringEnumProp::Option1};
  ObjectPropsIntEnumProp intEnumProp{ObjectPropsIntEnumProp::IntEnumProp0};
  ObjectPropsObjectPropObjectArrayPropStruct objectArrayProp{};
  ObjectPropsObjectPropObjectPrimitiveRequiredPropStruct objectPrimitiveRequiredProp{};
  ObjectPropsObjectPropNestedPropAStruct nestedPropA{};
  ObjectPropsObjectPropNestedArrayAsPropertyStruct nestedArrayAsProperty{};
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsObjectPropStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_stringProp = map.find(\\"stringProp\\");
  if (tmp_stringProp != map.end()) {
    fromRawValue(context, tmp_stringProp->second, result.stringProp);
  }
  auto tmp_booleanProp = map.find(\\"booleanProp\\");
  if (tmp_booleanProp != map.end()) {
    fromRawValue(context, tmp_booleanProp->second, result.booleanProp);
  }
  auto tmp_floatProp = map.find(\\"floatProp\\");
  if (tmp_floatProp != map.end()) {
    fromRawValue(context, tmp_floatProp->second, result.floatProp);
  }
  auto tmp_intProp = map.find(\\"intProp\\");
  if (tmp_intProp != map.end()) {
    fromRawValue(context, tmp_intProp->second, result.intProp);
  }
  auto tmp_stringUserDefaultProp = map.find(\\"stringUserDefaultProp\\");
  if (tmp_stringUserDefaultProp != map.end()) {
    fromRawValue(context, tmp_stringUserDefaultProp->second, result.stringUserDefaultProp);
  }
  auto tmp_booleanUserDefaultProp = map.find(\\"booleanUserDefaultProp\\");
  if (tmp_booleanUserDefaultProp != map.end()) {
    fromRawValue(context, tmp_booleanUserDefaultProp->second, result.booleanUserDefaultProp);
  }
  auto tmp_floatUserDefaultProp = map.find(\\"floatUserDefaultProp\\");
  if (tmp_floatUserDefaultProp != map.end()) {
    fromRawValue(context, tmp_floatUserDefaultProp->second, result.floatUserDefaultProp);
  }
  auto tmp_intUserDefaultProp = map.find(\\"intUserDefaultProp\\");
  if (tmp_intUserDefaultProp != map.end()) {
    fromRawValue(context, tmp_intUserDefaultProp->second, result.intUserDefaultProp);
  }
  auto tmp_stringEnumProp = map.find(\\"stringEnumProp\\");
  if (tmp_stringEnumProp != map.end()) {
    fromRawValue(context, tmp_stringEnumProp->second, result.stringEnumProp);
  }
  auto tmp_intEnumProp = map.find(\\"intEnumProp\\");
  if (tmp_intEnumProp != map.end()) {
    fromRawValue(context, tmp_intEnumProp->second, result.intEnumProp);
  }
  auto tmp_objectArrayProp = map.find(\\"objectArrayProp\\");
  if (tmp_objectArrayProp != map.end()) {
    fromRawValue(context, tmp_objectArrayProp->second, result.objectArrayProp);
  }
  auto tmp_objectPrimitiveRequiredProp = map.find(\\"objectPrimitiveRequiredProp\\");
  if (tmp_objectPrimitiveRequiredProp != map.end()) {
    fromRawValue(context, tmp_objectPrimitiveRequiredProp->second, result.objectPrimitiveRequiredProp);
  }
  auto tmp_nestedPropA = map.find(\\"nestedPropA\\");
  if (tmp_nestedPropA != map.end()) {
    fromRawValue(context, tmp_nestedPropA->second, result.nestedPropA);
  }
  auto tmp_nestedArrayAsProperty = map.find(\\"nestedArrayAsProperty\\");
  if (tmp_nestedArrayAsProperty != map.end()) {
    fromRawValue(context, tmp_nestedArrayAsProperty->second, result.nestedArrayAsProperty);
  }
}

static inline std::string toString(const ObjectPropsObjectPropStruct &value) {
  return \\"[Object ObjectPropsObjectPropStruct]\\";
}
class ObjectPropsProps final : public ViewProps {
 public:
  ObjectPropsProps() = default;
  ObjectPropsProps(const PropsParserContext& context, const ObjectPropsProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  ObjectPropsObjectPropStruct objectProp{};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture POINT_PROP 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/graphics/Point.h>

namespace facebook::react {

class PointPropNativeComponentProps final : public ViewProps {
 public:
  PointPropNativeComponentProps() = default;
  PointPropNativeComponentProps(const PropsParserContext& context, const PointPropNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  Point startPoint{};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture STRING_ENUM_PROP 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

enum class StringEnumPropsNativeComponentAlignment { Top, Center, BottomRight };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, StringEnumPropsNativeComponentAlignment &result) {
  auto string = (std::string)value;
  if (string == \\"top\\") { result = StringEnumPropsNativeComponentAlignment::Top; return; }
  if (string == \\"center\\") { result = StringEnumPropsNativeComponentAlignment::Center; return; }
  if (string == \\"bottom-right\\") { result = StringEnumPropsNativeComponentAlignment::BottomRight; return; }
  abort();
}

static inline std::string toString(const StringEnumPropsNativeComponentAlignment &value) {
  switch (value) {
    case StringEnumPropsNativeComponentAlignment::Top: return \\"top\\";
    case StringEnumPropsNativeComponentAlignment::Center: return \\"center\\";
    case StringEnumPropsNativeComponentAlignment::BottomRight: return \\"bottom-right\\";
  }
}

class StringEnumPropsNativeComponentProps final : public ViewProps {
 public:
  StringEnumPropsNativeComponentProps() = default;
  StringEnumPropsNativeComponentProps(const PropsParserContext& context, const StringEnumPropsNativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  StringEnumPropsNativeComponentAlignment alignment{StringEnumPropsNativeComponentAlignment::Center};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture STRING_PROP 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class StringPropComponentProps final : public ViewProps {
 public:
  StringPropComponentProps() = default;
  StringPropComponentProps(const PropsParserContext& context, const StringPropComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::string accessibilityHint{\\"\\"};
  std::string accessibilityRole{};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture TWO_COMPONENTS_DIFFERENT_FILES 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class MultiFile1NativeComponentProps final : public ViewProps {
 public:
  MultiFile1NativeComponentProps() = default;
  MultiFile1NativeComponentProps(const PropsParserContext& context, const MultiFile1NativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  bool disabled{false};
};

class MultiFile2NativeComponentProps final : public ViewProps {
 public:
  MultiFile2NativeComponentProps() = default;
  MultiFile2NativeComponentProps(const PropsParserContext& context, const MultiFile2NativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  bool disabled{true};
};

} // namespace facebook::react
",
}
`;

exports[`GeneratePropsH can generate fixture TWO_COMPONENTS_SAME_FILE 1`] = `
Map {
  "Props.h" => "
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class MultiComponent1NativeComponentProps final : public ViewProps {
 public:
  MultiComponent1NativeComponentProps() = default;
  MultiComponent1NativeComponentProps(const PropsParserContext& context, const MultiComponent1NativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  bool disabled{false};
};

class MultiComponent2NativeComponentProps final : public ViewProps {
 public:
  MultiComponent2NativeComponentProps() = default;
  MultiComponent2NativeComponentProps(const PropsParserContext& context, const MultiComponent2NativeComponentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  bool disabled{true};
};

} // namespace facebook::react
",
}
`;
