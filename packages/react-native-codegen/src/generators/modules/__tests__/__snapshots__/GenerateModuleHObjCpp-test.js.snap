// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GenerateModuleHObjCpp can generate fixture SampleWithUppercaseName 1`] = `
Map {
  "SampleWithUppercaseName.h" => "/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of SampleWithUppercaseName symbols
#ifndef SampleWithUppercaseName_H
#define SampleWithUppercaseName_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>


@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>



@end

@interface NativeSampleTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModule'
   */
  class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

#endif // SampleWithUppercaseName_H
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture complex_objects 1`] = `
Map {
  "complex_objects.h" => "/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of complex_objects symbols
#ifndef complex_objects_H
#define complex_objects_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>

namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecDifficultAE {
      bool D() const;
      double E() const;
      NSString *F() const;
      double id_() const;

      SpecDifficultAE(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecDifficultAE)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecDifficultAE:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecDifficultA {
      bool D() const;
      JS::NativeSampleTurboModule::SpecDifficultAE E() const;
      NSString *F() const;

      SpecDifficultA(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecDifficultA)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecDifficultA:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecOptionalsAOptionalObjectProperty {
      double x() const;
      double y() const;

      SpecOptionalsAOptionalObjectProperty(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecOptionalsAOptionalObjectProperty)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecOptionalsAOptionalObjectProperty:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecOptionalsA {
      std::optional<double> optionalNumberProperty() const;
      std::optional<facebook::react::LazyVector<double>> optionalArrayProperty() const;
      std::optional<JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty> optionalObjectProperty() const;
      id<NSObject> _Nullable optionalGenericObjectProperty() const;
      std::optional<bool> optionalBooleanTypeProperty() const;

      SpecOptionalsA(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecOptionalsA)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecOptionalsA:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecGetArraysOptionsArrayOfObjectsElement {
      double numberProperty() const;

      SpecGetArraysOptionsArrayOfObjectsElement(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecGetArraysOptionsArrayOfObjectsElement)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecGetArraysOptionsArrayOfObjectsElement:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecGetArraysOptions {
      facebook::react::LazyVector<double> arrayOfNumbers() const;
      std::optional<facebook::react::LazyVector<double>> optionalArrayOfNumbers() const;
      facebook::react::LazyVector<NSString *> arrayOfStrings() const;
      std::optional<facebook::react::LazyVector<NSString *>> optionalArrayOfStrings() const;
      facebook::react::LazyVector<JS::NativeSampleTurboModule::SpecGetArraysOptionsArrayOfObjectsElement> arrayOfObjects() const;

      SpecGetArraysOptions(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecGetArraysOptions)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecGetArraysOptions:(id)json;
@end
@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSDictionary *)difficult:(JS::NativeSampleTurboModule::SpecDifficultA &)A;
- (void)optionals:(JS::NativeSampleTurboModule::SpecOptionalsA &)A;
- (void)optionalMethod:(NSDictionary *)options
              callback:(RCTResponseSenderBlock)callback
                extras:(NSArray *)extras;
- (void)getArrays:(JS::NativeSampleTurboModule::SpecGetArraysOptions &)options;
- (NSDictionary * _Nullable)getNullableObject;
- (NSDictionary * _Nullable)getNullableGenericObject;
- (NSArray<id<NSObject>> * _Nullable)getNullableArray;

@end

@interface NativeSampleTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModule'
   */
  class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
inline bool JS::NativeSampleTurboModule::SpecDifficultAE::D() const
{
  id const p = _v[@\\"D\\"];
  return RCTBridgingToBool(p);
}
inline double JS::NativeSampleTurboModule::SpecDifficultAE::E() const
{
  id const p = _v[@\\"E\\"];
  return RCTBridgingToDouble(p);
}
inline NSString *JS::NativeSampleTurboModule::SpecDifficultAE::F() const
{
  id const p = _v[@\\"F\\"];
  return RCTBridgingToString(p);
}
inline double JS::NativeSampleTurboModule::SpecDifficultAE::id_() const
{
  id const p = _v[@\\"id\\"];
  return RCTBridgingToDouble(p);
}
inline bool JS::NativeSampleTurboModule::SpecDifficultA::D() const
{
  id const p = _v[@\\"D\\"];
  return RCTBridgingToBool(p);
}
inline JS::NativeSampleTurboModule::SpecDifficultAE JS::NativeSampleTurboModule::SpecDifficultA::E() const
{
  id const p = _v[@\\"E\\"];
  return JS::NativeSampleTurboModule::SpecDifficultAE(p);
}
inline NSString *JS::NativeSampleTurboModule::SpecDifficultA::F() const
{
  id const p = _v[@\\"F\\"];
  return RCTBridgingToString(p);
}
inline double JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty::x() const
{
  id const p = _v[@\\"x\\"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty::y() const
{
  id const p = _v[@\\"y\\"];
  return RCTBridgingToDouble(p);
}
inline std::optional<double> JS::NativeSampleTurboModule::SpecOptionalsA::optionalNumberProperty() const
{
  id const p = _v[@\\"optionalNumberProperty\\"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<facebook::react::LazyVector<double>> JS::NativeSampleTurboModule::SpecOptionalsA::optionalArrayProperty() const
{
  id const p = _v[@\\"optionalArrayProperty\\"];
  return RCTBridgingToOptionalVec(p, ^double(id itemValue_0) { return RCTBridgingToDouble(itemValue_0); });
}
inline std::optional<JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty> JS::NativeSampleTurboModule::SpecOptionalsA::optionalObjectProperty() const
{
  id const p = _v[@\\"optionalObjectProperty\\"];
  return (p == nil ? std::nullopt : std::make_optional(JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty(p)));
}
inline id<NSObject> _Nullable JS::NativeSampleTurboModule::SpecOptionalsA::optionalGenericObjectProperty() const
{
  id const p = _v[@\\"optionalGenericObjectProperty\\"];
  return p;
}
inline std::optional<bool> JS::NativeSampleTurboModule::SpecOptionalsA::optionalBooleanTypeProperty() const
{
  id const p = _v[@\\"optionalBooleanTypeProperty\\"];
  return RCTBridgingToOptionalBool(p);
}
inline double JS::NativeSampleTurboModule::SpecGetArraysOptionsArrayOfObjectsElement::numberProperty() const
{
  id const p = _v[@\\"numberProperty\\"];
  return RCTBridgingToDouble(p);
}
inline facebook::react::LazyVector<double> JS::NativeSampleTurboModule::SpecGetArraysOptions::arrayOfNumbers() const
{
  id const p = _v[@\\"arrayOfNumbers\\"];
  return RCTBridgingToVec(p, ^double(id itemValue_0) { return RCTBridgingToDouble(itemValue_0); });
}
inline std::optional<facebook::react::LazyVector<double>> JS::NativeSampleTurboModule::SpecGetArraysOptions::optionalArrayOfNumbers() const
{
  id const p = _v[@\\"optionalArrayOfNumbers\\"];
  return RCTBridgingToOptionalVec(p, ^double(id itemValue_0) { return RCTBridgingToDouble(itemValue_0); });
}
inline facebook::react::LazyVector<NSString *> JS::NativeSampleTurboModule::SpecGetArraysOptions::arrayOfStrings() const
{
  id const p = _v[@\\"arrayOfStrings\\"];
  return RCTBridgingToVec(p, ^NSString *(id itemValue_0) { return RCTBridgingToString(itemValue_0); });
}
inline std::optional<facebook::react::LazyVector<NSString *>> JS::NativeSampleTurboModule::SpecGetArraysOptions::optionalArrayOfStrings() const
{
  id const p = _v[@\\"optionalArrayOfStrings\\"];
  return RCTBridgingToOptionalVec(p, ^NSString *(id itemValue_0) { return RCTBridgingToString(itemValue_0); });
}
inline facebook::react::LazyVector<JS::NativeSampleTurboModule::SpecGetArraysOptionsArrayOfObjectsElement> JS::NativeSampleTurboModule::SpecGetArraysOptions::arrayOfObjects() const
{
  id const p = _v[@\\"arrayOfObjects\\"];
  return RCTBridgingToVec(p, ^JS::NativeSampleTurboModule::SpecGetArraysOptionsArrayOfObjectsElement(id itemValue_0) { return JS::NativeSampleTurboModule::SpecGetArraysOptionsArrayOfObjectsElement(itemValue_0); });
}
#endif // complex_objects_H
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture cxx_only_native_modules 1`] = `
Map {
  "cxx_only_native_modules.h" => "/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of cxx_only_native_modules symbols
#ifndef cxx_only_native_modules_H
#define cxx_only_native_modules_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>



#endif // cxx_only_native_modules_H
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture empty_native_modules 1`] = `
Map {
  "empty_native_modules.h" => "/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of empty_native_modules symbols
#ifndef empty_native_modules_H
#define empty_native_modules_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>


@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>



@end

@interface NativeSampleTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModule'
   */
  class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

#endif // empty_native_modules_H
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture event_emitter_module 1`] = `
Map {
  "event_emitter_module.h" => "/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of event_emitter_module symbols
#ifndef event_emitter_module_H
#define event_emitter_module_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>


@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;

@end

@interface NativeSampleTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;

- (void)emitOnEvent1;
- (void)emitOnEvent2:(NSString *_Nonnull)value;
- (void)emitOnEvent3:(NSNumber *_Nonnull)value;
- (void)emitOnEvent4:(BOOL)value;
- (void)emitOnEvent5:(NSDictionary *)value;
- (void)emitOnEvent6:(NSArray<id<NSObject>> *)value;
@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModule'
   */
  class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

#endif // event_emitter_module_H
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture native_modules_with_type_aliases 1`] = `
Map {
  "native_modules_with_type_aliases.h" => "/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of native_modules_with_type_aliases symbols
#ifndef native_modules_with_type_aliases_H
#define native_modules_with_type_aliases_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>

namespace JS {
  namespace AliasTurboModule {
    struct OptionsOffset {
      double x() const;
      double y() const;

      OptionsOffset(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (AliasTurboModule_OptionsOffset)
+ (RCTManagedPointer *)JS_AliasTurboModule_OptionsOffset:(id)json;
@end
namespace JS {
  namespace AliasTurboModule {
    struct OptionsSize {
      double width() const;
      double height() const;

      OptionsSize(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (AliasTurboModule_OptionsSize)
+ (RCTManagedPointer *)JS_AliasTurboModule_OptionsSize:(id)json;
@end
namespace JS {
  namespace AliasTurboModule {
    struct OptionsDisplaySize {
      double width() const;
      double height() const;

      OptionsDisplaySize(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (AliasTurboModule_OptionsDisplaySize)
+ (RCTManagedPointer *)JS_AliasTurboModule_OptionsDisplaySize:(id)json;
@end
namespace JS {
  namespace AliasTurboModule {
    struct Options {
      JS::AliasTurboModule::OptionsOffset offset() const;
      JS::AliasTurboModule::OptionsSize size() const;
      std::optional<JS::AliasTurboModule::OptionsDisplaySize> displaySize() const;
      NSString *resizeMode() const;
      std::optional<bool> allowExternalStorage() const;

      Options(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (AliasTurboModule_Options)
+ (RCTManagedPointer *)JS_AliasTurboModule_Options:(id)json;
@end
@protocol AliasTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)cropImage:(JS::AliasTurboModule::Options &)cropData;

@end

@interface AliasTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'AliasTurboModule'
   */
  class JSI_EXPORT AliasTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    AliasTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
inline double JS::AliasTurboModule::OptionsOffset::x() const
{
  id const p = _v[@\\"x\\"];
  return RCTBridgingToDouble(p);
}
inline double JS::AliasTurboModule::OptionsOffset::y() const
{
  id const p = _v[@\\"y\\"];
  return RCTBridgingToDouble(p);
}
inline double JS::AliasTurboModule::OptionsSize::width() const
{
  id const p = _v[@\\"width\\"];
  return RCTBridgingToDouble(p);
}
inline double JS::AliasTurboModule::OptionsSize::height() const
{
  id const p = _v[@\\"height\\"];
  return RCTBridgingToDouble(p);
}
inline double JS::AliasTurboModule::OptionsDisplaySize::width() const
{
  id const p = _v[@\\"width\\"];
  return RCTBridgingToDouble(p);
}
inline double JS::AliasTurboModule::OptionsDisplaySize::height() const
{
  id const p = _v[@\\"height\\"];
  return RCTBridgingToDouble(p);
}
inline JS::AliasTurboModule::OptionsOffset JS::AliasTurboModule::Options::offset() const
{
  id const p = _v[@\\"offset\\"];
  return JS::AliasTurboModule::OptionsOffset(p);
}
inline JS::AliasTurboModule::OptionsSize JS::AliasTurboModule::Options::size() const
{
  id const p = _v[@\\"size\\"];
  return JS::AliasTurboModule::OptionsSize(p);
}
inline std::optional<JS::AliasTurboModule::OptionsDisplaySize> JS::AliasTurboModule::Options::displaySize() const
{
  id const p = _v[@\\"displaySize\\"];
  return (p == nil ? std::nullopt : std::make_optional(JS::AliasTurboModule::OptionsDisplaySize(p)));
}
inline NSString *JS::AliasTurboModule::Options::resizeMode() const
{
  id const p = _v[@\\"resizeMode\\"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<bool> JS::AliasTurboModule::Options::allowExternalStorage() const
{
  id const p = _v[@\\"allowExternalStorage\\"];
  return RCTBridgingToOptionalBool(p);
}
#endif // native_modules_with_type_aliases_H
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture real_module_example 1`] = `
Map {
  "real_module_example.h" => "/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of real_module_example symbols
#ifndef real_module_example_H
#define real_module_example_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>

namespace JS {
  namespace NativeCameraRollManager {
    struct GetPhotosParams {
      double first() const;
      NSString *after() const;
      NSString *groupName() const;
      NSString *groupTypes() const;
      NSString *assetType() const;
      std::optional<double> maxSize() const;
      std::optional<facebook::react::LazyVector<NSString *>> mimeTypes() const;

      GetPhotosParams(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeCameraRollManager_GetPhotosParams)
+ (RCTManagedPointer *)JS_NativeCameraRollManager_GetPhotosParams:(id)json;
@end
@protocol NativeCameraRollManagerSpec <RCTBridgeModule, RCTTurboModule>

- (void)getPhotos:(JS::NativeCameraRollManager::GetPhotosParams &)params
          resolve:(RCTPromiseResolveBlock)resolve
           reject:(RCTPromiseRejectBlock)reject;
- (void)saveToCameraRoll:(NSString *)uri
                    type:(NSString *)type
                 resolve:(RCTPromiseResolveBlock)resolve
                  reject:(RCTPromiseRejectBlock)reject;
- (void)deletePhotos:(NSArray *)assets
             resolve:(RCTPromiseResolveBlock)resolve
              reject:(RCTPromiseRejectBlock)reject;

@end

@interface NativeCameraRollManagerSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeCameraRollManager'
   */
  class JSI_EXPORT NativeCameraRollManagerSpecJSI : public ObjCTurboModule {
  public:
    NativeCameraRollManagerSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeExceptionsManager {
    struct StackFrame {
      std::optional<double> column() const;
      NSString *file() const;
      std::optional<double> lineNumber() const;
      NSString *methodName() const;
      std::optional<bool> collapse() const;

      StackFrame(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeExceptionsManager_StackFrame)
+ (RCTManagedPointer *)JS_NativeExceptionsManager_StackFrame:(id)json;
@end
namespace JS {
  namespace NativeExceptionsManager {
    struct ExceptionData {
      NSString *message() const;
      NSString *originalMessage() const;
      NSString *name() const;
      NSString *componentStack() const;
      facebook::react::LazyVector<JS::NativeExceptionsManager::StackFrame> stack() const;
      double id_() const;
      bool isFatal() const;
      id<NSObject> _Nullable extraData() const;

      ExceptionData(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeExceptionsManager_ExceptionData)
+ (RCTManagedPointer *)JS_NativeExceptionsManager_ExceptionData:(id)json;
@end
@protocol NativeExceptionsManagerSpec <RCTBridgeModule, RCTTurboModule>

- (void)reportFatalException:(NSString *)message
                       stack:(NSArray *)stack
                 exceptionId:(double)exceptionId;
- (void)reportSoftException:(NSString *)message
                      stack:(NSArray *)stack
                exceptionId:(double)exceptionId;
- (void)reportException:(JS::NativeExceptionsManager::ExceptionData &)data;
- (void)updateExceptionMessage:(NSString *)message
                         stack:(NSArray *)stack
                   exceptionId:(double)exceptionId;
- (void)dismissRedbox;

@end

@interface NativeExceptionsManagerSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeExceptionsManager'
   */
  class JSI_EXPORT NativeExceptionsManagerSpecJSI : public ObjCTurboModule {
  public:
    NativeExceptionsManagerSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
inline double JS::NativeCameraRollManager::GetPhotosParams::first() const
{
  id const p = _v[@\\"first\\"];
  return RCTBridgingToDouble(p);
}
inline NSString *JS::NativeCameraRollManager::GetPhotosParams::after() const
{
  id const p = _v[@\\"after\\"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeCameraRollManager::GetPhotosParams::groupName() const
{
  id const p = _v[@\\"groupName\\"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeCameraRollManager::GetPhotosParams::groupTypes() const
{
  id const p = _v[@\\"groupTypes\\"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeCameraRollManager::GetPhotosParams::assetType() const
{
  id const p = _v[@\\"assetType\\"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<double> JS::NativeCameraRollManager::GetPhotosParams::maxSize() const
{
  id const p = _v[@\\"maxSize\\"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<facebook::react::LazyVector<NSString *>> JS::NativeCameraRollManager::GetPhotosParams::mimeTypes() const
{
  id const p = _v[@\\"mimeTypes\\"];
  return RCTBridgingToOptionalVec(p, ^NSString *(id itemValue_0) { return RCTBridgingToString(itemValue_0); });
}
inline std::optional<double> JS::NativeExceptionsManager::StackFrame::column() const
{
  id const p = _v[@\\"column\\"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeExceptionsManager::StackFrame::file() const
{
  id const p = _v[@\\"file\\"];
  return RCTBridgingToString(p);
}
inline std::optional<double> JS::NativeExceptionsManager::StackFrame::lineNumber() const
{
  id const p = _v[@\\"lineNumber\\"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeExceptionsManager::StackFrame::methodName() const
{
  id const p = _v[@\\"methodName\\"];
  return RCTBridgingToString(p);
}
inline std::optional<bool> JS::NativeExceptionsManager::StackFrame::collapse() const
{
  id const p = _v[@\\"collapse\\"];
  return RCTBridgingToOptionalBool(p);
}
inline NSString *JS::NativeExceptionsManager::ExceptionData::message() const
{
  id const p = _v[@\\"message\\"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeExceptionsManager::ExceptionData::originalMessage() const
{
  id const p = _v[@\\"originalMessage\\"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeExceptionsManager::ExceptionData::name() const
{
  id const p = _v[@\\"name\\"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeExceptionsManager::ExceptionData::componentStack() const
{
  id const p = _v[@\\"componentStack\\"];
  return RCTBridgingToString(p);
}
inline facebook::react::LazyVector<JS::NativeExceptionsManager::StackFrame> JS::NativeExceptionsManager::ExceptionData::stack() const
{
  id const p = _v[@\\"stack\\"];
  return RCTBridgingToVec(p, ^JS::NativeExceptionsManager::StackFrame(id itemValue_0) { return JS::NativeExceptionsManager::StackFrame(itemValue_0); });
}
inline double JS::NativeExceptionsManager::ExceptionData::id_() const
{
  id const p = _v[@\\"id\\"];
  return RCTBridgingToDouble(p);
}
inline bool JS::NativeExceptionsManager::ExceptionData::isFatal() const
{
  id const p = _v[@\\"isFatal\\"];
  return RCTBridgingToBool(p);
}
inline id<NSObject> _Nullable JS::NativeExceptionsManager::ExceptionData::extraData() const
{
  id const p = _v[@\\"extraData\\"];
  return p;
}
#endif // real_module_example_H
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture simple_native_modules 1`] = `
Map {
  "simple_native_modules.h" => "/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of simple_native_modules symbols
#ifndef simple_native_modules_H
#define simple_native_modules_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>

namespace JS {
  namespace NativeSampleTurboModule {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<bool> const1;
          RCTRequired<double> const2;
          RCTRequired<NSString *> const3;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;
- (NSNumber *)getBool:(BOOL)arg;
- (NSNumber *)getNumber:(double)arg;
- (NSString *)getString:(NSString *)arg;
- (NSArray<NSDictionary *> *)getArray:(NSArray *)arg;
- (NSDictionary *)getObject:(NSDictionary *)arg;
- (NSNumber *)getRootTag:(double)arg;
- (NSDictionary *)getValue:(double)x
                         y:(NSString *)y
                         z:(NSDictionary *)z;
- (NSNumber *)getEnumReturn;
- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithPromise:(BOOL)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)getValueWithOptionalArg:(NSDictionary *)parameter
                        resolve:(RCTPromiseResolveBlock)resolve
                         reject:(RCTPromiseRejectBlock)reject;
- (NSString *)getEnums:(double)enumInt
             enumFloat:(double)enumFloat
            enumString:(NSString *)enumString;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModule::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModule::Constants::Builder>)getConstants;

@end

@interface NativeSampleTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModule'
   */
  class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
inline JS::NativeSampleTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto const1 = i.const1.get();
  d[@\\"const1\\"] = @(const1);
  auto const2 = i.const2.get();
  d[@\\"const2\\"] = @(const2);
  auto const3 = i.const3.get();
  d[@\\"const3\\"] = const3;
  return d;
}) {}
inline JS::NativeSampleTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
#endif // simple_native_modules_H
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture string_literals 1`] = `
Map {
  "string_literals.h" => "/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of string_literals symbols
#ifndef string_literals_H
#define string_literals_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>


@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSString *)getStringLiteral:(NSString *)literalParam;

@end

@interface NativeSampleTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;

- (void)emitLiteralEvent:(NSString *_Nonnull)value;
@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModule'
   */
  class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

#endif // string_literals_H
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture two_modules_different_files 1`] = `
Map {
  "two_modules_different_files.h" => "/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of two_modules_different_files symbols
#ifndef two_modules_different_files_H
#define two_modules_different_files_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>


@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;

@end

@interface NativeSampleTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModule'
   */
  class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

@protocol NativeSampleTurboModule2Spec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;

@end

@interface NativeSampleTurboModule2SpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModule2'
   */
  class JSI_EXPORT NativeSampleTurboModule2SpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModule2SpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react


#endif // two_modules_different_files_H
",
}
`;

exports[`GenerateModuleHObjCpp can generate fixture union_module 1`] = `
Map {
  "union_module.h" => "/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of union_module symbols
#ifndef union_module_H
#define union_module_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>


@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSDictionary *)getUnion:(double)chooseInt
               chooseFloat:(double)chooseFloat
              chooseObject:(NSDictionary *)chooseObject
              chooseString:(NSString *)chooseString
       chooseStringLiteral:(NSString *)chooseStringLiteral;

@end

@interface NativeSampleTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModule'
   */
  class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

#endif // union_module_H
",
}
`;
