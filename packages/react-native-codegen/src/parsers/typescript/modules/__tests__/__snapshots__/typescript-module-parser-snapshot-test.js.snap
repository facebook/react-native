// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RN Codegen TypeScript Parser Fails with error message EMPTY_ENUM_NATIVE_MODULE 1`] = `"Module NativeSampleTurboModule: Failed parsing the enum SomeEnum in NativeSampleTurboModule with the error: Enums should have at least one member."`;

exports[`RN Codegen TypeScript Parser Fails with error message MAP_WITH_EXTRA_KEYS_NATIVE_MODULE 1`] = `"Module NativeSampleTurboModule: 'ObjectTypeAnnotation' cannot contain both an indexer and properties."`;

exports[`RN Codegen TypeScript Parser Fails with error message MIXED_VALUES_ENUM_NATIVE_MODULE 1`] = `"Module NativeSampleTurboModule: Failed parsing the enum SomeEnum in NativeSampleTurboModule with the error: Enum values can not be mixed. They all must be either blank, number, or string values."`;

exports[`RN Codegen TypeScript Parser Fails with error message NATIVE_MODULES_WITH_ARRAY_WITH_NO_TYPE_FOR_CONTENT 1`] = `"Module NativeSampleTurboModule: Generic 'Array' must have type parameters."`;

exports[`RN Codegen TypeScript Parser Fails with error message NATIVE_MODULES_WITH_ARRAY_WITH_NO_TYPE_FOR_CONTENT_AS_PARAM 1`] = `"Module NativeSampleTurboModule: Generic 'Array' must have type parameters."`;

exports[`RN Codegen TypeScript Parser Fails with error message NATIVE_MODULES_WITH_NOT_ONLY_METHODS 1`] = `"Module NativeSampleTurboModule: TypeScript interfaces extending TurboModule must only contain 'FunctionTypeAnnotation's or non nullable 'EventEmitter's. Property 'sampleBool' refers to a 'TSBooleanKeyword'."`;

exports[`RN Codegen TypeScript Parser Fails with error message NATIVE_MODULES_WITH_PROMISE_WITHOUT_TYPE 1`] = `"Module NativeSampleTurboModule: Generic 'Promise' must have type parameters."`;

exports[`RN Codegen TypeScript Parser Fails with error message NATIVE_MODULES_WITH_UNNAMED_PARAMS 1`] = `"Module NativeSampleTurboModule: All function parameters must be named."`;

exports[`RN Codegen TypeScript Parser Fails with error message NUMERIC_VALUES_ENUM_NATIVE_MODULE 1`] = `"Module NativeSampleTurboModule: Failed parsing the enum SomeEnum in NativeSampleTurboModule with the error: Enum values can not be mixed. They all must be either blank, number, or string values."`;

exports[`RN Codegen TypeScript Parser Fails with error message TWO_NATIVE_EXTENDING_TURBO_MODULE 1`] = `"Module NativeSampleTurboModule: Every NativeModule spec file must declare exactly one NativeModule TypeScript interface. This file declares 2: 'Spec', and 'Spec2'. Please remove the extraneous TypeScript interface declarations."`;

exports[`RN Codegen TypeScript Parser Fails with error message TWO_NATIVE_MODULES_EXPORTED_WITH_DEFAULT 1`] = `"Module NativeSampleTurboModule: No TypeScript interfaces extending TurboModule were detected in this NativeModule spec."`;

exports[`RN Codegen TypeScript Parser can generate fixture ANDROID_ONLY_NATIVE_MODULE 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': []
      },
      'moduleName': 'SampleTurboModuleAndroid',
      'excludedPlatforms': [
        'iOS'
      ]
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture CXX_ONLY_NATIVE_MODULE 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {
        'BinaryTreeNode': {
          'type': 'ObjectTypeAnnotation',
          'properties': [
            {
              'name': 'left',
              'optional': true,
              'typeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'BinaryTreeNode'
              }
            },
            {
              'name': 'value',
              'optional': false,
              'typeAnnotation': {
                'type': 'NumberTypeAnnotation'
              }
            },
            {
              'name': 'right',
              'optional': true,
              'typeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'BinaryTreeNode'
              }
            }
          ]
        },
        'CustomDeviceEvent': {
          'type': 'ObjectTypeAnnotation',
          'properties': [
            {
              'name': 'type',
              'optional': false,
              'typeAnnotation': {
                'type': 'StringTypeAnnotation'
              }
            },
            {
              'name': 'level',
              'optional': false,
              'typeAnnotation': {
                'type': 'NumberTypeAnnotation'
              }
            },
            {
              'name': 'degree',
              'optional': true,
              'typeAnnotation': {
                'type': 'NumberTypeAnnotation'
              }
            }
          ]
        },
        'GraphNode': {
          'type': 'ObjectTypeAnnotation',
          'properties': [
            {
              'name': 'label',
              'optional': false,
              'typeAnnotation': {
                'type': 'StringTypeAnnotation'
              }
            },
            {
              'name': 'neighbors',
              'optional': true,
              'typeAnnotation': {
                'type': 'ArrayTypeAnnotation',
                'elementType': {
                  'type': 'TypeAliasTypeAnnotation',
                  'name': 'GraphNode'
                }
              }
            }
          ]
        }
      },
      'enumMap': {
        'Quality': {
          'name': 'Quality',
          'type': 'EnumDeclarationWithMembers',
          'memberType': 'StringTypeAnnotation',
          'members': [
            {
              'name': 'SD',
              'value': 'SD'
            },
            {
              'name': 'HD',
              'value': 'HD'
            }
          ]
        },
        'Resolution': {
          'name': 'Resolution',
          'type': 'EnumDeclarationWithMembers',
          'memberType': 'NumberTypeAnnotation',
          'members': [
            {
              'name': 'Corrupted',
              'value': -1
            },
            {
              'name': 'Low',
              'value': 720
            },
            {
              'name': 'High',
              'value': 1080
            }
          ]
        },
        'StringOptions': {
          'name': 'StringOptions',
          'type': 'EnumDeclarationWithMembers',
          'memberType': 'StringTypeAnnotation',
          'members': [
            {
              'name': 'One',
              'value': 'one'
            },
            {
              'name': 'Two',
              'value': 'two'
            },
            {
              'name': 'Three',
              'value': 'three'
            }
          ]
        }
      },
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getCallback',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'FunctionTypeAnnotation',
                'returnTypeAnnotation': {
                  'type': 'VoidTypeAnnotation'
                },
                'params': []
              },
              'params': []
            }
          },
          {
            'name': 'getMixed',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'MixedTypeAnnotation'
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'MixedTypeAnnotation'
                  }
                }
              ]
            }
          },
          {
            'name': 'getEnums',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'name': 'Quality',
                'type': 'EnumDeclaration',
                'memberType': 'StringTypeAnnotation'
              },
              'params': [
                {
                  'name': 'quality',
                  'optional': false,
                  'typeAnnotation': {
                    'name': 'Quality',
                    'type': 'EnumDeclaration',
                    'memberType': 'StringTypeAnnotation'
                  }
                },
                {
                  'name': 'resolution',
                  'optional': true,
                  'typeAnnotation': {
                    'name': 'Resolution',
                    'type': 'EnumDeclaration',
                    'memberType': 'NumberTypeAnnotation'
                  }
                },
                {
                  'name': 'stringOptions',
                  'optional': false,
                  'typeAnnotation': {
                    'name': 'StringOptions',
                    'type': 'EnumDeclaration',
                    'memberType': 'StringTypeAnnotation'
                  }
                }
              ]
            }
          },
          {
            'name': 'getBinaryTreeNode',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'BinaryTreeNode'
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'TypeAliasTypeAnnotation',
                    'name': 'BinaryTreeNode'
                  }
                }
              ]
            }
          },
          {
            'name': 'getGraphNode',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'GraphNode'
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'TypeAliasTypeAnnotation',
                    'name': 'GraphNode'
                  }
                }
              ]
            }
          },
          {
            'name': 'getMap',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'GenericObjectTypeAnnotation',
                'dictionaryValueType': {
                  'type': 'NullableTypeAnnotation',
                  'typeAnnotation': {
                    'type': 'NumberTypeAnnotation'
                  }
                }
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'GenericObjectTypeAnnotation',
                    'dictionaryValueType': {
                      'type': 'NullableTypeAnnotation',
                      'typeAnnotation': {
                        'type': 'NumberTypeAnnotation'
                      }
                    }
                  }
                }
              ]
            }
          },
          {
            'name': 'getAnotherMap',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'GenericObjectTypeAnnotation',
                'dictionaryValueType': {
                  'type': 'StringTypeAnnotation'
                }
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'GenericObjectTypeAnnotation',
                    'dictionaryValueType': {
                      'type': 'StringTypeAnnotation'
                    }
                  }
                }
              ]
            }
          },
          {
            'name': 'getUnion',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'UnionTypeAnnotation',
                'memberType': 'ObjectTypeAnnotation'
              },
              'params': [
                {
                  'name': 'chooseInt',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'UnionTypeAnnotation',
                    'memberType': 'NumberTypeAnnotation'
                  }
                },
                {
                  'name': 'chooseFloat',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'UnionTypeAnnotation',
                    'memberType': 'NumberTypeAnnotation'
                  }
                },
                {
                  'name': 'chooseObject',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'UnionTypeAnnotation',
                    'memberType': 'ObjectTypeAnnotation'
                  }
                },
                {
                  'name': 'chooseString',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'StringLiteralUnionTypeAnnotation',
                    'types': [
                      {
                        'type': 'StringLiteralTypeAnnotation',
                        'value': 'One'
                      },
                      {
                        'type': 'StringLiteralTypeAnnotation',
                        'value': 'Two'
                      },
                      {
                        'type': 'StringLiteralTypeAnnotation',
                        'value': 'Three'
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModuleCxx',
      'excludedPlatforms': [
        'iOS',
        'android'
      ]
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture EMPTY_NATIVE_MODULE 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': []
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture IOS_ONLY_NATIVE_MODULE 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {
        'Quality': {
          'name': 'Quality',
          'type': 'EnumDeclarationWithMembers',
          'memberType': 'StringTypeAnnotation',
          'members': [
            {
              'name': 'SD',
              'value': 'SD'
            },
            {
              'name': 'HD',
              'value': 'HD'
            }
          ]
        },
        'Resolution': {
          'name': 'Resolution',
          'type': 'EnumDeclarationWithMembers',
          'memberType': 'NumberTypeAnnotation',
          'members': [
            {
              'name': 'Low',
              'value': 720
            },
            {
              'name': 'High',
              'value': 1080
            }
          ]
        },
        'StringOptions': {
          'name': 'StringOptions',
          'type': 'EnumDeclarationWithMembers',
          'memberType': 'StringTypeAnnotation',
          'members': [
            {
              'name': 'One',
              'value': 'one'
            },
            {
              'name': 'Two',
              'value': 'two'
            },
            {
              'name': 'Three',
              'value': 'three'
            }
          ]
        }
      },
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getEnums',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'StringTypeAnnotation'
              },
              'params': [
                {
                  'name': 'quality',
                  'optional': false,
                  'typeAnnotation': {
                    'name': 'Quality',
                    'type': 'EnumDeclaration',
                    'memberType': 'StringTypeAnnotation'
                  }
                },
                {
                  'name': 'resolution',
                  'optional': true,
                  'typeAnnotation': {
                    'name': 'Resolution',
                    'type': 'EnumDeclaration',
                    'memberType': 'NumberTypeAnnotation'
                  }
                },
                {
                  'name': 'stringOptions',
                  'optional': false,
                  'typeAnnotation': {
                    'name': 'StringOptions',
                    'type': 'EnumDeclaration',
                    'memberType': 'StringTypeAnnotation'
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModuleIOS',
      'excludedPlatforms': [
        'android'
      ]
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_ALIASES 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {
        'ObjectAlias': {
          'type': 'ObjectTypeAnnotation',
          'properties': [
            {
              'name': 'x',
              'optional': false,
              'typeAnnotation': {
                'type': 'NumberTypeAnnotation'
              }
            },
            {
              'name': 'y',
              'optional': false,
              'typeAnnotation': {
                'type': 'NumberTypeAnnotation'
              }
            },
            {
              'name': 'label',
              'optional': false,
              'typeAnnotation': {
                'type': 'StringTypeAnnotation'
              }
            },
            {
              'name': 'truthy',
              'optional': false,
              'typeAnnotation': {
                'type': 'BooleanTypeAnnotation'
              }
            }
          ]
        }
      },
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getNumber',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'VoidTypeAnnotation'
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'NumberTypeAnnotation'
                  }
                }
              ]
            }
          },
          {
            'name': 'getVoid',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'VoidTypeAnnotation'
              },
              'params': []
            }
          },
          {
            'name': 'getArray',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ObjectTypeAnnotation',
                'properties': [
                  {
                    'name': 'a',
                    'optional': false,
                    'typeAnnotation': {
                      'type': 'NumberTypeAnnotation'
                    }
                  }
                ]
              },
              'params': [
                {
                  'name': 'a',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ArrayTypeAnnotation',
                    'elementType': {
                      'type': 'NumberTypeAnnotation'
                    }
                  }
                }
              ]
            }
          },
          {
            'name': 'getStringFromAlias',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'StringTypeAnnotation'
              },
              'params': [
                {
                  'name': 'a',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'TypeAliasTypeAnnotation',
                    'name': 'ObjectAlias'
                  }
                }
              ]
            }
          },
          {
            'name': 'getStringFromNullableAlias',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'StringTypeAnnotation'
              },
              'params': [
                {
                  'name': 'a',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'NullableTypeAnnotation',
                    'typeAnnotation': {
                      'type': 'TypeAliasTypeAnnotation',
                      'name': 'ObjectAlias'
                    }
                  }
                }
              ]
            }
          },
          {
            'name': 'getStringFromPureAlias',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'StringTypeAnnotation'
              },
              'params': [
                {
                  'name': 'a',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'TypeAliasTypeAnnotation',
                    'name': 'ObjectAlias'
                  }
                }
              ]
            }
          },
          {
            'name': 'getStringFromReadOnlyAlias',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'StringTypeAnnotation'
              },
              'params': [
                {
                  'name': 'a',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'TypeAliasTypeAnnotation',
                    'name': 'ObjectAlias'
                  }
                }
              ]
            }
          },
          {
            'name': 'getStringFromNullableReadOnlyAlias',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'StringTypeAnnotation'
              },
              'params': [
                {
                  'name': 'a',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'NullableTypeAnnotation',
                    'typeAnnotation': {
                      'type': 'TypeAliasTypeAnnotation',
                      'name': 'ObjectAlias'
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_ARRAY_WITH_ALIAS 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getArray',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ArrayTypeAnnotation',
                'elementType': {
                  'type': 'StringTypeAnnotation'
                }
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ArrayTypeAnnotation',
                    'elementType': {
                      'type': 'StringTypeAnnotation'
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_ARRAY_WITH_UNION_AND_TOUPLE 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getArray',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ArrayTypeAnnotation',
                'elementType': {
                  'type': 'AnyTypeAnnotation'
                }
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ArrayTypeAnnotation',
                    'elementType': {
                      'type': 'AnyTypeAnnotation'
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_ARRAY2_WITH_ALIAS 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getArray',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ArrayTypeAnnotation',
                'elementType': {
                  'type': 'StringTypeAnnotation'
                }
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ArrayTypeAnnotation',
                    'elementType': {
                      'type': 'StringTypeAnnotation'
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_ARRAY2_WITH_UNION_AND_TOUPLE 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getArray',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ArrayTypeAnnotation',
                'elementType': {
                  'type': 'AnyTypeAnnotation'
                }
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ArrayTypeAnnotation',
                    'elementType': {
                      'type': 'AnyTypeAnnotation'
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_BASIC_ARRAY 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getArray',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ArrayTypeAnnotation',
                'elementType': {
                  'type': 'StringTypeAnnotation'
                }
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ArrayTypeAnnotation',
                    'elementType': {
                      'type': 'StringTypeAnnotation'
                    }
                  }
                }
              ]
            }
          },
          {
            'name': 'getArray',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ArrayTypeAnnotation',
                'elementType': {
                  'type': 'StringTypeAnnotation'
                }
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ArrayTypeAnnotation',
                    'elementType': {
                      'type': 'StringTypeAnnotation'
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_BASIC_ARRAY2 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getArray',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ArrayTypeAnnotation',
                'elementType': {
                  'type': 'StringTypeAnnotation'
                }
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ArrayTypeAnnotation',
                    'elementType': {
                      'type': 'StringTypeAnnotation'
                    }
                  }
                }
              ]
            }
          },
          {
            'name': 'getArray',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ArrayTypeAnnotation',
                'elementType': {
                  'type': 'StringTypeAnnotation'
                }
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ArrayTypeAnnotation',
                    'elementType': {
                      'type': 'StringTypeAnnotation'
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_BASIC_PARAM_TYPES 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'passBool',
            'optional': true,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'VoidTypeAnnotation'
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'BooleanTypeAnnotation'
                  }
                }
              ]
            }
          },
          {
            'name': 'passNumber',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'VoidTypeAnnotation'
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'NumberTypeAnnotation'
                  }
                }
              ]
            }
          },
          {
            'name': 'passNumberLiteral',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'VoidTypeAnnotation'
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'NumberLiteralTypeAnnotation',
                    'value': 4
                  }
                }
              ]
            }
          },
          {
            'name': 'passString',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'VoidTypeAnnotation'
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'StringTypeAnnotation'
                  }
                }
              ]
            }
          },
          {
            'name': 'passStringish',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'VoidTypeAnnotation'
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'StringTypeAnnotation'
                  }
                }
              ]
            }
          },
          {
            'name': 'passStringLiteral',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'VoidTypeAnnotation'
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'StringLiteralTypeAnnotation',
                    'value': 'A String Literal'
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_CALLBACK 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getValueWithCallback',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'VoidTypeAnnotation'
              },
              'params': [
                {
                  'name': 'callback',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'FunctionTypeAnnotation',
                    'returnTypeAnnotation': {
                      'type': 'VoidTypeAnnotation'
                    },
                    'params': [
                      {
                        'name': 'value',
                        'optional': false,
                        'typeAnnotation': {
                          'type': 'StringTypeAnnotation'
                        }
                      },
                      {
                        'name': 'arr',
                        'optional': false,
                        'typeAnnotation': {
                          'type': 'ArrayTypeAnnotation',
                          'elementType': {
                            'type': 'ArrayTypeAnnotation',
                            'elementType': {
                              'type': 'StringTypeAnnotation'
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_COMPLEX_ARRAY 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getArray',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ArrayTypeAnnotation',
                'elementType': {
                  'type': 'ArrayTypeAnnotation',
                  'elementType': {
                    'type': 'ArrayTypeAnnotation',
                    'elementType': {
                      'type': 'StringTypeAnnotation'
                    }
                  }
                }
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ArrayTypeAnnotation',
                    'elementType': {
                      'type': 'ArrayTypeAnnotation',
                      'elementType': {
                        'type': 'ArrayTypeAnnotation',
                        'elementType': {
                          'type': 'ArrayTypeAnnotation',
                          'elementType': {
                            'type': 'ArrayTypeAnnotation',
                            'elementType': {
                              'type': 'StringTypeAnnotation'
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_COMPLEX_ARRAY2 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getArray',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ArrayTypeAnnotation',
                'elementType': {
                  'type': 'ArrayTypeAnnotation',
                  'elementType': {
                    'type': 'ArrayTypeAnnotation',
                    'elementType': {
                      'type': 'StringTypeAnnotation'
                    }
                  }
                }
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ArrayTypeAnnotation',
                    'elementType': {
                      'type': 'ArrayTypeAnnotation',
                      'elementType': {
                        'type': 'ArrayTypeAnnotation',
                        'elementType': {
                          'type': 'ArrayTypeAnnotation',
                          'elementType': {
                            'type': 'ArrayTypeAnnotation',
                            'elementType': {
                              'type': 'StringTypeAnnotation'
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_COMPLEX_OBJECTS 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getObject',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ObjectTypeAnnotation',
                'properties': [
                  {
                    'name': 'const1',
                    'optional': false,
                    'typeAnnotation': {
                      'type': 'ObjectTypeAnnotation',
                      'properties': [
                        {
                          'name': 'const1',
                          'optional': false,
                          'typeAnnotation': {
                            'type': 'BooleanTypeAnnotation'
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ObjectTypeAnnotation',
                    'properties': [
                      {
                        'name': 'const1',
                        'optional': false,
                        'typeAnnotation': {
                          'type': 'ObjectTypeAnnotation',
                          'properties': [
                            {
                              'name': 'const1',
                              'optional': false,
                              'typeAnnotation': {
                                'type': 'BooleanTypeAnnotation'
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            'name': 'getReadOnlyObject',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ObjectTypeAnnotation',
                'properties': [
                  {
                    'name': 'const1',
                    'optional': false,
                    'typeAnnotation': {
                      'type': 'ObjectTypeAnnotation',
                      'properties': [
                        {
                          'name': 'const1',
                          'optional': false,
                          'typeAnnotation': {
                            'type': 'BooleanTypeAnnotation'
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ObjectTypeAnnotation',
                    'properties': [
                      {
                        'name': 'const1',
                        'optional': false,
                        'typeAnnotation': {
                          'type': 'ObjectTypeAnnotation',
                          'properties': [
                            {
                              'name': 'const1',
                              'optional': false,
                              'typeAnnotation': {
                                'type': 'BooleanTypeAnnotation'
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            'name': 'getObject2',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'GenericObjectTypeAnnotation'
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ObjectTypeAnnotation',
                    'properties': [
                      {
                        'name': 'a',
                        'optional': false,
                        'typeAnnotation': {
                          'type': 'StringTypeAnnotation'
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            'name': 'getObjectInArray',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ArrayTypeAnnotation',
                'elementType': {
                  'type': 'ObjectTypeAnnotation',
                  'properties': [
                    {
                      'name': 'const1',
                      'optional': false,
                      'typeAnnotation': {
                        'type': 'ObjectTypeAnnotation',
                        'properties': [
                          {
                            'name': 'const1',
                            'optional': false,
                            'typeAnnotation': {
                              'type': 'BooleanTypeAnnotation'
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ObjectTypeAnnotation',
                    'properties': [
                      {
                        'name': 'const1',
                        'optional': false,
                        'typeAnnotation': {
                          'type': 'ObjectTypeAnnotation',
                          'properties': [
                            {
                              'name': 'const1',
                              'optional': false,
                              'typeAnnotation': {
                                'type': 'BooleanTypeAnnotation'
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_COMPLEX_OBJECTS_WITH_NULLABLE_KEY 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getConstants',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ObjectTypeAnnotation',
                'properties': [
                  {
                    'name': 'isTesting',
                    'optional': false,
                    'typeAnnotation': {
                      'type': 'BooleanTypeAnnotation'
                    }
                  },
                  {
                    'name': 'reactNativeVersion',
                    'optional': false,
                    'typeAnnotation': {
                      'type': 'ObjectTypeAnnotation',
                      'properties': [
                        {
                          'name': 'major',
                          'optional': false,
                          'typeAnnotation': {
                            'type': 'NumberTypeAnnotation'
                          }
                        },
                        {
                          'name': 'minor',
                          'optional': false,
                          'typeAnnotation': {
                            'type': 'NumberTypeAnnotation'
                          }
                        },
                        {
                          'name': 'patch',
                          'optional': true,
                          'typeAnnotation': {
                            'type': 'NumberTypeAnnotation'
                          }
                        },
                        {
                          'name': 'prerelease',
                          'optional': false,
                          'typeAnnotation': {
                            'type': 'NullableTypeAnnotation',
                            'typeAnnotation': {
                              'type': 'NumberTypeAnnotation'
                            }
                          }
                        }
                      ]
                    }
                  },
                  {
                    'name': 'forceTouchAvailable',
                    'optional': false,
                    'typeAnnotation': {
                      'type': 'BooleanTypeAnnotation'
                    }
                  },
                  {
                    'name': 'osVersion',
                    'optional': false,
                    'typeAnnotation': {
                      'type': 'StringTypeAnnotation'
                    }
                  },
                  {
                    'name': 'systemName',
                    'optional': false,
                    'typeAnnotation': {
                      'type': 'StringTypeAnnotation'
                    }
                  },
                  {
                    'name': 'interfaceIdiom',
                    'optional': false,
                    'typeAnnotation': {
                      'type': 'StringTypeAnnotation'
                    }
                  }
                ]
              },
              'params': []
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_EVENT_EMITTERS 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {
        'ObjectStruct': {
          'type': 'ObjectTypeAnnotation',
          'properties': [
            {
              'name': 'a',
              'optional': false,
              'typeAnnotation': {
                'type': 'NumberTypeAnnotation'
              }
            },
            {
              'name': 'b',
              'optional': false,
              'typeAnnotation': {
                'type': 'StringTypeAnnotation'
              }
            },
            {
              'name': 'c',
              'optional': true,
              'typeAnnotation': {
                'type': 'NullableTypeAnnotation',
                'typeAnnotation': {
                  'type': 'StringTypeAnnotation'
                }
              }
            }
          ]
        }
      },
      'enumMap': {},
      'spec': {
        'eventEmitters': [
          {
            'name': 'onEvent1',
            'optional': false,
            'typeAnnotation': {
              'type': 'EventEmitterTypeAnnotation',
              'typeAnnotation': {
                'type': 'VoidTypeAnnotation'
              }
            }
          },
          {
            'name': 'onEvent2',
            'optional': false,
            'typeAnnotation': {
              'type': 'EventEmitterTypeAnnotation',
              'typeAnnotation': {
                'type': 'StringTypeAnnotation'
              }
            }
          },
          {
            'name': 'onEvent3',
            'optional': false,
            'typeAnnotation': {
              'type': 'EventEmitterTypeAnnotation',
              'typeAnnotation': {
                'type': 'NumberTypeAnnotation'
              }
            }
          },
          {
            'name': 'onEvent4',
            'optional': false,
            'typeAnnotation': {
              'type': 'EventEmitterTypeAnnotation',
              'typeAnnotation': {
                'type': 'BooleanTypeAnnotation'
              }
            }
          },
          {
            'name': 'onEvent5',
            'optional': false,
            'typeAnnotation': {
              'type': 'EventEmitterTypeAnnotation',
              'typeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'ObjectStruct'
              }
            }
          },
          {
            'name': 'onEvent6',
            'optional': false,
            'typeAnnotation': {
              'type': 'EventEmitterTypeAnnotation',
              'typeAnnotation': {
                'type': 'ArrayTypeAnnotation',
                'elementType': {
                  'type': 'TypeAliasTypeAnnotation',
                  'name': 'ObjectStruct'
                }
              }
            }
          },
          {
            'name': 'onEvent7',
            'optional': false,
            'typeAnnotation': {
              'type': 'EventEmitterTypeAnnotation',
              'typeAnnotation': {
                'type': 'GenericObjectTypeAnnotation',
                'dictionaryValueType': {
                  'type': 'StringTypeAnnotation'
                }
              }
            }
          }
        ],
        'methods': []
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_FLOAT_AND_INT32 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getInt',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'Int32TypeAnnotation'
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'Int32TypeAnnotation'
                  }
                }
              ]
            }
          },
          {
            'name': 'getFloat',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'FloatTypeAnnotation'
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'FloatTypeAnnotation'
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_INTERSECTION_TYPES 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {
        'Bar': {
          'type': 'ObjectTypeAnnotation',
          'properties': [
            {
              'name': 'z',
              'optional': false,
              'typeAnnotation': {
                'type': 'NumberTypeAnnotation'
              }
            }
          ]
        },
        'Foo': {
          'type': 'ObjectTypeAnnotation',
          'properties': [
            {
              'name': 'bar1',
              'optional': false,
              'typeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'Bar'
              }
            },
            {
              'name': 'bar2',
              'optional': false,
              'typeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'Bar'
              }
            },
            {
              'name': 'bar3',
              'optional': false,
              'typeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'Bar'
              }
            },
            {
              'name': 'bar4',
              'optional': false,
              'typeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'Bar'
              }
            }
          ]
        }
      },
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'foo1',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'Foo'
              },
              'params': [
                {
                  'name': 'x',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'TypeAliasTypeAnnotation',
                    'name': 'Foo'
                  }
                }
              ]
            }
          },
          {
            'name': 'foo2',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'VoidTypeAnnotation'
              },
              'params': [
                {
                  'name': 'x',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'TypeAliasTypeAnnotation',
                    'name': 'Foo'
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_NESTED_ALIASES 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {
        'Bar': {
          'type': 'ObjectTypeAnnotation',
          'properties': [
            {
              'name': 'z',
              'optional': false,
              'typeAnnotation': {
                'type': 'NumberTypeAnnotation'
              }
            }
          ]
        },
        'Foo': {
          'type': 'ObjectTypeAnnotation',
          'properties': [
            {
              'name': 'bar1',
              'optional': false,
              'typeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'Bar'
              }
            },
            {
              'name': 'bar2',
              'optional': false,
              'typeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'Bar'
              }
            }
          ]
        }
      },
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'foo1',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'Foo'
              },
              'params': [
                {
                  'name': 'x',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'TypeAliasTypeAnnotation',
                    'name': 'Foo'
                  }
                }
              ]
            }
          },
          {
            'name': 'foo2',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'VoidTypeAnnotation'
              },
              'params': [
                {
                  'name': 'x',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'TypeAliasTypeAnnotation',
                    'name': 'Foo'
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_NESTED_INTERFACES 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {
        'Bar': {
          'type': 'ObjectTypeAnnotation',
          'properties': [
            {
              'name': 'z',
              'optional': false,
              'typeAnnotation': {
                'type': 'NumberTypeAnnotation'
              }
            }
          ]
        },
        'Base1': {
          'type': 'ObjectTypeAnnotation',
          'properties': [
            {
              'name': 'bar1',
              'optional': false,
              'typeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'Bar'
              }
            }
          ]
        },
        'Base2': {
          'type': 'ObjectTypeAnnotation',
          'properties': [
            {
              'name': 'bar2',
              'optional': false,
              'typeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'Bar'
              }
            }
          ]
        },
        'Base3': {
          'type': 'ObjectTypeAnnotation',
          'properties': [
            {
              'name': 'bar2',
              'optional': false,
              'typeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'Bar'
              }
            },
            {
              'name': 'bar3',
              'optional': false,
              'typeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'Bar'
              }
            }
          ],
          'baseTypes': [
            'Base2'
          ]
        },
        'Foo': {
          'type': 'ObjectTypeAnnotation',
          'properties': [
            {
              'name': 'bar1',
              'optional': false,
              'typeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'Bar'
              }
            },
            {
              'name': 'bar2',
              'optional': false,
              'typeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'Bar'
              }
            },
            {
              'name': 'bar3',
              'optional': false,
              'typeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'Bar'
              }
            },
            {
              'name': 'bar4',
              'optional': false,
              'typeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'Bar'
              }
            }
          ],
          'baseTypes': [
            'Base1',
            'Base3'
          ]
        }
      },
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'foo1',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'Foo'
              },
              'params': [
                {
                  'name': 'x',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'TypeAliasTypeAnnotation',
                    'name': 'Foo'
                  }
                }
              ]
            }
          },
          {
            'name': 'foo2',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'VoidTypeAnnotation'
              },
              'params': [
                {
                  'name': 'x',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'TypeAliasTypeAnnotation',
                    'name': 'Foo'
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_NULLABLE_PARAM 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'voidFunc',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'VoidTypeAnnotation'
              },
              'params': [
                {
                  'name': 'arg',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'NullableTypeAnnotation',
                    'typeAnnotation': {
                      'type': 'StringTypeAnnotation'
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_OBJECT_WITH_OBJECT_DEFINED_IN_FILE_AS_PROPERTY 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {
        'DisplayMetricsAndroid': {
          'type': 'ObjectTypeAnnotation',
          'properties': [
            {
              'name': 'width',
              'optional': false,
              'typeAnnotation': {
                'type': 'NumberTypeAnnotation'
              }
            }
          ]
        }
      },
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getConstants',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ObjectTypeAnnotation',
                'properties': [
                  {
                    'name': 'Dimensions',
                    'optional': false,
                    'typeAnnotation': {
                      'type': 'ObjectTypeAnnotation',
                      'properties': [
                        {
                          'name': 'windowPhysicalPixels',
                          'optional': false,
                          'typeAnnotation': {
                            'type': 'TypeAliasTypeAnnotation',
                            'name': 'DisplayMetricsAndroid'
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              'params': []
            }
          },
          {
            'name': 'getConstants2',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ObjectTypeAnnotation',
                'properties': [
                  {
                    'name': 'Dimensions',
                    'optional': false,
                    'typeAnnotation': {
                      'type': 'ObjectTypeAnnotation',
                      'properties': [
                        {
                          'name': 'windowPhysicalPixels',
                          'optional': false,
                          'typeAnnotation': {
                            'type': 'TypeAliasTypeAnnotation',
                            'name': 'DisplayMetricsAndroid'
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              'params': []
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_PARTIALS 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {
        'SomeObj': {
          'type': 'ObjectTypeAnnotation',
          'properties': [
            {
              'name': 'a',
              'optional': false,
              'typeAnnotation': {
                'type': 'StringTypeAnnotation'
              }
            },
            {
              'name': 'b',
              'optional': true,
              'typeAnnotation': {
                'type': 'BooleanTypeAnnotation'
              }
            }
          ]
        }
      },
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getSomeObj',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'SomeObj'
              },
              'params': []
            }
          },
          {
            'name': 'getPartialSomeObj',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ObjectTypeAnnotation',
                'properties': [
                  {
                    'name': 'a',
                    'optional': true,
                    'typeAnnotation': {
                      'type': 'StringTypeAnnotation'
                    }
                  },
                  {
                    'name': 'b',
                    'optional': true,
                    'typeAnnotation': {
                      'type': 'BooleanTypeAnnotation'
                    }
                  }
                ]
              },
              'params': []
            }
          },
          {
            'name': 'getSomeObjFromPartialSomeObj',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'SomeObj'
              },
              'params': [
                {
                  'name': 'value',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ObjectTypeAnnotation',
                    'properties': [
                      {
                        'name': 'a',
                        'optional': true,
                        'typeAnnotation': {
                          'type': 'StringTypeAnnotation'
                        }
                      },
                      {
                        'name': 'b',
                        'optional': true,
                        'typeAnnotation': {
                          'type': 'BooleanTypeAnnotation'
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_PARTIALS_COMPLEX 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {
        'SomeObj': {
          'type': 'ObjectTypeAnnotation',
          'properties': [
            {
              'name': 'a',
              'optional': false,
              'typeAnnotation': {
                'type': 'StringTypeAnnotation'
              }
            },
            {
              'name': 'b',
              'optional': true,
              'typeAnnotation': {
                'type': 'BooleanTypeAnnotation'
              }
            }
          ]
        }
      },
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getPartialPartial',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'TypeAliasTypeAnnotation',
                'name': 'SomeObj'
              },
              'params': [
                {
                  'name': 'value1',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ObjectTypeAnnotation',
                    'properties': [
                      {
                        'name': 'a',
                        'optional': true,
                        'typeAnnotation': {
                          'type': 'StringTypeAnnotation'
                        }
                      },
                      {
                        'name': 'b',
                        'optional': true,
                        'typeAnnotation': {
                          'type': 'BooleanTypeAnnotation'
                        }
                      }
                    ]
                  }
                },
                {
                  'name': 'value2',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ObjectTypeAnnotation',
                    'properties': [
                      {
                        'name': 'a',
                        'optional': true,
                        'typeAnnotation': {
                          'type': 'StringTypeAnnotation'
                        }
                      },
                      {
                        'name': 'b',
                        'optional': true,
                        'typeAnnotation': {
                          'type': 'BooleanTypeAnnotation'
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_PROMISE 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {
        'SomeObj': {
          'type': 'ObjectTypeAnnotation',
          'properties': [
            {
              'name': 'a',
              'optional': false,
              'typeAnnotation': {
                'type': 'StringTypeAnnotation'
              }
            }
          ]
        }
      },
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getValueWithPromise',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'PromiseTypeAnnotation',
                'elementType': {
                  'type': 'StringTypeAnnotation'
                }
              },
              'params': []
            }
          },
          {
            'name': 'getValueWithPromiseDefinedSomewhereElse',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'PromiseTypeAnnotation',
                'elementType': {
                  'type': 'StringTypeAnnotation'
                }
              },
              'params': []
            }
          },
          {
            'name': 'getValueWithPromiseObjDefinedSomewhereElse',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'PromiseTypeAnnotation',
                'elementType': {
                  'type': 'TypeAliasTypeAnnotation',
                  'name': 'SomeObj'
                }
              },
              'params': []
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_ROOT_TAG 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getRootTag',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'ReservedTypeAnnotation',
                'name': 'RootTag'
              },
              'params': [
                {
                  'name': 'rootTag',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'ReservedTypeAnnotation',
                    'name': 'RootTag'
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_SIMPLE_OBJECT 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getObject',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'GenericObjectTypeAnnotation'
              },
              'params': [
                {
                  'name': 'o',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'GenericObjectTypeAnnotation'
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_UNION 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getUnion',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'UnionTypeAnnotation',
                'memberType': 'ObjectTypeAnnotation'
              },
              'params': [
                {
                  'name': 'chooseInt',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'UnionTypeAnnotation',
                    'memberType': 'NumberTypeAnnotation'
                  }
                },
                {
                  'name': 'chooseFloat',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'UnionTypeAnnotation',
                    'memberType': 'NumberTypeAnnotation'
                  }
                },
                {
                  'name': 'chooseObject',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'UnionTypeAnnotation',
                    'memberType': 'ObjectTypeAnnotation'
                  }
                },
                {
                  'name': 'chooseString',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'StringLiteralUnionTypeAnnotation',
                    'types': [
                      {
                        'type': 'StringLiteralTypeAnnotation',
                        'value': 'One'
                      },
                      {
                        'type': 'StringLiteralTypeAnnotation',
                        'value': 'Two'
                      },
                      {
                        'type': 'StringLiteralTypeAnnotation',
                        'value': 'Three'
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_UNION_RETURN_TYPES 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getStringUnion',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'StringLiteralUnionTypeAnnotation',
                'types': [
                  {
                    'type': 'StringLiteralTypeAnnotation',
                    'value': 'light'
                  },
                  {
                    'type': 'StringLiteralTypeAnnotation',
                    'value': 'dark'
                  }
                ]
              },
              'params': []
            }
          },
          {
            'name': 'setStringUnion',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'VoidTypeAnnotation'
              },
              'params': [
                {
                  'name': 'strings',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'StringLiteralUnionTypeAnnotation',
                    'types': [
                      {
                        'type': 'StringLiteralTypeAnnotation',
                        'value': 'light'
                      },
                      {
                        'type': 'StringLiteralTypeAnnotation',
                        'value': 'dark'
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            'name': 'getNumberUnion',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'UnionTypeAnnotation',
                'memberType': 'NumberTypeAnnotation'
              },
              'params': []
            }
          },
          {
            'name': 'setNumberUnion',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'VoidTypeAnnotation'
              },
              'params': [
                {
                  'name': 'numbers',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'UnionTypeAnnotation',
                    'memberType': 'NumberTypeAnnotation'
                  }
                }
              ]
            }
          },
          {
            'name': 'getObjectUnion',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'UnionTypeAnnotation',
                'memberType': 'ObjectTypeAnnotation'
              },
              'params': []
            }
          },
          {
            'name': 'setObjectUnion',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'VoidTypeAnnotation'
              },
              'params': [
                {
                  'name': 'objects',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'UnionTypeAnnotation',
                    'memberType': 'ObjectTypeAnnotation'
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;

exports[`RN Codegen TypeScript Parser can generate fixture NATIVE_MODULE_WITH_UNSAFE_OBJECT 1`] = `
"{
  'modules': {
    'NativeSampleTurboModule': {
      'type': 'NativeModule',
      'aliasMap': {},
      'enumMap': {},
      'spec': {
        'eventEmitters': [],
        'methods': [
          {
            'name': 'getUnsafeObject',
            'optional': false,
            'typeAnnotation': {
              'type': 'FunctionTypeAnnotation',
              'returnTypeAnnotation': {
                'type': 'GenericObjectTypeAnnotation'
              },
              'params': [
                {
                  'name': 'o',
                  'optional': false,
                  'typeAnnotation': {
                    'type': 'GenericObjectTypeAnnotation'
                  }
                }
              ]
            }
          }
        ]
      },
      'moduleName': 'SampleTurboModule'
    }
  }
}"
`;
