// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GenerateModuleObjCpp can generate a header file NativeModule specs 1`] = `
"/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of RNCodegenModuleFixtures symbols
#ifndef RNCodegenModuleFixtures_H
#define RNCodegenModuleFixtures_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>


@protocol NativeArrayTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSArray<NSString *> *)getArray:(NSArray *)a;
- (NSArray<NSString *> *)getReadOnlyArray:(NSArray *)a;
- (NSArray<NSString *> *)getArrayWithAlias:(NSArray *)a
                                         b:(NSArray *)b;

@end

@interface NativeArrayTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeArrayTurboModule'
   */
  class JSI_EXPORT NativeArrayTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeArrayTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

@protocol NativeBooleanTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSNumber *)getBoolean:(BOOL)arg;
- (NSNumber *)getBooleanWithAlias:(BOOL)arg;

@end

@interface NativeBooleanTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeBooleanTurboModule'
   */
  class JSI_EXPORT NativeBooleanTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeBooleanTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

@protocol NativeCallbackTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithCallbackWithAlias:(RCTResponseSenderBlock)c;

@end

@interface NativeCallbackTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeCallbackTurboModule'
   */
  class JSI_EXPORT NativeCallbackTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeCallbackTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeEnumTurboModule {
    struct StateType {
      NSString *state() const;

      StateType(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeEnumTurboModule_StateType)
+ (RCTManagedPointer *)JS_NativeEnumTurboModule_StateType:(id)json;
@end
namespace JS {
  namespace NativeEnumTurboModule {
    struct StateTypeWithEnums {
      NSString *state() const;
      NSString *regular() const;
      NSString *str() const;
      double num() const;
      NSString *lowerCase() const;

      StateTypeWithEnums(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeEnumTurboModule_StateTypeWithEnums)
+ (RCTManagedPointer *)JS_NativeEnumTurboModule_StateTypeWithEnums:(id)json;
@end
@protocol NativeEnumTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSString *)getStatusRegular:(JS::NativeEnumTurboModule::StateType &)statusProp;
- (NSString *)getStatusStr:(JS::NativeEnumTurboModule::StateType &)statusProp;
- (NSNumber *)getStatusNum:(JS::NativeEnumTurboModule::StateType &)statusProp;
- (NSString *)getStatusLowerCase:(JS::NativeEnumTurboModule::StateType &)statusProp;
- (NSDictionary *)getStateType:(NSString *)a
                             b:(NSString *)b
                             c:(double)c
                             d:(NSString *)d;
- (NSDictionary *)getStateTypeWithEnums:(JS::NativeEnumTurboModule::StateTypeWithEnums &)paramOfTypeWithEnums;

@end

@interface NativeEnumTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeEnumTurboModule'
   */
  class JSI_EXPORT NativeEnumTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeEnumTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

@protocol NativeNullableTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSNumber * _Nullable)getBool:(NSNumber *)a;
- (NSNumber * _Nullable)getNumber:(NSNumber *)a;
- (NSString * _Nullable)getString:(NSNumber *)a;
- (NSArray<id<NSObject>> * _Nullable)getArray:(NSArray * _Nullable)a;
- (NSDictionary * _Nullable)getObject:(NSDictionary * _Nullable)a;
- (void)getValueWithPromise:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;

@end

@interface NativeNullableTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeNullableTurboModule'
   */
  class JSI_EXPORT NativeNullableTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeNullableTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

@protocol NativeNumberTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSNumber *)getNumber:(double)arg;
- (NSNumber *)getNumberWithAlias:(double)arg;

@end

@interface NativeNumberTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeNumberTurboModule'
   */
  class JSI_EXPORT NativeNumberTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeNumberTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeObjectTurboModule {
    struct SpecDifficultObjectAE {
      bool D() const;
      double E() const;
      NSString *F() const;

      SpecDifficultObjectAE(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeObjectTurboModule_SpecDifficultObjectAE)
+ (RCTManagedPointer *)JS_NativeObjectTurboModule_SpecDifficultObjectAE:(id)json;
@end
namespace JS {
  namespace NativeObjectTurboModule {
    struct SpecDifficultObjectA {
      bool D() const;
      JS::NativeObjectTurboModule::SpecDifficultObjectAE E() const;
      NSString *F() const;

      SpecDifficultObjectA(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeObjectTurboModule_SpecDifficultObjectA)
+ (RCTManagedPointer *)JS_NativeObjectTurboModule_SpecDifficultObjectA:(id)json;
@end
namespace JS {
  namespace NativeObjectTurboModule {
    struct ConstantsEEE {

      struct Builder {
        struct Input {
          RCTRequired<bool> D;
          RCTRequired<double> E;
          RCTRequired<NSString *> F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsEEE */
        Builder(ConstantsEEE i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsEEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsEEE(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
namespace JS {
  namespace NativeObjectTurboModule {
    struct ConstantsEE {

      struct Builder {
        struct Input {
          RCTRequired<bool> D;
          RCTRequired<JS::NativeObjectTurboModule::ConstantsEEE::Builder> E;
          RCTRequired<NSString *> F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsEE */
        Builder(ConstantsEE i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsEE(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
namespace JS {
  namespace NativeObjectTurboModule {
    struct ConstantsE {

      struct Builder {
        struct Input {
          RCTRequired<bool> D;
          RCTRequired<JS::NativeObjectTurboModule::ConstantsEE::Builder> E;
          RCTRequired<NSString *> F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsE */
        Builder(ConstantsE i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsE(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
namespace JS {
  namespace NativeObjectTurboModule {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<bool> D;
          RCTRequired<JS::NativeObjectTurboModule::ConstantsE::Builder> E;
          RCTRequired<NSString *> F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeObjectTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSDictionary *)getGenericObject:(NSDictionary *)arg;
- (NSDictionary *)getGenericObjectReadOnly:(NSDictionary *)arg;
- (NSDictionary *)getGenericObjectWithAlias:(NSDictionary *)arg;
- (NSDictionary *)difficultObject:(JS::NativeObjectTurboModule::SpecDifficultObjectA &)A;
- (facebook::react::ModuleConstants<JS::NativeObjectTurboModule::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeObjectTurboModule::Constants::Builder>)getConstants;

@end

@interface NativeObjectTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeObjectTurboModule'
   */
  class JSI_EXPORT NativeObjectTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeObjectTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeOptionalObjectTurboModule {
    struct ConstantsEEE {

      struct Builder {
        struct Input {
          std::optional<bool> D;
          std::optional<double> E;
          NSString *F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsEEE */
        Builder(ConstantsEEE i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsEEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsEEE(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
namespace JS {
  namespace NativeOptionalObjectTurboModule {
    struct ConstantsEE {

      struct Builder {
        struct Input {
          std::optional<bool> D;
          std::optional<JS::NativeOptionalObjectTurboModule::ConstantsEEE::Builder> E;
          NSString *F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsEE */
        Builder(ConstantsEE i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsEE(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
namespace JS {
  namespace NativeOptionalObjectTurboModule {
    struct ConstantsE {

      struct Builder {
        struct Input {
          std::optional<bool> D;
          std::optional<JS::NativeOptionalObjectTurboModule::ConstantsEE::Builder> E;
          NSString *F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsE */
        Builder(ConstantsE i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsE(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
namespace JS {
  namespace NativeOptionalObjectTurboModule {
    struct Constants {

      struct Builder {
        struct Input {
          std::optional<bool> D;
          id<NSObject> _Nullable A;
          std::optional<JS::NativeOptionalObjectTurboModule::ConstantsE::Builder> E;
          NSString *F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeOptionalObjectTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (facebook::react::ModuleConstants<JS::NativeOptionalObjectTurboModule::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeOptionalObjectTurboModule::Constants::Builder>)getConstants;

@end

@interface NativeOptionalObjectTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeOptionalObjectTurboModule'
   */
  class JSI_EXPORT NativeOptionalObjectTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeOptionalObjectTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativePartialAnnotationTurboModule {
    struct SpecGetSomeObjFromPartialSomeObjValue {
      NSString *a() const;
      std::optional<bool> b() const;

      SpecGetSomeObjFromPartialSomeObjValue(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativePartialAnnotationTurboModule_SpecGetSomeObjFromPartialSomeObjValue)
+ (RCTManagedPointer *)JS_NativePartialAnnotationTurboModule_SpecGetSomeObjFromPartialSomeObjValue:(id)json;
@end
namespace JS {
  namespace NativePartialAnnotationTurboModule {
    struct SpecGetPartialPartialValue1 {
      NSString *a() const;
      std::optional<bool> b() const;

      SpecGetPartialPartialValue1(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativePartialAnnotationTurboModule_SpecGetPartialPartialValue1)
+ (RCTManagedPointer *)JS_NativePartialAnnotationTurboModule_SpecGetPartialPartialValue1:(id)json;
@end
namespace JS {
  namespace NativePartialAnnotationTurboModule {
    struct SpecGetPartialPartialValue2 {
      NSString *a() const;
      std::optional<bool> b() const;

      SpecGetPartialPartialValue2(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativePartialAnnotationTurboModule_SpecGetPartialPartialValue2)
+ (RCTManagedPointer *)JS_NativePartialAnnotationTurboModule_SpecGetPartialPartialValue2:(id)json;
@end
@protocol NativePartialAnnotationTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSDictionary *)getSomeObj;
- (NSDictionary *)getPartialSomeObj;
- (NSDictionary *)getSomeObjFromPartialSomeObj:(JS::NativePartialAnnotationTurboModule::SpecGetSomeObjFromPartialSomeObjValue &)value;
- (NSDictionary *)getPartialPartial:(JS::NativePartialAnnotationTurboModule::SpecGetPartialPartialValue1 &)value1
                             value2:(JS::NativePartialAnnotationTurboModule::SpecGetPartialPartialValue2 &)value2;

@end

@interface NativePartialAnnotationTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativePartialAnnotationTurboModule'
   */
  class JSI_EXPORT NativePartialAnnotationTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativePartialAnnotationTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

@protocol NativePromiseTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)getValueWithPromise:(BOOL)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)getValueWithPromiseWithAlias:(NSString *)arg
                             resolve:(RCTPromiseResolveBlock)resolve
                              reject:(RCTPromiseRejectBlock)reject;

@end

@interface NativePromiseTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativePromiseTurboModule'
   */
  class JSI_EXPORT NativePromiseTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativePromiseTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecGetObjectShapeArg {
      double prop() const;

      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecGetObjectShapeArg:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModule {
    struct Animal {
      NSString *name() const;

      Animal(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_Animal:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModule {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<bool> const1;
          RCTRequired<double> const2;
          RCTRequired<NSString *> const3;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;
- (NSNumber *)getBool:(BOOL)arg;
- (NSNumber *)getNumber:(double)arg;
- (NSString *)getString:(NSString *)arg;
- (NSArray<id<NSObject>> *)getArray:(NSArray *)arg;
- (NSDictionary *)getObject:(NSDictionary *)arg;
- (NSDictionary *)getObjectShape:(JS::NativeSampleTurboModule::SpecGetObjectShapeArg &)arg;
- (NSDictionary *)getAlias:(JS::NativeSampleTurboModule::Animal &)arg;
- (NSNumber *)getRootTag:(double)arg;
- (NSDictionary *)getValue:(double)x
getValuegetValuegetValuegetValuegetValuey:(NSString *)getValuegetValuegetValuegetValuegetValuey
                         z:(NSDictionary *)z;
- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithPromise:(BOOL)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModule::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModule::Constants::Builder>)getConstants;

@end

@interface NativeSampleTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModule'
   */
  class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeSampleTurboModuleArrays {
    struct ConstantsIdElement {

      struct Builder {
        struct Input {
          RCTRequired<double> prop;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsIdElement */
        Builder(ConstantsIdElement i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsIdElement fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsIdElement(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
namespace JS {
  namespace NativeSampleTurboModuleArrays {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<std::vector<bool>> const1;
          RCTRequired<std::vector<double>> const2;
          RCTRequired<std::vector<NSString *>> const3;
          std::optional<std::vector<std::optional<JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder>>> id_;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeSampleTurboModuleArraysSpec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;
- (NSArray<NSNumber *> *)getBool:(NSArray *)id;
- (NSArray<NSNumber *> *)getNumber:(NSArray *)arg;
- (NSArray<NSString *> *)getString:(NSArray *)arg;
- (NSArray<NSArray<id<NSObject>> *> *)getArray:(NSArray *)arg;
- (NSArray<NSDictionary *> *)getObject:(NSArray *)arg;
- (NSArray<NSDictionary *> *)getObjectShape:(NSArray *)arg;
- (NSArray<NSDictionary *> *)getAlias:(NSArray *)arg;
- (NSArray<NSNumber *> *)getRootTag:(NSArray *)arg;
- (NSArray<NSDictionary *> *)getValue:(NSArray *)x
                                    y:(NSArray *)y
                                    z:(NSArray *)z;
- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithPromise:(NSArray *)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleArrays::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleArrays::Constants::Builder>)getConstants;

@end

@interface NativeSampleTurboModuleArraysSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModuleArrays'
   */
  class JSI_EXPORT NativeSampleTurboModuleArraysSpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModuleArraysSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeSampleTurboModuleNullable {
    struct SpecGetObjectShapeArg {
      std::optional<double> prop() const;

      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModuleNullable_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullable_SpecGetObjectShapeArg:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModuleNullable {
    struct Animal {
      NSString *name() const;

      Animal(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModuleNullable_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullable_Animal:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModuleNullable {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<std::optional<bool>> const1;
          RCTRequired<std::optional<double>> const2;
          RCTRequired<NSString *> const3;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeSampleTurboModuleNullableSpec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;
- (NSNumber * _Nullable)getBool:(NSNumber *)arg;
- (NSNumber * _Nullable)getNumber:(NSNumber *)arg;
- (NSString * _Nullable)getString:(NSString * _Nullable)arg;
- (NSArray<id<NSObject>> * _Nullable)getArray:(NSArray * _Nullable)arg;
- (NSDictionary * _Nullable)getObject:(NSDictionary * _Nullable)arg;
- (NSDictionary * _Nullable)getObjectShape:(JS::NativeSampleTurboModuleNullable::SpecGetObjectShapeArg &)arg;
- (NSDictionary * _Nullable)getAlias:(JS::NativeSampleTurboModuleNullable::Animal &)arg;
- (NSNumber * _Nullable)getRootTag:(NSNumber *)arg;
- (NSDictionary * _Nullable)getValue:(NSNumber *)x
                                   y:(NSString * _Nullable)y
                                   z:(NSDictionary * _Nullable)z;
- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithPromise:(NSNumber *)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullable::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullable::Constants::Builder>)getConstants;

@end

@interface NativeSampleTurboModuleNullableSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModuleNullable'
   */
  class JSI_EXPORT NativeSampleTurboModuleNullableSpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModuleNullableSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeSampleTurboModuleNullableAndOptional {
    struct SpecGetObjectShapeArg {
      std::optional<double> prop() const;

      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModuleNullableAndOptional {
    struct Animal {
      NSString *name() const;

      Animal(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModuleNullableAndOptional_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullableAndOptional_Animal:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModuleNullableAndOptional {
    struct Constants {

      struct Builder {
        struct Input {
          std::optional<bool> const1;
          std::optional<double> const2;
          NSString *const3;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeSampleTurboModuleNullableAndOptionalSpec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;
- (NSNumber * _Nullable)getBool:(NSNumber *)arg;
- (NSNumber * _Nullable)getNumber:(NSNumber *)arg;
- (NSString * _Nullable)getString:(NSString * _Nullable)arg;
- (NSArray<id<NSObject>> * _Nullable)getArray:(NSArray * _Nullable)arg;
- (NSDictionary * _Nullable)getObject:(NSDictionary * _Nullable)arg;
- (NSDictionary *)getObjectShape:(JS::NativeSampleTurboModuleNullableAndOptional::SpecGetObjectShapeArg &)arg;
- (NSDictionary * _Nullable)getAlias:(JS::NativeSampleTurboModuleNullableAndOptional::Animal &)arg;
- (NSNumber * _Nullable)getRootTag:(NSNumber *)arg;
- (NSDictionary * _Nullable)getValue:(NSNumber *)x
                                   y:(NSString * _Nullable)y
                                   z:(NSDictionary * _Nullable)z;
- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithPromise:(NSNumber *)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder>)getConstants;

@end

@interface NativeSampleTurboModuleNullableAndOptionalSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModuleNullableAndOptional'
   */
  class JSI_EXPORT NativeSampleTurboModuleNullableAndOptionalSpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModuleNullableAndOptionalSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeSampleTurboModuleOptional {
    struct SpecGetObjectShapeArg {
      std::optional<double> prop() const;

      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModuleOptional_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleOptional_SpecGetObjectShapeArg:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModuleOptional {
    struct Animal {
      NSString *name() const;

      Animal(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModuleOptional_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleOptional_Animal:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModuleOptional {
    struct Constants {

      struct Builder {
        struct Input {
          std::optional<bool> const1;
          std::optional<double> const2;
          NSString *const3;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeSampleTurboModuleOptionalSpec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;
- (NSNumber *)getBool:(NSNumber *)arg;
- (NSNumber *)getNumber:(NSNumber *)arg;
- (NSString *)getString:(NSString *)arg;
- (NSArray<id<NSObject>> *)getArray:(NSArray *)arg;
- (NSDictionary *)getObject:(NSDictionary *)arg;
- (NSDictionary *)getObjectShape:(JS::NativeSampleTurboModuleOptional::SpecGetObjectShapeArg &)arg;
- (NSDictionary *)getAlias:(JS::NativeSampleTurboModuleOptional::Animal &)arg;
- (NSNumber *)getRootTag:(NSNumber *)arg;
- (NSDictionary *)getValue:(NSNumber *)x
                         y:(NSString *)y
                         z:(NSDictionary *)z;
- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithPromise:(NSNumber *)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleOptional::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleOptional::Constants::Builder>)getConstants;

@end

@interface NativeSampleTurboModuleOptionalSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModuleOptional'
   */
  class JSI_EXPORT NativeSampleTurboModuleOptionalSpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModuleOptionalSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

@protocol NativeStringTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSString *)getString:(NSString *)arg;
- (NSString *)getStringWithAlias:(NSString *)arg;

@end

@interface NativeStringTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeStringTurboModule'
   */
  class JSI_EXPORT NativeStringTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeStringTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react



inline NSString *JS::NativeEnumTurboModule::StateType::state() const
{
  id const p = _v[@\\"state\\"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeEnumTurboModule::StateTypeWithEnums::state() const
{
  id const p = _v[@\\"state\\"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeEnumTurboModule::StateTypeWithEnums::regular() const
{
  id const p = _v[@\\"regular\\"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeEnumTurboModule::StateTypeWithEnums::str() const
{
  id const p = _v[@\\"str\\"];
  return RCTBridgingToString(p);
}
inline double JS::NativeEnumTurboModule::StateTypeWithEnums::num() const
{
  id const p = _v[@\\"num\\"];
  return RCTBridgingToDouble(p);
}
inline NSString *JS::NativeEnumTurboModule::StateTypeWithEnums::lowerCase() const
{
  id const p = _v[@\\"lowerCase\\"];
  return RCTBridgingToString(p);
}


inline bool JS::NativeObjectTurboModule::SpecDifficultObjectAE::D() const
{
  id const p = _v[@\\"D\\"];
  return RCTBridgingToBool(p);
}
inline double JS::NativeObjectTurboModule::SpecDifficultObjectAE::E() const
{
  id const p = _v[@\\"E\\"];
  return RCTBridgingToDouble(p);
}
inline NSString *JS::NativeObjectTurboModule::SpecDifficultObjectAE::F() const
{
  id const p = _v[@\\"F\\"];
  return RCTBridgingToString(p);
}
inline bool JS::NativeObjectTurboModule::SpecDifficultObjectA::D() const
{
  id const p = _v[@\\"D\\"];
  return RCTBridgingToBool(p);
}
inline JS::NativeObjectTurboModule::SpecDifficultObjectAE JS::NativeObjectTurboModule::SpecDifficultObjectA::E() const
{
  id const p = _v[@\\"E\\"];
  return JS::NativeObjectTurboModule::SpecDifficultObjectAE(p);
}
inline NSString *JS::NativeObjectTurboModule::SpecDifficultObjectA::F() const
{
  id const p = _v[@\\"F\\"];
  return RCTBridgingToString(p);
}
inline JS::NativeObjectTurboModule::ConstantsEEE::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D.get();
  d[@\\"D\\"] = @(D);
  auto E = i.E.get();
  d[@\\"E\\"] = @(E);
  auto F = i.F.get();
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeObjectTurboModule::ConstantsEEE::Builder::Builder(ConstantsEEE i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeObjectTurboModule::ConstantsEE::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D.get();
  d[@\\"D\\"] = @(D);
  auto E = i.E.get();
  d[@\\"E\\"] = E.buildUnsafeRawValue();
  auto F = i.F.get();
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeObjectTurboModule::ConstantsEE::Builder::Builder(ConstantsEE i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeObjectTurboModule::ConstantsE::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D.get();
  d[@\\"D\\"] = @(D);
  auto E = i.E.get();
  d[@\\"E\\"] = E.buildUnsafeRawValue();
  auto F = i.F.get();
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeObjectTurboModule::ConstantsE::Builder::Builder(ConstantsE i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeObjectTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D.get();
  d[@\\"D\\"] = @(D);
  auto E = i.E.get();
  d[@\\"E\\"] = E.buildUnsafeRawValue();
  auto F = i.F.get();
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeObjectTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeOptionalObjectTurboModule::ConstantsEEE::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D;
  d[@\\"D\\"] = D.has_value() ? @((BOOL)D.value()) : nil;
  auto E = i.E;
  d[@\\"E\\"] = E.has_value() ? @((double)E.value()) : nil;
  auto F = i.F;
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeOptionalObjectTurboModule::ConstantsEEE::Builder::Builder(ConstantsEEE i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeOptionalObjectTurboModule::ConstantsEE::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D;
  d[@\\"D\\"] = D.has_value() ? @((BOOL)D.value()) : nil;
  auto E = i.E;
  d[@\\"E\\"] = E.has_value() ? E.value().buildUnsafeRawValue() : nil;
  auto F = i.F;
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeOptionalObjectTurboModule::ConstantsEE::Builder::Builder(ConstantsEE i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeOptionalObjectTurboModule::ConstantsE::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D;
  d[@\\"D\\"] = D.has_value() ? @((BOOL)D.value()) : nil;
  auto E = i.E;
  d[@\\"E\\"] = E.has_value() ? E.value().buildUnsafeRawValue() : nil;
  auto F = i.F;
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeOptionalObjectTurboModule::ConstantsE::Builder::Builder(ConstantsE i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeOptionalObjectTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D;
  d[@\\"D\\"] = D.has_value() ? @((BOOL)D.value()) : nil;
  auto A = i.A;
  d[@\\"A\\"] = A;
  auto E = i.E;
  d[@\\"E\\"] = E.has_value() ? E.value().buildUnsafeRawValue() : nil;
  auto F = i.F;
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeOptionalObjectTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline NSString *JS::NativePartialAnnotationTurboModule::SpecGetSomeObjFromPartialSomeObjValue::a() const
{
  id const p = _v[@\\"a\\"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<bool> JS::NativePartialAnnotationTurboModule::SpecGetSomeObjFromPartialSomeObjValue::b() const
{
  id const p = _v[@\\"b\\"];
  return RCTBridgingToOptionalBool(p);
}
inline NSString *JS::NativePartialAnnotationTurboModule::SpecGetPartialPartialValue1::a() const
{
  id const p = _v[@\\"a\\"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<bool> JS::NativePartialAnnotationTurboModule::SpecGetPartialPartialValue1::b() const
{
  id const p = _v[@\\"b\\"];
  return RCTBridgingToOptionalBool(p);
}
inline NSString *JS::NativePartialAnnotationTurboModule::SpecGetPartialPartialValue2::a() const
{
  id const p = _v[@\\"a\\"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<bool> JS::NativePartialAnnotationTurboModule::SpecGetPartialPartialValue2::b() const
{
  id const p = _v[@\\"b\\"];
  return RCTBridgingToOptionalBool(p);
}

inline double JS::NativeSampleTurboModule::SpecGetObjectShapeArg::prop() const
{
  id const p = _v[@\\"prop\\"];
  return RCTBridgingToDouble(p);
}
inline NSString *JS::NativeSampleTurboModule::Animal::name() const
{
  id const p = _v[@\\"name\\"];
  return RCTBridgingToString(p);
}
inline JS::NativeSampleTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto const1 = i.const1.get();
  d[@\\"const1\\"] = @(const1);
  auto const2 = i.const2.get();
  d[@\\"const2\\"] = @(const2);
  auto const3 = i.const3.get();
  d[@\\"const3\\"] = const3;
  return d;
}) {}
inline JS::NativeSampleTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto prop = i.prop.get();
  d[@\\"prop\\"] = @(prop);
  return d;
}) {}
inline JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder::Builder(ConstantsIdElement i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeSampleTurboModuleArrays::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto const1 = i.const1.get();
  d[@\\"const1\\"] = RCTConvertVecToArray(const1, ^id(bool el_) { return @(el_); });
  auto const2 = i.const2.get();
  d[@\\"const2\\"] = RCTConvertVecToArray(const2, ^id(double el_) { return @(el_); });
  auto const3 = i.const3.get();
  d[@\\"const3\\"] = RCTConvertVecToArray(const3, ^id(NSString * el_) { return el_; });
  auto id_ = i.id_;
  d[@\\"id\\"] = RCTConvertOptionalVecToArray(id_, ^id(std::optional<JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder> el_) { return el_.has_value() ? el_.value().buildUnsafeRawValue() : nil; });
  return d;
}) {}
inline JS::NativeSampleTurboModuleArrays::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline std::optional<double> JS::NativeSampleTurboModuleNullable::SpecGetObjectShapeArg::prop() const
{
  id const p = _v[@\\"prop\\"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeSampleTurboModuleNullable::Animal::name() const
{
  id const p = _v[@\\"name\\"];
  return RCTBridgingToOptionalString(p);
}
inline JS::NativeSampleTurboModuleNullable::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto const1 = i.const1.get();
  d[@\\"const1\\"] = const1.has_value() ? @((BOOL)const1.value()) : nil;
  auto const2 = i.const2.get();
  d[@\\"const2\\"] = const2.has_value() ? @((double)const2.value()) : nil;
  auto const3 = i.const3.get();
  d[@\\"const3\\"] = const3;
  return d;
}) {}
inline JS::NativeSampleTurboModuleNullable::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline std::optional<double> JS::NativeSampleTurboModuleNullableAndOptional::SpecGetObjectShapeArg::prop() const
{
  id const p = _v[@\\"prop\\"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeSampleTurboModuleNullableAndOptional::Animal::name() const
{
  id const p = _v[@\\"name\\"];
  return RCTBridgingToOptionalString(p);
}
inline JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto const1 = i.const1;
  d[@\\"const1\\"] = const1.has_value() ? @((BOOL)const1.value()) : nil;
  auto const2 = i.const2;
  d[@\\"const2\\"] = const2.has_value() ? @((double)const2.value()) : nil;
  auto const3 = i.const3;
  d[@\\"const3\\"] = const3;
  return d;
}) {}
inline JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline std::optional<double> JS::NativeSampleTurboModuleOptional::SpecGetObjectShapeArg::prop() const
{
  id const p = _v[@\\"prop\\"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeSampleTurboModuleOptional::Animal::name() const
{
  id const p = _v[@\\"name\\"];
  return RCTBridgingToOptionalString(p);
}
inline JS::NativeSampleTurboModuleOptional::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto const1 = i.const1;
  d[@\\"const1\\"] = const1.has_value() ? @((BOOL)const1.value()) : nil;
  auto const2 = i.const2;
  d[@\\"const2\\"] = const2.has_value() ? @((double)const2.value()) : nil;
  auto const3 = i.const3;
  d[@\\"const3\\"] = const3;
  return d;
}) {}
inline JS::NativeSampleTurboModuleOptional::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}

#endif // RNCodegenModuleFixtures_H
"
`;

exports[`GenerateModuleObjCpp can generate a header file NativeModule specs with assume nonnull enabled 1`] = `
"/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of RNCodegenModuleFixtures symbols
#ifndef RNCodegenModuleFixtures_H
#define RNCodegenModuleFixtures_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>


NS_ASSUME_NONNULL_BEGIN

@protocol NativeArrayTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSArray<NSString *> *)getArray:(NSArray *)a;
- (NSArray<NSString *> *)getReadOnlyArray:(NSArray *)a;
- (NSArray<NSString *> *)getArrayWithAlias:(NSArray *)a
                                         b:(NSArray *)b;

@end

@interface NativeArrayTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeArrayTurboModule'
   */
  class JSI_EXPORT NativeArrayTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeArrayTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

@protocol NativeBooleanTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSNumber *)getBoolean:(BOOL)arg;
- (NSNumber *)getBooleanWithAlias:(BOOL)arg;

@end

@interface NativeBooleanTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeBooleanTurboModule'
   */
  class JSI_EXPORT NativeBooleanTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeBooleanTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

@protocol NativeCallbackTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithCallbackWithAlias:(RCTResponseSenderBlock)c;

@end

@interface NativeCallbackTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeCallbackTurboModule'
   */
  class JSI_EXPORT NativeCallbackTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeCallbackTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeEnumTurboModule {
    struct StateType {
      NSString *state() const;

      StateType(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeEnumTurboModule_StateType)
+ (RCTManagedPointer *)JS_NativeEnumTurboModule_StateType:(id)json;
@end
namespace JS {
  namespace NativeEnumTurboModule {
    struct StateTypeWithEnums {
      NSString *state() const;
      NSString *regular() const;
      NSString *str() const;
      double num() const;
      NSString *lowerCase() const;

      StateTypeWithEnums(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeEnumTurboModule_StateTypeWithEnums)
+ (RCTManagedPointer *)JS_NativeEnumTurboModule_StateTypeWithEnums:(id)json;
@end
@protocol NativeEnumTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSString *)getStatusRegular:(JS::NativeEnumTurboModule::StateType &)statusProp;
- (NSString *)getStatusStr:(JS::NativeEnumTurboModule::StateType &)statusProp;
- (NSNumber *)getStatusNum:(JS::NativeEnumTurboModule::StateType &)statusProp;
- (NSString *)getStatusLowerCase:(JS::NativeEnumTurboModule::StateType &)statusProp;
- (NSDictionary *)getStateType:(NSString *)a
                             b:(NSString *)b
                             c:(double)c
                             d:(NSString *)d;
- (NSDictionary *)getStateTypeWithEnums:(JS::NativeEnumTurboModule::StateTypeWithEnums &)paramOfTypeWithEnums;

@end

@interface NativeEnumTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeEnumTurboModule'
   */
  class JSI_EXPORT NativeEnumTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeEnumTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

@protocol NativeNullableTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSNumber * _Nullable)getBool:(NSNumber *)a;
- (NSNumber * _Nullable)getNumber:(NSNumber *)a;
- (NSString * _Nullable)getString:(NSNumber *)a;
- (NSArray<id<NSObject>> * _Nullable)getArray:(NSArray * _Nullable)a;
- (NSDictionary * _Nullable)getObject:(NSDictionary * _Nullable)a;
- (void)getValueWithPromise:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;

@end

@interface NativeNullableTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeNullableTurboModule'
   */
  class JSI_EXPORT NativeNullableTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeNullableTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

@protocol NativeNumberTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSNumber *)getNumber:(double)arg;
- (NSNumber *)getNumberWithAlias:(double)arg;

@end

@interface NativeNumberTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeNumberTurboModule'
   */
  class JSI_EXPORT NativeNumberTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeNumberTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeObjectTurboModule {
    struct SpecDifficultObjectAE {
      bool D() const;
      double E() const;
      NSString *F() const;

      SpecDifficultObjectAE(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeObjectTurboModule_SpecDifficultObjectAE)
+ (RCTManagedPointer *)JS_NativeObjectTurboModule_SpecDifficultObjectAE:(id)json;
@end
namespace JS {
  namespace NativeObjectTurboModule {
    struct SpecDifficultObjectA {
      bool D() const;
      JS::NativeObjectTurboModule::SpecDifficultObjectAE E() const;
      NSString *F() const;

      SpecDifficultObjectA(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeObjectTurboModule_SpecDifficultObjectA)
+ (RCTManagedPointer *)JS_NativeObjectTurboModule_SpecDifficultObjectA:(id)json;
@end
namespace JS {
  namespace NativeObjectTurboModule {
    struct ConstantsEEE {

      struct Builder {
        struct Input {
          RCTRequired<bool> D;
          RCTRequired<double> E;
          RCTRequired<NSString *> F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsEEE */
        Builder(ConstantsEEE i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsEEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsEEE(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
namespace JS {
  namespace NativeObjectTurboModule {
    struct ConstantsEE {

      struct Builder {
        struct Input {
          RCTRequired<bool> D;
          RCTRequired<JS::NativeObjectTurboModule::ConstantsEEE::Builder> E;
          RCTRequired<NSString *> F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsEE */
        Builder(ConstantsEE i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsEE(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
namespace JS {
  namespace NativeObjectTurboModule {
    struct ConstantsE {

      struct Builder {
        struct Input {
          RCTRequired<bool> D;
          RCTRequired<JS::NativeObjectTurboModule::ConstantsEE::Builder> E;
          RCTRequired<NSString *> F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsE */
        Builder(ConstantsE i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsE(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
namespace JS {
  namespace NativeObjectTurboModule {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<bool> D;
          RCTRequired<JS::NativeObjectTurboModule::ConstantsE::Builder> E;
          RCTRequired<NSString *> F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeObjectTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSDictionary *)getGenericObject:(NSDictionary *)arg;
- (NSDictionary *)getGenericObjectReadOnly:(NSDictionary *)arg;
- (NSDictionary *)getGenericObjectWithAlias:(NSDictionary *)arg;
- (NSDictionary *)difficultObject:(JS::NativeObjectTurboModule::SpecDifficultObjectA &)A;
- (facebook::react::ModuleConstants<JS::NativeObjectTurboModule::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeObjectTurboModule::Constants::Builder>)getConstants;

@end

@interface NativeObjectTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeObjectTurboModule'
   */
  class JSI_EXPORT NativeObjectTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeObjectTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeOptionalObjectTurboModule {
    struct ConstantsEEE {

      struct Builder {
        struct Input {
          std::optional<bool> D;
          std::optional<double> E;
          NSString *F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsEEE */
        Builder(ConstantsEEE i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsEEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsEEE(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
namespace JS {
  namespace NativeOptionalObjectTurboModule {
    struct ConstantsEE {

      struct Builder {
        struct Input {
          std::optional<bool> D;
          std::optional<JS::NativeOptionalObjectTurboModule::ConstantsEEE::Builder> E;
          NSString *F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsEE */
        Builder(ConstantsEE i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsEE(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
namespace JS {
  namespace NativeOptionalObjectTurboModule {
    struct ConstantsE {

      struct Builder {
        struct Input {
          std::optional<bool> D;
          std::optional<JS::NativeOptionalObjectTurboModule::ConstantsEE::Builder> E;
          NSString *F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsE */
        Builder(ConstantsE i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsE(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
namespace JS {
  namespace NativeOptionalObjectTurboModule {
    struct Constants {

      struct Builder {
        struct Input {
          std::optional<bool> D;
          id<NSObject> _Nullable A;
          std::optional<JS::NativeOptionalObjectTurboModule::ConstantsE::Builder> E;
          NSString *F;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeOptionalObjectTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (facebook::react::ModuleConstants<JS::NativeOptionalObjectTurboModule::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeOptionalObjectTurboModule::Constants::Builder>)getConstants;

@end

@interface NativeOptionalObjectTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeOptionalObjectTurboModule'
   */
  class JSI_EXPORT NativeOptionalObjectTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeOptionalObjectTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativePartialAnnotationTurboModule {
    struct SpecGetSomeObjFromPartialSomeObjValue {
      NSString *a() const;
      std::optional<bool> b() const;

      SpecGetSomeObjFromPartialSomeObjValue(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativePartialAnnotationTurboModule_SpecGetSomeObjFromPartialSomeObjValue)
+ (RCTManagedPointer *)JS_NativePartialAnnotationTurboModule_SpecGetSomeObjFromPartialSomeObjValue:(id)json;
@end
namespace JS {
  namespace NativePartialAnnotationTurboModule {
    struct SpecGetPartialPartialValue1 {
      NSString *a() const;
      std::optional<bool> b() const;

      SpecGetPartialPartialValue1(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativePartialAnnotationTurboModule_SpecGetPartialPartialValue1)
+ (RCTManagedPointer *)JS_NativePartialAnnotationTurboModule_SpecGetPartialPartialValue1:(id)json;
@end
namespace JS {
  namespace NativePartialAnnotationTurboModule {
    struct SpecGetPartialPartialValue2 {
      NSString *a() const;
      std::optional<bool> b() const;

      SpecGetPartialPartialValue2(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativePartialAnnotationTurboModule_SpecGetPartialPartialValue2)
+ (RCTManagedPointer *)JS_NativePartialAnnotationTurboModule_SpecGetPartialPartialValue2:(id)json;
@end
@protocol NativePartialAnnotationTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSDictionary *)getSomeObj;
- (NSDictionary *)getPartialSomeObj;
- (NSDictionary *)getSomeObjFromPartialSomeObj:(JS::NativePartialAnnotationTurboModule::SpecGetSomeObjFromPartialSomeObjValue &)value;
- (NSDictionary *)getPartialPartial:(JS::NativePartialAnnotationTurboModule::SpecGetPartialPartialValue1 &)value1
                             value2:(JS::NativePartialAnnotationTurboModule::SpecGetPartialPartialValue2 &)value2;

@end

@interface NativePartialAnnotationTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativePartialAnnotationTurboModule'
   */
  class JSI_EXPORT NativePartialAnnotationTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativePartialAnnotationTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

@protocol NativePromiseTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)getValueWithPromise:(BOOL)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)getValueWithPromiseWithAlias:(NSString *)arg
                             resolve:(RCTPromiseResolveBlock)resolve
                              reject:(RCTPromiseRejectBlock)reject;

@end

@interface NativePromiseTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativePromiseTurboModule'
   */
  class JSI_EXPORT NativePromiseTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativePromiseTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeSampleTurboModule {
    struct SpecGetObjectShapeArg {
      double prop() const;

      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecGetObjectShapeArg:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModule {
    struct Animal {
      NSString *name() const;

      Animal(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModule_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_Animal:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModule {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<bool> const1;
          RCTRequired<double> const2;
          RCTRequired<NSString *> const3;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;
- (NSNumber *)getBool:(BOOL)arg;
- (NSNumber *)getNumber:(double)arg;
- (NSString *)getString:(NSString *)arg;
- (NSArray<id<NSObject>> *)getArray:(NSArray *)arg;
- (NSDictionary *)getObject:(NSDictionary *)arg;
- (NSDictionary *)getObjectShape:(JS::NativeSampleTurboModule::SpecGetObjectShapeArg &)arg;
- (NSDictionary *)getAlias:(JS::NativeSampleTurboModule::Animal &)arg;
- (NSNumber *)getRootTag:(double)arg;
- (NSDictionary *)getValue:(double)x
getValuegetValuegetValuegetValuegetValuey:(NSString *)getValuegetValuegetValuegetValuegetValuey
                         z:(NSDictionary *)z;
- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithPromise:(BOOL)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModule::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModule::Constants::Builder>)getConstants;

@end

@interface NativeSampleTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModule'
   */
  class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeSampleTurboModuleArrays {
    struct ConstantsIdElement {

      struct Builder {
        struct Input {
          RCTRequired<double> prop;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsIdElement */
        Builder(ConstantsIdElement i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsIdElement fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsIdElement(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
namespace JS {
  namespace NativeSampleTurboModuleArrays {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<std::vector<bool>> const1;
          RCTRequired<std::vector<double>> const2;
          RCTRequired<std::vector<NSString *>> const3;
          std::optional<std::vector<std::optional<JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder>>> id_;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeSampleTurboModuleArraysSpec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;
- (NSArray<NSNumber *> *)getBool:(NSArray *)id;
- (NSArray<NSNumber *> *)getNumber:(NSArray *)arg;
- (NSArray<NSString *> *)getString:(NSArray *)arg;
- (NSArray<NSArray<id<NSObject>> *> *)getArray:(NSArray *)arg;
- (NSArray<NSDictionary *> *)getObject:(NSArray *)arg;
- (NSArray<NSDictionary *> *)getObjectShape:(NSArray *)arg;
- (NSArray<NSDictionary *> *)getAlias:(NSArray *)arg;
- (NSArray<NSNumber *> *)getRootTag:(NSArray *)arg;
- (NSArray<NSDictionary *> *)getValue:(NSArray *)x
                                    y:(NSArray *)y
                                    z:(NSArray *)z;
- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithPromise:(NSArray *)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleArrays::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleArrays::Constants::Builder>)getConstants;

@end

@interface NativeSampleTurboModuleArraysSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModuleArrays'
   */
  class JSI_EXPORT NativeSampleTurboModuleArraysSpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModuleArraysSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeSampleTurboModuleNullable {
    struct SpecGetObjectShapeArg {
      std::optional<double> prop() const;

      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModuleNullable_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullable_SpecGetObjectShapeArg:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModuleNullable {
    struct Animal {
      NSString *name() const;

      Animal(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModuleNullable_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullable_Animal:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModuleNullable {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<std::optional<bool>> const1;
          RCTRequired<std::optional<double>> const2;
          RCTRequired<NSString *> const3;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeSampleTurboModuleNullableSpec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;
- (NSNumber * _Nullable)getBool:(NSNumber *)arg;
- (NSNumber * _Nullable)getNumber:(NSNumber *)arg;
- (NSString * _Nullable)getString:(NSString * _Nullable)arg;
- (NSArray<id<NSObject>> * _Nullable)getArray:(NSArray * _Nullable)arg;
- (NSDictionary * _Nullable)getObject:(NSDictionary * _Nullable)arg;
- (NSDictionary * _Nullable)getObjectShape:(JS::NativeSampleTurboModuleNullable::SpecGetObjectShapeArg &)arg;
- (NSDictionary * _Nullable)getAlias:(JS::NativeSampleTurboModuleNullable::Animal &)arg;
- (NSNumber * _Nullable)getRootTag:(NSNumber *)arg;
- (NSDictionary * _Nullable)getValue:(NSNumber *)x
                                   y:(NSString * _Nullable)y
                                   z:(NSDictionary * _Nullable)z;
- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithPromise:(NSNumber *)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullable::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullable::Constants::Builder>)getConstants;

@end

@interface NativeSampleTurboModuleNullableSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModuleNullable'
   */
  class JSI_EXPORT NativeSampleTurboModuleNullableSpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModuleNullableSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeSampleTurboModuleNullableAndOptional {
    struct SpecGetObjectShapeArg {
      std::optional<double> prop() const;

      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModuleNullableAndOptional {
    struct Animal {
      NSString *name() const;

      Animal(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModuleNullableAndOptional_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullableAndOptional_Animal:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModuleNullableAndOptional {
    struct Constants {

      struct Builder {
        struct Input {
          std::optional<bool> const1;
          std::optional<double> const2;
          NSString *const3;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeSampleTurboModuleNullableAndOptionalSpec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;
- (NSNumber * _Nullable)getBool:(NSNumber *)arg;
- (NSNumber * _Nullable)getNumber:(NSNumber *)arg;
- (NSString * _Nullable)getString:(NSString * _Nullable)arg;
- (NSArray<id<NSObject>> * _Nullable)getArray:(NSArray * _Nullable)arg;
- (NSDictionary * _Nullable)getObject:(NSDictionary * _Nullable)arg;
- (NSDictionary *)getObjectShape:(JS::NativeSampleTurboModuleNullableAndOptional::SpecGetObjectShapeArg &)arg;
- (NSDictionary * _Nullable)getAlias:(JS::NativeSampleTurboModuleNullableAndOptional::Animal &)arg;
- (NSNumber * _Nullable)getRootTag:(NSNumber *)arg;
- (NSDictionary * _Nullable)getValue:(NSNumber *)x
                                   y:(NSString * _Nullable)y
                                   z:(NSDictionary * _Nullable)z;
- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithPromise:(NSNumber *)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder>)getConstants;

@end

@interface NativeSampleTurboModuleNullableAndOptionalSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModuleNullableAndOptional'
   */
  class JSI_EXPORT NativeSampleTurboModuleNullableAndOptionalSpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModuleNullableAndOptionalSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeSampleTurboModuleOptional {
    struct SpecGetObjectShapeArg {
      std::optional<double> prop() const;

      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModuleOptional_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleOptional_SpecGetObjectShapeArg:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModuleOptional {
    struct Animal {
      NSString *name() const;

      Animal(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSampleTurboModuleOptional_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleOptional_Animal:(id)json;
@end
namespace JS {
  namespace NativeSampleTurboModuleOptional {
    struct Constants {

      struct Builder {
        struct Input {
          std::optional<bool> const1;
          std::optional<double> const2;
          NSString *const3;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeSampleTurboModuleOptionalSpec <RCTBridgeModule, RCTTurboModule>

- (void)voidFunc;
- (NSNumber *)getBool:(NSNumber *)arg;
- (NSNumber *)getNumber:(NSNumber *)arg;
- (NSString *)getString:(NSString *)arg;
- (NSArray<id<NSObject>> *)getArray:(NSArray *)arg;
- (NSDictionary *)getObject:(NSDictionary *)arg;
- (NSDictionary *)getObjectShape:(JS::NativeSampleTurboModuleOptional::SpecGetObjectShapeArg &)arg;
- (NSDictionary *)getAlias:(JS::NativeSampleTurboModuleOptional::Animal &)arg;
- (NSNumber *)getRootTag:(NSNumber *)arg;
- (NSDictionary *)getValue:(NSNumber *)x
                         y:(NSString *)y
                         z:(NSDictionary *)z;
- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
- (void)getValueWithPromise:(NSNumber *)error
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleOptional::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleOptional::Constants::Builder>)getConstants;

@end

@interface NativeSampleTurboModuleOptionalSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSampleTurboModuleOptional'
   */
  class JSI_EXPORT NativeSampleTurboModuleOptionalSpecJSI : public ObjCTurboModule {
  public:
    NativeSampleTurboModuleOptionalSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

@protocol NativeStringTurboModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSString *)getString:(NSString *)arg;
- (NSString *)getStringWithAlias:(NSString *)arg;

@end

@interface NativeStringTurboModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeStringTurboModule'
   */
  class JSI_EXPORT NativeStringTurboModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeStringTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react



inline NSString *JS::NativeEnumTurboModule::StateType::state() const
{
  id const p = _v[@\\"state\\"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeEnumTurboModule::StateTypeWithEnums::state() const
{
  id const p = _v[@\\"state\\"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeEnumTurboModule::StateTypeWithEnums::regular() const
{
  id const p = _v[@\\"regular\\"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeEnumTurboModule::StateTypeWithEnums::str() const
{
  id const p = _v[@\\"str\\"];
  return RCTBridgingToString(p);
}
inline double JS::NativeEnumTurboModule::StateTypeWithEnums::num() const
{
  id const p = _v[@\\"num\\"];
  return RCTBridgingToDouble(p);
}
inline NSString *JS::NativeEnumTurboModule::StateTypeWithEnums::lowerCase() const
{
  id const p = _v[@\\"lowerCase\\"];
  return RCTBridgingToString(p);
}


inline bool JS::NativeObjectTurboModule::SpecDifficultObjectAE::D() const
{
  id const p = _v[@\\"D\\"];
  return RCTBridgingToBool(p);
}
inline double JS::NativeObjectTurboModule::SpecDifficultObjectAE::E() const
{
  id const p = _v[@\\"E\\"];
  return RCTBridgingToDouble(p);
}
inline NSString *JS::NativeObjectTurboModule::SpecDifficultObjectAE::F() const
{
  id const p = _v[@\\"F\\"];
  return RCTBridgingToString(p);
}
inline bool JS::NativeObjectTurboModule::SpecDifficultObjectA::D() const
{
  id const p = _v[@\\"D\\"];
  return RCTBridgingToBool(p);
}
inline JS::NativeObjectTurboModule::SpecDifficultObjectAE JS::NativeObjectTurboModule::SpecDifficultObjectA::E() const
{
  id const p = _v[@\\"E\\"];
  return JS::NativeObjectTurboModule::SpecDifficultObjectAE(p);
}
inline NSString *JS::NativeObjectTurboModule::SpecDifficultObjectA::F() const
{
  id const p = _v[@\\"F\\"];
  return RCTBridgingToString(p);
}
inline JS::NativeObjectTurboModule::ConstantsEEE::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D.get();
  d[@\\"D\\"] = @(D);
  auto E = i.E.get();
  d[@\\"E\\"] = @(E);
  auto F = i.F.get();
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeObjectTurboModule::ConstantsEEE::Builder::Builder(ConstantsEEE i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeObjectTurboModule::ConstantsEE::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D.get();
  d[@\\"D\\"] = @(D);
  auto E = i.E.get();
  d[@\\"E\\"] = E.buildUnsafeRawValue();
  auto F = i.F.get();
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeObjectTurboModule::ConstantsEE::Builder::Builder(ConstantsEE i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeObjectTurboModule::ConstantsE::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D.get();
  d[@\\"D\\"] = @(D);
  auto E = i.E.get();
  d[@\\"E\\"] = E.buildUnsafeRawValue();
  auto F = i.F.get();
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeObjectTurboModule::ConstantsE::Builder::Builder(ConstantsE i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeObjectTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D.get();
  d[@\\"D\\"] = @(D);
  auto E = i.E.get();
  d[@\\"E\\"] = E.buildUnsafeRawValue();
  auto F = i.F.get();
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeObjectTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeOptionalObjectTurboModule::ConstantsEEE::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D;
  d[@\\"D\\"] = D.has_value() ? @((BOOL)D.value()) : nil;
  auto E = i.E;
  d[@\\"E\\"] = E.has_value() ? @((double)E.value()) : nil;
  auto F = i.F;
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeOptionalObjectTurboModule::ConstantsEEE::Builder::Builder(ConstantsEEE i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeOptionalObjectTurboModule::ConstantsEE::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D;
  d[@\\"D\\"] = D.has_value() ? @((BOOL)D.value()) : nil;
  auto E = i.E;
  d[@\\"E\\"] = E.has_value() ? E.value().buildUnsafeRawValue() : nil;
  auto F = i.F;
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeOptionalObjectTurboModule::ConstantsEE::Builder::Builder(ConstantsEE i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeOptionalObjectTurboModule::ConstantsE::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D;
  d[@\\"D\\"] = D.has_value() ? @((BOOL)D.value()) : nil;
  auto E = i.E;
  d[@\\"E\\"] = E.has_value() ? E.value().buildUnsafeRawValue() : nil;
  auto F = i.F;
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeOptionalObjectTurboModule::ConstantsE::Builder::Builder(ConstantsE i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeOptionalObjectTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto D = i.D;
  d[@\\"D\\"] = D.has_value() ? @((BOOL)D.value()) : nil;
  auto A = i.A;
  d[@\\"A\\"] = A;
  auto E = i.E;
  d[@\\"E\\"] = E.has_value() ? E.value().buildUnsafeRawValue() : nil;
  auto F = i.F;
  d[@\\"F\\"] = F;
  return d;
}) {}
inline JS::NativeOptionalObjectTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline NSString *JS::NativePartialAnnotationTurboModule::SpecGetSomeObjFromPartialSomeObjValue::a() const
{
  id const p = _v[@\\"a\\"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<bool> JS::NativePartialAnnotationTurboModule::SpecGetSomeObjFromPartialSomeObjValue::b() const
{
  id const p = _v[@\\"b\\"];
  return RCTBridgingToOptionalBool(p);
}
inline NSString *JS::NativePartialAnnotationTurboModule::SpecGetPartialPartialValue1::a() const
{
  id const p = _v[@\\"a\\"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<bool> JS::NativePartialAnnotationTurboModule::SpecGetPartialPartialValue1::b() const
{
  id const p = _v[@\\"b\\"];
  return RCTBridgingToOptionalBool(p);
}
inline NSString *JS::NativePartialAnnotationTurboModule::SpecGetPartialPartialValue2::a() const
{
  id const p = _v[@\\"a\\"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<bool> JS::NativePartialAnnotationTurboModule::SpecGetPartialPartialValue2::b() const
{
  id const p = _v[@\\"b\\"];
  return RCTBridgingToOptionalBool(p);
}

inline double JS::NativeSampleTurboModule::SpecGetObjectShapeArg::prop() const
{
  id const p = _v[@\\"prop\\"];
  return RCTBridgingToDouble(p);
}
inline NSString *JS::NativeSampleTurboModule::Animal::name() const
{
  id const p = _v[@\\"name\\"];
  return RCTBridgingToString(p);
}
inline JS::NativeSampleTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto const1 = i.const1.get();
  d[@\\"const1\\"] = @(const1);
  auto const2 = i.const2.get();
  d[@\\"const2\\"] = @(const2);
  auto const3 = i.const3.get();
  d[@\\"const3\\"] = const3;
  return d;
}) {}
inline JS::NativeSampleTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto prop = i.prop.get();
  d[@\\"prop\\"] = @(prop);
  return d;
}) {}
inline JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder::Builder(ConstantsIdElement i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeSampleTurboModuleArrays::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto const1 = i.const1.get();
  d[@\\"const1\\"] = RCTConvertVecToArray(const1, ^id(bool el_) { return @(el_); });
  auto const2 = i.const2.get();
  d[@\\"const2\\"] = RCTConvertVecToArray(const2, ^id(double el_) { return @(el_); });
  auto const3 = i.const3.get();
  d[@\\"const3\\"] = RCTConvertVecToArray(const3, ^id(NSString * el_) { return el_; });
  auto id_ = i.id_;
  d[@\\"id\\"] = RCTConvertOptionalVecToArray(id_, ^id(std::optional<JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder> el_) { return el_.has_value() ? el_.value().buildUnsafeRawValue() : nil; });
  return d;
}) {}
inline JS::NativeSampleTurboModuleArrays::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline std::optional<double> JS::NativeSampleTurboModuleNullable::SpecGetObjectShapeArg::prop() const
{
  id const p = _v[@\\"prop\\"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeSampleTurboModuleNullable::Animal::name() const
{
  id const p = _v[@\\"name\\"];
  return RCTBridgingToOptionalString(p);
}
inline JS::NativeSampleTurboModuleNullable::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto const1 = i.const1.get();
  d[@\\"const1\\"] = const1.has_value() ? @((BOOL)const1.value()) : nil;
  auto const2 = i.const2.get();
  d[@\\"const2\\"] = const2.has_value() ? @((double)const2.value()) : nil;
  auto const3 = i.const3.get();
  d[@\\"const3\\"] = const3;
  return d;
}) {}
inline JS::NativeSampleTurboModuleNullable::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline std::optional<double> JS::NativeSampleTurboModuleNullableAndOptional::SpecGetObjectShapeArg::prop() const
{
  id const p = _v[@\\"prop\\"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeSampleTurboModuleNullableAndOptional::Animal::name() const
{
  id const p = _v[@\\"name\\"];
  return RCTBridgingToOptionalString(p);
}
inline JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto const1 = i.const1;
  d[@\\"const1\\"] = const1.has_value() ? @((BOOL)const1.value()) : nil;
  auto const2 = i.const2;
  d[@\\"const2\\"] = const2.has_value() ? @((double)const2.value()) : nil;
  auto const3 = i.const3;
  d[@\\"const3\\"] = const3;
  return d;
}) {}
inline JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline std::optional<double> JS::NativeSampleTurboModuleOptional::SpecGetObjectShapeArg::prop() const
{
  id const p = _v[@\\"prop\\"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeSampleTurboModuleOptional::Animal::name() const
{
  id const p = _v[@\\"name\\"];
  return RCTBridgingToOptionalString(p);
}
inline JS::NativeSampleTurboModuleOptional::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto const1 = i.const1;
  d[@\\"const1\\"] = const1.has_value() ? @((BOOL)const1.value()) : nil;
  auto const2 = i.const2;
  d[@\\"const2\\"] = const2.has_value() ? @((double)const2.value()) : nil;
  auto const3 = i.const3;
  d[@\\"const3\\"] = const3;
  return d;
}) {}
inline JS::NativeSampleTurboModuleOptional::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}

NS_ASSUME_NONNULL_END
#endif // RNCodegenModuleFixtures_H
"
`;

exports[`GenerateModuleObjCpp can generate an implementation file NativeModule specs 1`] = `
"/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import \\"RNCodegenModuleFixtures.h\\"


@implementation NativeArrayTurboModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeArrayTurboModuleSpecJSI_getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeArrayTurboModuleSpecJSI_getReadOnlyArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getReadOnlyArray\\", @selector(getReadOnlyArray:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeArrayTurboModuleSpecJSI_getArrayWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArrayWithAlias\\", @selector(getArrayWithAlias:b:), args, count);
    }

  NativeArrayTurboModuleSpecJSI::NativeArrayTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeArrayTurboModuleSpecJSI_getArray};
        
        
        methodMap_[\\"getReadOnlyArray\\"] = MethodMetadata {1, __hostFunction_NativeArrayTurboModuleSpecJSI_getReadOnlyArray};
        
        
        methodMap_[\\"getArrayWithAlias\\"] = MethodMetadata {2, __hostFunction_NativeArrayTurboModuleSpecJSI_getArrayWithAlias};
        
  }
} // namespace facebook::react

@implementation NativeBooleanTurboModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeBooleanTurboModuleSpecJSI_getBoolean(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, \\"getBoolean\\", @selector(getBoolean:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeBooleanTurboModuleSpecJSI_getBooleanWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, \\"getBooleanWithAlias\\", @selector(getBooleanWithAlias:), args, count);
    }

  NativeBooleanTurboModuleSpecJSI::NativeBooleanTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_[\\"getBoolean\\"] = MethodMetadata {1, __hostFunction_NativeBooleanTurboModuleSpecJSI_getBoolean};
        
        
        methodMap_[\\"getBooleanWithAlias\\"] = MethodMetadata {1, __hostFunction_NativeBooleanTurboModuleSpecJSI_getBooleanWithAlias};
        
  }
} // namespace facebook::react

@implementation NativeCallbackTurboModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeCallbackTurboModuleSpecJSI_getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCallbackTurboModuleSpecJSI_getValueWithCallbackWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallbackWithAlias\\", @selector(getValueWithCallbackWithAlias:), args, count);
    }

  NativeCallbackTurboModuleSpecJSI::NativeCallbackTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeCallbackTurboModuleSpecJSI_getValueWithCallback};
        
        
        methodMap_[\\"getValueWithCallbackWithAlias\\"] = MethodMetadata {1, __hostFunction_NativeCallbackTurboModuleSpecJSI_getValueWithCallbackWithAlias};
        
  }
} // namespace facebook::react

@implementation NativeEnumTurboModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeEnumTurboModule_StateType)
+ (RCTManagedPointer *)JS_NativeEnumTurboModule_StateType:(id)json
{
  return facebook::react::managedPointer<JS::NativeEnumTurboModule::StateType>(json);
}
@end
@implementation RCTCxxConvert (NativeEnumTurboModule_StateTypeWithEnums)
+ (RCTManagedPointer *)JS_NativeEnumTurboModule_StateTypeWithEnums:(id)json
{
  return facebook::react::managedPointer<JS::NativeEnumTurboModule::StateTypeWithEnums>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeEnumTurboModuleSpecJSI_getStatusRegular(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getStatusRegular\\", @selector(getStatusRegular:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeEnumTurboModuleSpecJSI_getStatusStr(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getStatusStr\\", @selector(getStatusStr:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeEnumTurboModuleSpecJSI_getStatusNum(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getStatusNum\\", @selector(getStatusNum:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeEnumTurboModuleSpecJSI_getStatusLowerCase(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getStatusLowerCase\\", @selector(getStatusLowerCase:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeEnumTurboModuleSpecJSI_getStateType(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getStateType\\", @selector(getStateType:b:c:d:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeEnumTurboModuleSpecJSI_getStateTypeWithEnums(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getStateTypeWithEnums\\", @selector(getStateTypeWithEnums:), args, count);
    }

  NativeEnumTurboModuleSpecJSI::NativeEnumTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_[\\"getStatusRegular\\"] = MethodMetadata {1, __hostFunction_NativeEnumTurboModuleSpecJSI_getStatusRegular};
        setMethodArgConversionSelector(@\\"getStatusRegular\\", 0, @\\"JS_NativeEnumTurboModule_StateType:\\");
        
        methodMap_[\\"getStatusStr\\"] = MethodMetadata {1, __hostFunction_NativeEnumTurboModuleSpecJSI_getStatusStr};
        setMethodArgConversionSelector(@\\"getStatusStr\\", 0, @\\"JS_NativeEnumTurboModule_StateType:\\");
        
        methodMap_[\\"getStatusNum\\"] = MethodMetadata {1, __hostFunction_NativeEnumTurboModuleSpecJSI_getStatusNum};
        setMethodArgConversionSelector(@\\"getStatusNum\\", 0, @\\"JS_NativeEnumTurboModule_StateType:\\");
        
        methodMap_[\\"getStatusLowerCase\\"] = MethodMetadata {1, __hostFunction_NativeEnumTurboModuleSpecJSI_getStatusLowerCase};
        setMethodArgConversionSelector(@\\"getStatusLowerCase\\", 0, @\\"JS_NativeEnumTurboModule_StateType:\\");
        
        methodMap_[\\"getStateType\\"] = MethodMetadata {4, __hostFunction_NativeEnumTurboModuleSpecJSI_getStateType};
        
        
        methodMap_[\\"getStateTypeWithEnums\\"] = MethodMetadata {1, __hostFunction_NativeEnumTurboModuleSpecJSI_getStateTypeWithEnums};
        setMethodArgConversionSelector(@\\"getStateTypeWithEnums\\", 0, @\\"JS_NativeEnumTurboModule_StateTypeWithEnums:\\");
  }
} // namespace facebook::react

@implementation NativeNullableTurboModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeNullableTurboModuleSpecJSI_getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, \\"getBool\\", @selector(getBool:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeNullableTurboModuleSpecJSI_getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeNullableTurboModuleSpecJSI_getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeNullableTurboModuleSpecJSI_getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeNullableTurboModuleSpecJSI_getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObject\\", @selector(getObject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeNullableTurboModuleSpecJSI_getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:reject:), args, count);
    }

  NativeNullableTurboModuleSpecJSI::NativeNullableTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeNullableTurboModuleSpecJSI_getBool};
        
        
        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeNullableTurboModuleSpecJSI_getNumber};
        
        
        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeNullableTurboModuleSpecJSI_getString};
        
        
        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeNullableTurboModuleSpecJSI_getArray};
        
        
        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeNullableTurboModuleSpecJSI_getObject};
        
        
        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {0, __hostFunction_NativeNullableTurboModuleSpecJSI_getValueWithPromise};
        
  }
} // namespace facebook::react

@implementation NativeNumberTurboModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeNumberTurboModuleSpecJSI_getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeNumberTurboModuleSpecJSI_getNumberWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumberWithAlias\\", @selector(getNumberWithAlias:), args, count);
    }

  NativeNumberTurboModuleSpecJSI::NativeNumberTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeNumberTurboModuleSpecJSI_getNumber};
        
        
        methodMap_[\\"getNumberWithAlias\\"] = MethodMetadata {1, __hostFunction_NativeNumberTurboModuleSpecJSI_getNumberWithAlias};
        
  }
} // namespace facebook::react

@implementation NativeObjectTurboModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeObjectTurboModule_SpecDifficultObjectAE)
+ (RCTManagedPointer *)JS_NativeObjectTurboModule_SpecDifficultObjectAE:(id)json
{
  return facebook::react::managedPointer<JS::NativeObjectTurboModule::SpecDifficultObjectAE>(json);
}
@end
@implementation RCTCxxConvert (NativeObjectTurboModule_SpecDifficultObjectA)
+ (RCTManagedPointer *)JS_NativeObjectTurboModule_SpecDifficultObjectA:(id)json
{
  return facebook::react::managedPointer<JS::NativeObjectTurboModule::SpecDifficultObjectA>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeObjectTurboModuleSpecJSI_getGenericObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getGenericObject\\", @selector(getGenericObject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeObjectTurboModuleSpecJSI_getGenericObjectReadOnly(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getGenericObjectReadOnly\\", @selector(getGenericObjectReadOnly:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeObjectTurboModuleSpecJSI_getGenericObjectWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getGenericObjectWithAlias\\", @selector(getGenericObjectWithAlias:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeObjectTurboModuleSpecJSI_difficultObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"difficultObject\\", @selector(difficultObject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeObjectTurboModuleSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", @selector(getConstants), args, count);
    }

  NativeObjectTurboModuleSpecJSI::NativeObjectTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_[\\"getGenericObject\\"] = MethodMetadata {1, __hostFunction_NativeObjectTurboModuleSpecJSI_getGenericObject};
        
        
        methodMap_[\\"getGenericObjectReadOnly\\"] = MethodMetadata {1, __hostFunction_NativeObjectTurboModuleSpecJSI_getGenericObjectReadOnly};
        
        
        methodMap_[\\"getGenericObjectWithAlias\\"] = MethodMetadata {1, __hostFunction_NativeObjectTurboModuleSpecJSI_getGenericObjectWithAlias};
        
        
        methodMap_[\\"difficultObject\\"] = MethodMetadata {1, __hostFunction_NativeObjectTurboModuleSpecJSI_difficultObject};
        setMethodArgConversionSelector(@\\"difficultObject\\", 0, @\\"JS_NativeObjectTurboModule_SpecDifficultObjectA:\\");
        
        methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeObjectTurboModuleSpecJSI_getConstants};
        
  }
} // namespace facebook::react

@implementation NativeOptionalObjectTurboModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeOptionalObjectTurboModuleSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", @selector(getConstants), args, count);
    }

  NativeOptionalObjectTurboModuleSpecJSI::NativeOptionalObjectTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeOptionalObjectTurboModuleSpecJSI_getConstants};
        
  }
} // namespace facebook::react

@implementation NativePartialAnnotationTurboModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativePartialAnnotationTurboModule_SpecGetSomeObjFromPartialSomeObjValue)
+ (RCTManagedPointer *)JS_NativePartialAnnotationTurboModule_SpecGetSomeObjFromPartialSomeObjValue:(id)json
{
  return facebook::react::managedPointer<JS::NativePartialAnnotationTurboModule::SpecGetSomeObjFromPartialSomeObjValue>(json);
}
@end
@implementation RCTCxxConvert (NativePartialAnnotationTurboModule_SpecGetPartialPartialValue1)
+ (RCTManagedPointer *)JS_NativePartialAnnotationTurboModule_SpecGetPartialPartialValue1:(id)json
{
  return facebook::react::managedPointer<JS::NativePartialAnnotationTurboModule::SpecGetPartialPartialValue1>(json);
}
@end
@implementation RCTCxxConvert (NativePartialAnnotationTurboModule_SpecGetPartialPartialValue2)
+ (RCTManagedPointer *)JS_NativePartialAnnotationTurboModule_SpecGetPartialPartialValue2:(id)json
{
  return facebook::react::managedPointer<JS::NativePartialAnnotationTurboModule::SpecGetPartialPartialValue2>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativePartialAnnotationTurboModuleSpecJSI_getSomeObj(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getSomeObj\\", @selector(getSomeObj), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePartialAnnotationTurboModuleSpecJSI_getPartialSomeObj(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getPartialSomeObj\\", @selector(getPartialSomeObj), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePartialAnnotationTurboModuleSpecJSI_getSomeObjFromPartialSomeObj(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getSomeObjFromPartialSomeObj\\", @selector(getSomeObjFromPartialSomeObj:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePartialAnnotationTurboModuleSpecJSI_getPartialPartial(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getPartialPartial\\", @selector(getPartialPartial:value2:), args, count);
    }

  NativePartialAnnotationTurboModuleSpecJSI::NativePartialAnnotationTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_[\\"getSomeObj\\"] = MethodMetadata {0, __hostFunction_NativePartialAnnotationTurboModuleSpecJSI_getSomeObj};
        
        
        methodMap_[\\"getPartialSomeObj\\"] = MethodMetadata {0, __hostFunction_NativePartialAnnotationTurboModuleSpecJSI_getPartialSomeObj};
        
        
        methodMap_[\\"getSomeObjFromPartialSomeObj\\"] = MethodMetadata {1, __hostFunction_NativePartialAnnotationTurboModuleSpecJSI_getSomeObjFromPartialSomeObj};
        setMethodArgConversionSelector(@\\"getSomeObjFromPartialSomeObj\\", 0, @\\"JS_NativePartialAnnotationTurboModule_SpecGetSomeObjFromPartialSomeObjValue:\\");
        
        methodMap_[\\"getPartialPartial\\"] = MethodMetadata {2, __hostFunction_NativePartialAnnotationTurboModuleSpecJSI_getPartialPartial};
        setMethodArgConversionSelector(@\\"getPartialPartial\\", 0, @\\"JS_NativePartialAnnotationTurboModule_SpecGetPartialPartialValue1:\\");
        setMethodArgConversionSelector(@\\"getPartialPartial\\", 1, @\\"JS_NativePartialAnnotationTurboModule_SpecGetPartialPartialValue2:\\");
  }
} // namespace facebook::react

@implementation NativePromiseTurboModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativePromiseTurboModuleSpecJSI_getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePromiseTurboModuleSpecJSI_getValueWithPromiseWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromiseWithAlias\\", @selector(getValueWithPromiseWithAlias:resolve:reject:), args, count);
    }

  NativePromiseTurboModuleSpecJSI::NativePromiseTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativePromiseTurboModuleSpecJSI_getValueWithPromise};
        
        
        methodMap_[\\"getValueWithPromiseWithAlias\\"] = MethodMetadata {1, __hostFunction_NativePromiseTurboModuleSpecJSI_getValueWithPromiseWithAlias};
        
  }
} // namespace facebook::react

@implementation NativeSampleTurboModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeSampleTurboModule_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecGetObjectShapeArg:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModule::SpecGetObjectShapeArg>(json);
}
@end
@implementation RCTCxxConvert (NativeSampleTurboModule_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModule_Animal:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModule::Animal>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"voidFunc\\", @selector(voidFunc), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, \\"getBool\\", @selector(getBool:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObject\\", @selector(getObject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getObjectShape(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObjectShape\\", @selector(getObjectShape:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getAlias\\", @selector(getAlias:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getRootTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getRootTag\\", @selector(getRootTag:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getValue(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getValue\\", @selector(getValue:getValuegetValuegetValuegetValuegetValuey:z:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", @selector(getConstants), args, count);
    }

  NativeSampleTurboModuleSpecJSI::NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleSpecJSI_voidFunc};
        
        
        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getBool};
        
        
        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getNumber};
        
        
        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getString};
        
        
        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getArray};
        
        
        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getObject};
        
        
        methodMap_[\\"getObjectShape\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getObjectShape};
        setMethodArgConversionSelector(@\\"getObjectShape\\", 0, @\\"JS_NativeSampleTurboModule_SpecGetObjectShapeArg:\\");
        
        methodMap_[\\"getAlias\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getAlias};
        setMethodArgConversionSelector(@\\"getAlias\\", 0, @\\"JS_NativeSampleTurboModule_Animal:\\");
        
        methodMap_[\\"getRootTag\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getRootTag};
        
        
        methodMap_[\\"getValue\\"] = MethodMetadata {3, __hostFunction_NativeSampleTurboModuleSpecJSI_getValue};
        
        
        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getValueWithCallback};
        
        
        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getValueWithPromise};
        
        
        methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleSpecJSI_getConstants};
        
  }
} // namespace facebook::react

@implementation NativeSampleTurboModuleArraysSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"voidFunc\\", @selector(voidFunc), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getBool\\", @selector(getBool:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getNumber\\", @selector(getNumber:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getString\\", @selector(getString:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getObject\\", @selector(getObject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getObjectShape(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getObjectShape\\", @selector(getObjectShape:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getAlias\\", @selector(getAlias:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getRootTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getRootTag\\", @selector(getRootTag:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getValue(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getValue\\", @selector(getValue:y:z:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", @selector(getConstants), args, count);
    }

  NativeSampleTurboModuleArraysSpecJSI::NativeSampleTurboModuleArraysSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_voidFunc};
        
        
        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getBool};
        
        
        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getNumber};
        
        
        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getString};
        
        
        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getArray};
        
        
        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getObject};
        
        
        methodMap_[\\"getObjectShape\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getObjectShape};
        
        
        methodMap_[\\"getAlias\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getAlias};
        
        
        methodMap_[\\"getRootTag\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getRootTag};
        
        
        methodMap_[\\"getValue\\"] = MethodMetadata {3, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getValue};
        
        
        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getValueWithCallback};
        
        
        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getValueWithPromise};
        
        
        methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getConstants};
        
  }
} // namespace facebook::react

@implementation NativeSampleTurboModuleNullableSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeSampleTurboModuleNullable_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullable_SpecGetObjectShapeArg:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModuleNullable::SpecGetObjectShapeArg>(json);
}
@end
@implementation RCTCxxConvert (NativeSampleTurboModuleNullable_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullable_Animal:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModuleNullable::Animal>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"voidFunc\\", @selector(voidFunc), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, \\"getBool\\", @selector(getBool:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObject\\", @selector(getObject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getObjectShape(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObjectShape\\", @selector(getObjectShape:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getAlias\\", @selector(getAlias:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getRootTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getRootTag\\", @selector(getRootTag:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getValue(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getValue\\", @selector(getValue:y:z:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", @selector(getConstants), args, count);
    }

  NativeSampleTurboModuleNullableSpecJSI::NativeSampleTurboModuleNullableSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_voidFunc};
        
        
        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getBool};
        
        
        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getNumber};
        
        
        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getString};
        
        
        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getArray};
        
        
        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getObject};
        
        
        methodMap_[\\"getObjectShape\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getObjectShape};
        setMethodArgConversionSelector(@\\"getObjectShape\\", 0, @\\"JS_NativeSampleTurboModuleNullable_SpecGetObjectShapeArg:\\");
        
        methodMap_[\\"getAlias\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getAlias};
        setMethodArgConversionSelector(@\\"getAlias\\", 0, @\\"JS_NativeSampleTurboModuleNullable_Animal:\\");
        
        methodMap_[\\"getRootTag\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getRootTag};
        
        
        methodMap_[\\"getValue\\"] = MethodMetadata {3, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getValue};
        
        
        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getValueWithCallback};
        
        
        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getValueWithPromise};
        
        
        methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getConstants};
        
  }
} // namespace facebook::react

@implementation NativeSampleTurboModuleNullableAndOptionalSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModuleNullableAndOptional::SpecGetObjectShapeArg>(json);
}
@end
@implementation RCTCxxConvert (NativeSampleTurboModuleNullableAndOptional_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullableAndOptional_Animal:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModuleNullableAndOptional::Animal>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"voidFunc\\", @selector(voidFunc), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, \\"getBool\\", @selector(getBool:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObject\\", @selector(getObject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getObjectShape(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObjectShape\\", @selector(getObjectShape:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getAlias\\", @selector(getAlias:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getRootTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getRootTag\\", @selector(getRootTag:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getValue(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getValue\\", @selector(getValue:y:z:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", @selector(getConstants), args, count);
    }

  NativeSampleTurboModuleNullableAndOptionalSpecJSI::NativeSampleTurboModuleNullableAndOptionalSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_voidFunc};
        
        
        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getBool};
        
        
        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getNumber};
        
        
        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getString};
        
        
        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getArray};
        
        
        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getObject};
        
        
        methodMap_[\\"getObjectShape\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getObjectShape};
        setMethodArgConversionSelector(@\\"getObjectShape\\", 0, @\\"JS_NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg:\\");
        
        methodMap_[\\"getAlias\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getAlias};
        setMethodArgConversionSelector(@\\"getAlias\\", 0, @\\"JS_NativeSampleTurboModuleNullableAndOptional_Animal:\\");
        
        methodMap_[\\"getRootTag\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getRootTag};
        
        
        methodMap_[\\"getValue\\"] = MethodMetadata {3, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getValue};
        
        
        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getValueWithCallback};
        
        
        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getValueWithPromise};
        
        
        methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getConstants};
        
  }
} // namespace facebook::react

@implementation NativeSampleTurboModuleOptionalSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeSampleTurboModuleOptional_SpecGetObjectShapeArg)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleOptional_SpecGetObjectShapeArg:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModuleOptional::SpecGetObjectShapeArg>(json);
}
@end
@implementation RCTCxxConvert (NativeSampleTurboModuleOptional_Animal)
+ (RCTManagedPointer *)JS_NativeSampleTurboModuleOptional_Animal:(id)json
{
  return facebook::react::managedPointer<JS::NativeSampleTurboModuleOptional::Animal>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"voidFunc\\", @selector(voidFunc), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, \\"getBool\\", @selector(getBool:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObject\\", @selector(getObject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getObjectShape(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObjectShape\\", @selector(getObjectShape:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getAlias\\", @selector(getAlias:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getRootTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getRootTag\\", @selector(getRootTag:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getValue(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getValue\\", @selector(getValue:y:z:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", @selector(getConstants), args, count);
    }

  NativeSampleTurboModuleOptionalSpecJSI::NativeSampleTurboModuleOptionalSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_voidFunc};
        
        
        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getBool};
        
        
        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getNumber};
        
        
        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getString};
        
        
        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getArray};
        
        
        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getObject};
        
        
        methodMap_[\\"getObjectShape\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getObjectShape};
        setMethodArgConversionSelector(@\\"getObjectShape\\", 0, @\\"JS_NativeSampleTurboModuleOptional_SpecGetObjectShapeArg:\\");
        
        methodMap_[\\"getAlias\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getAlias};
        setMethodArgConversionSelector(@\\"getAlias\\", 0, @\\"JS_NativeSampleTurboModuleOptional_Animal:\\");
        
        methodMap_[\\"getRootTag\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getRootTag};
        
        
        methodMap_[\\"getValue\\"] = MethodMetadata {3, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getValue};
        
        
        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getValueWithCallback};
        
        
        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getValueWithPromise};
        
        
        methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getConstants};
        
  }
} // namespace facebook::react

@implementation NativeStringTurboModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeStringTurboModuleSpecJSI_getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeStringTurboModuleSpecJSI_getStringWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getStringWithAlias\\", @selector(getStringWithAlias:), args, count);
    }

  NativeStringTurboModuleSpecJSI::NativeStringTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeStringTurboModuleSpecJSI_getString};
        
        
        methodMap_[\\"getStringWithAlias\\"] = MethodMetadata {1, __hostFunction_NativeStringTurboModuleSpecJSI_getStringWithAlias};
        
  }
} // namespace facebook::react
"
`;
