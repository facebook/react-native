// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Babel plugin inline view configs can inline config for CommandsWithComplexCoverageNativeComponent.js 1`] = `
"// @flow

const codegenNativeCommands = require('codegenNativeCommands');
const codegenNativeComponent = require('codegenNativeComponent');
import type { ViewProps } from 'ViewPropTypes';
import type { NativeComponentType } from 'codegenNativeComponent';
type ModuleProps = $ReadOnly<{|
  ...ViewProps
|}>;
type NativeType = NativeComponentType<ModuleProps>;
interface NativeCommands {
  +seek: (viewRef: React.ElementRef<NativeType>, position: number) => void,
  +stop: (viewRef: React.ElementRef<NativeType>) => void,
}
const NativeComponentRegistry = require('react-native/Libraries/NativeComponent/NativeComponentRegistry');
let nativeComponentName = 'Module';
export const __INTERNAL_VIEW_CONFIG = {
  uiViewClassName: \\"Module\\",
  validAttributes: {}
};
export default NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);"
`;

exports[`Babel plugin inline view configs can inline config for CommandsWithSimpleCoverageNativeComponent.js 1`] = `
"// @flow

const codegenNativeCommands = require('codegenNativeCommands');
const codegenNativeComponent = require('codegenNativeComponent');
import type { ViewProps } from 'ViewPropTypes';
import type { NativeComponentType } from 'codegenNativeComponent';
type ModuleProps = $ReadOnly<{|
  ...ViewProps
|}>;
type NativeType = NativeComponentType<ModuleProps>;
interface NativeCommands {
  +pause: (viewRef: React.ElementRef<NativeType>) => void,
  +play: (viewRef: React.ElementRef<NativeType>) => void,
}
const NativeComponentRegistry = require('react-native/Libraries/NativeComponent/NativeComponentRegistry');
let nativeComponentName = 'Module';
export const __INTERNAL_VIEW_CONFIG = {
  uiViewClassName: \\"Module\\",
  validAttributes: {}
};
export default NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);"
`;

exports[`Babel plugin inline view configs can inline config for CommandsWithTypeCastCoverageNativeComponent.js 1`] = `
"// @flow

const codegenNativeCommands = require('codegenNativeCommands');
const codegenNativeComponent = require('codegenNativeComponent');
import type { ViewProps } from 'ViewPropTypes';
import type { NativeComponentType } from 'codegenNativeComponent';
type ModuleProps = $ReadOnly<{|
  ...ViewProps
|}>;
type NativeType = NativeComponentType<ModuleProps>;
interface NativeCommands {
  +mute: (viewRef: React.ElementRef<NativeType>) => void,
  +unmute: (viewRef: React.ElementRef<NativeType>) => void,
}
const NativeComponentRegistry = require('react-native/Libraries/NativeComponent/NativeComponentRegistry');
let nativeComponentName = 'Module';
export const __INTERNAL_VIEW_CONFIG = {
  uiViewClassName: \\"Module\\",
  validAttributes: {}
};
export default NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);"
`;

exports[`Babel plugin inline view configs can inline config for FullNativeComponent.js 1`] = `
"// @flow

const codegenNativeCommands = require('codegenNativeCommands');
const codegenNativeComponent = require('codegenNativeComponent');
import type { Int32, BubblingEventHandler, DirectEventHandler, WithDefault } from 'CodegenFlowtypes';
import type { NativeComponentType } from 'codegenNativeComponent';
import type { ViewProps } from 'ViewPropTypes';
type ModuleProps = $ReadOnly<{|
  ...ViewProps,
  // Props
  boolean_default_true_optional_both?: WithDefault<boolean, true>,
  // Events
  onDirectEventDefinedInlineNull: DirectEventHandler<null>,
  onBubblingEventDefinedInlineNull: BubblingEventHandler<null>,
|}>;
type NativeType = NativeComponentType<ModuleProps>;
interface NativeCommands {
  +hotspotUpdate: (viewRef: React.ElementRef<NativeType>, x: Int32, y: Int32) => void,
  +scrollTo: (viewRef: React.ElementRef<NativeType>, y: Int32, animated: boolean) => void,
}
const NativeComponentRegistry = require('react-native/Libraries/NativeComponent/NativeComponentRegistry');
const {
  ConditionallyIgnoredEventHandlers
} = require('react-native/Libraries/NativeComponent/ViewConfigIgnore');
const {
  dispatchCommand
} = require(\\"react-native/Libraries/ReactNative/RendererProxy\\");
let nativeComponentName = 'RCTModule';
export const __INTERNAL_VIEW_CONFIG = {
  uiViewClassName: \\"RCTModule\\",
  bubblingEventTypes: {
    topBubblingEventDefinedInlineNull: {
      phasedRegistrationNames: {
        captured: \\"onBubblingEventDefinedInlineNullCapture\\",
        bubbled: \\"onBubblingEventDefinedInlineNull\\"
      }
    }
  },
  directEventTypes: {
    topDirectEventDefinedInlineNull: {
      registrationName: \\"onDirectEventDefinedInlineNull\\"
    }
  },
  validAttributes: {
    boolean_default_true_optional_both: true,
    ...ConditionallyIgnoredEventHandlers({
      onDirectEventDefinedInlineNull: true,
      onBubblingEventDefinedInlineNull: true
    })
  }
};
export default NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
export const Commands = {
  hotspotUpdate(ref, x, y) {
    dispatchCommand(ref, \\"hotspotUpdate\\", [x, y]);
  },
  scrollTo(ref, y, animated) {
    dispatchCommand(ref, \\"scrollTo\\", [y, animated]);
  }
};"
`;

exports[`Babel plugin inline view configs can inline config for FullTypedNativeComponent.js 1`] = `
"// @flow

const codegenNativeCommands = require('codegenNativeCommands');
const codegenNativeComponent = require('codegenNativeComponent');
import type { NativeComponentType } from 'codegenNativeComponent';
import type { Int32, BubblingEventHandler, DirectEventHandler, WithDefault } from 'CodegenFlowtypes';
import type { ViewProps } from 'ViewPropTypes';
type ModuleProps = $ReadOnly<{|
  ...ViewProps,
  // Props
  boolean_default_true_optional_both?: WithDefault<boolean, true>,
  // Events
  onDirectEventDefinedInlineNull: DirectEventHandler<null>,
  onBubblingEventDefinedInlineNull: BubblingEventHandler<null>,
|}>;
type NativeType = NativeComponentType<ModuleProps>;
interface NativeCommands {
  +hotspotUpdate: (viewRef: React.ElementRef<NativeType>, x: Int32, y: Int32) => void,
  +scrollTo: (viewRef: React.ElementRef<NativeType>, y: Int32, animated: boolean) => void,
}
const NativeComponentRegistry = require('react-native/Libraries/NativeComponent/NativeComponentRegistry');
const {
  ConditionallyIgnoredEventHandlers
} = require('react-native/Libraries/NativeComponent/ViewConfigIgnore');
const {
  dispatchCommand
} = require(\\"react-native/Libraries/ReactNative/RendererProxy\\");
let nativeComponentName = 'RCTModule';
export const __INTERNAL_VIEW_CONFIG = {
  uiViewClassName: \\"RCTModule\\",
  bubblingEventTypes: {
    topBubblingEventDefinedInlineNull: {
      phasedRegistrationNames: {
        captured: \\"onBubblingEventDefinedInlineNullCapture\\",
        bubbled: \\"onBubblingEventDefinedInlineNull\\"
      }
    }
  },
  directEventTypes: {
    topDirectEventDefinedInlineNull: {
      registrationName: \\"onDirectEventDefinedInlineNull\\"
    }
  },
  validAttributes: {
    boolean_default_true_optional_both: true,
    ...ConditionallyIgnoredEventHandlers({
      onDirectEventDefinedInlineNull: true,
      onBubblingEventDefinedInlineNull: true
    })
  }
};
export default NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
export const Commands = {
  hotspotUpdate(ref, x, y) {
    dispatchCommand(ref, \\"hotspotUpdate\\", [x, y]);
  },
  scrollTo(ref, y, animated) {
    dispatchCommand(ref, \\"scrollTo\\", [y, animated]);
  }
};"
`;

exports[`Babel plugin inline view configs can inline config for NotANativeComponent.js 1`] = `
"const requireNativeComponent = require('requireNativeComponent').default;
export default 'Not a view config';"
`;

exports[`Babel plugin inline view configs fails on inline config for CommandsExportedWithDifferentNameNativeComponent.js 1`] = `
"/CommandsExportedWithDifferentNameNativeComponent.js: Native commands must be exported with the name 'Commands'
  17 | }
  18 |
> 19 | export const Foo = codegenNativeCommands<NativeCommands>();
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  20 |
  21 | export default (codegenNativeComponent<ModuleProps>('Module'): NativeType);
  22 |"
`;

exports[`Babel plugin inline view configs fails on inline config for CommandsExportedWithShorthandNativeComponent.js 1`] = `
"/CommandsExportedWithShorthandNativeComponent.js: 'Commands' is a reserved export and may only be used to export the result of codegenNativeCommands.
  19 | const Commands = 4;
  20 |
> 21 | export {Commands};
     | ^^^^^^^^^^^^^^^^^^
  22 |
  23 | export default (codegenNativeComponent<ModuleProps>('Module'): NativeType);
  24 |"
`;

exports[`Babel plugin inline view configs fails on inline config for CommandsWithComplexCoverageInvalidNativeComponent.js 1`] = `
"/CommandsWithComplexCoverageInvalidNativeComponent.js: 'Commands' is a reserved export and may only be used to export the result of codegenNativeCommands.
  14 |
  15 | // Complex coverage instrumentation with invalid nested structure - should fail
> 16 | export const Commands = (
     | ^
  17 |   cov_xyz789().f[1]++,
  18 |   cov_xyz789().s[2]++,
  19 |   {"
`;

exports[`Babel plugin inline view configs fails on inline config for CommandsWithCoverageInvalidNativeComponent.js 1`] = `
"/CommandsWithCoverageInvalidNativeComponent.js: 'Commands' is a reserved export and may only be used to export the result of codegenNativeCommands.
  14 |
  15 | // Coverage instrumentation of invalid Commands export - should still fail
> 16 | export const Commands = (cov_1234567890().s[0]++, {
     | ^
  17 |   hotspotUpdate: () => {},
  18 |   scrollTo: () => {},
  19 | });"
`;

exports[`Babel plugin inline view configs fails on inline config for CommandsWithCoverageTypeCastInvalidNativeComponent.js 1`] = `
"/CommandsWithCoverageTypeCastInvalidNativeComponent.js: 'Commands' is a reserved export and may only be used to export the result of codegenNativeCommands.
  19 |
  20 | // Coverage instrumentation with type cast but wrong function - should fail
> 21 | export const Commands: NativeCommands = (cov_cast123().s[0]++, invalidFunction({
     | ^
  22 |   supportedCommands: ['pause', 'play'],
  23 | }));
  24 |"
`;

exports[`Babel plugin inline view configs fails on inline config for CommandsWithCoverageWrongFunctionNativeComponent.js 1`] = `
"/CommandsWithCoverageWrongFunctionNativeComponent.js: 'Commands' is a reserved export and may only be used to export the result of codegenNativeCommands.
  14 |
  15 | // Coverage instrumentation of wrong function call - should fail
> 16 | export const Commands = (cov_abcdef123().s[0]++, someOtherFunction({
     | ^
  17 |   supportedCommands: ['pause', 'play'],
  18 | }));
  19 |"
`;

exports[`Babel plugin inline view configs fails on inline config for CommandsWithCoverageWrongNameNativeComponent.js 1`] = `
"/CommandsWithCoverageWrongNameNativeComponent.js: Native commands must be exported with the name 'Commands'
  20 |
  21 | // Coverage instrumentation with correct function but wrong export name - should fail
> 22 | export const WrongName = (cov_wrong123().s[0]++, codegenNativeCommands<NativeCommands>({
     | ^
  23 |   supportedCommands: ['pause', 'play'],
  24 | }));
  25 |"
`;

exports[`Babel plugin inline view configs fails on inline config for OtherCommandsExportNativeComponent.js 1`] = `
"/OtherCommandsExportNativeComponent.js: 'Commands' is a reserved export and may only be used to export the result of codegenNativeCommands.
  17 | }
  18 |
> 19 | export const Commands = 4;
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^
  20 |
  21 | export default (codegenNativeComponent<ModuleProps>('Module'): NativeType);
  22 |"
`;
