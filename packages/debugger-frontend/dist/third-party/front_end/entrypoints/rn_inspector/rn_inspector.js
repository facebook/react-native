import"../shell/shell.js";import*as e from"../../core/common/common.js";import*as t from"../../core/i18n/i18n.js";import*as o from"../../core/root/root.js";import*as i from"../../ui/legacy/legacy.js";import*as n from"../../core/sdk/sdk.js";import*as r from"../../models/issues_manager/issues_manager.js";import*as a from"../../models/extensions/extensions.js";import*as s from"../../models/workspace/workspace.js";import*as l from"../../panels/network/forward/forward.js";import*as c from"../../core/host/host.js";import*as d from"../../core/rn_experiments/rn_experiments.js";import*as g from"../main/main.js";const u={toggleDeviceToolbar:"Toggle device toolbar",captureScreenshot:"Capture screenshot",captureFullSizeScreenshot:"Capture full size screenshot",captureNodeScreenshot:"Capture node screenshot",showMediaQueries:"Show media queries",device:"device",hideMediaQueries:"Hide media queries",showRulers:"Show rulers in the Device Mode toolbar",hideRulers:"Hide rulers in the Device Mode toolbar",showDeviceFrame:"Show device frame",hideDeviceFrame:"Hide device frame"},w=t.i18n.registerUIStrings("panels/emulation/emulation-meta.ts",u),m=t.i18n.getLazilyComputedLocalizedString.bind(void 0,w);let p;async function v(){return p||(p=await import("../../panels/emulation/emulation.js")),p}i.ActionRegistration.registerActionExtension({category:"MOBILE",actionId:"emulation.toggle-device-mode",toggleable:!0,loadActionDelegate:async()=>new((await v()).DeviceModeWrapper.ActionDelegate),condition:o.Runtime.conditions.canDock,title:m(u.toggleDeviceToolbar),iconClass:"devices",bindings:[{platform:"windows,linux",shortcut:"Shift+Ctrl+M"},{platform:"mac",shortcut:"Shift+Meta+M"}]}),i.ActionRegistration.registerActionExtension({actionId:"emulation.capture-screenshot",category:"SCREENSHOT",loadActionDelegate:async()=>new((await v()).DeviceModeWrapper.ActionDelegate),condition:o.Runtime.conditions.canDock,title:m(u.captureScreenshot)}),i.ActionRegistration.registerActionExtension({actionId:"emulation.capture-full-height-screenshot",category:"SCREENSHOT",loadActionDelegate:async()=>new((await v()).DeviceModeWrapper.ActionDelegate),condition:o.Runtime.conditions.canDock,title:m(u.captureFullSizeScreenshot)}),i.ActionRegistration.registerActionExtension({actionId:"emulation.capture-node-screenshot",category:"SCREENSHOT",loadActionDelegate:async()=>new((await v()).DeviceModeWrapper.ActionDelegate),condition:o.Runtime.conditions.canDock,title:m(u.captureNodeScreenshot)}),e.Settings.registerSettingExtension({category:"MOBILE",settingName:"show-media-query-inspector",settingType:"boolean",defaultValue:!1,options:[{value:!0,title:m(u.showMediaQueries)},{value:!1,title:m(u.hideMediaQueries)}],tags:[m(u.device)]}),e.Settings.registerSettingExtension({category:"MOBILE",settingName:"emulation.show-rulers",settingType:"boolean",defaultValue:!1,options:[{value:!0,title:m(u.showRulers)},{value:!1,title:m(u.hideRulers)}],tags:[m(u.device)]}),e.Settings.registerSettingExtension({category:"MOBILE",settingName:"emulation.show-device-outline",settingType:"boolean",defaultValue:!1,options:[{value:!0,title:m(u.showDeviceFrame)},{value:!1,title:m(u.hideDeviceFrame)}],tags:[m(u.device)]}),i.Toolbar.registerToolbarItem({actionId:"emulation.toggle-device-mode",condition:o.Runtime.conditions.canDock,location:"main-toolbar-left",order:1,loadItem:void 0,separator:void 0}),e.AppProvider.registerAppProvider({loadAppProvider:async()=>(await v()).AdvancedApp.AdvancedAppProvider.instance(),condition:o.Runtime.conditions.canDock,order:0}),i.ContextMenu.registerItem({location:"deviceModeMenu/save",order:12,actionId:"emulation.capture-screenshot"}),i.ContextMenu.registerItem({location:"deviceModeMenu/save",order:13,actionId:"emulation.capture-full-height-screenshot"});const h={sensors:"Sensors",geolocation:"geolocation",timezones:"timezones",locale:"locale",locales:"locales",accelerometer:"accelerometer",deviceOrientation:"device orientation",locations:"Locations",touch:"Touch",devicebased:"Device-based",forceEnabled:"Force enabled",emulateIdleDetectorState:"Emulate Idle Detector state",noIdleEmulation:"No idle emulation",userActiveScreenUnlocked:"User active, screen unlocked",userActiveScreenLocked:"User active, screen locked",userIdleScreenUnlocked:"User idle, screen unlocked",userIdleScreenLocked:"User idle, screen locked",showSensors:"Show Sensors",showLocations:"Show Locations",cpuPressure:"CPU Pressure",noPressureEmulation:"No override",nominal:"Nominal",fair:"Fair",serious:"Serious",critical:"Critical"},R=t.i18n.registerUIStrings("panels/sensors/sensors-meta.ts",h),k=t.i18n.getLazilyComputedLocalizedString.bind(void 0,R);let y;async function S(){return y||(y=await import("../../panels/sensors/sensors.js")),y}i.ViewManager.registerViewExtension({location:"drawer-view",commandPrompt:k(h.showSensors),title:k(h.sensors),id:"sensors",persistence:"closeable",order:100,loadView:async()=>new((await S()).SensorsView.SensorsView),tags:[k(h.geolocation),k(h.timezones),k(h.locale),k(h.locales),k(h.accelerometer),k(h.deviceOrientation)]}),i.ViewManager.registerViewExtension({location:"settings-view",id:"emulation-locations",commandPrompt:k(h.showLocations),title:k(h.locations),order:40,loadView:async()=>new((await S()).LocationsSettingsTab.LocationsSettingsTab),settings:["emulation.locations"],iconName:"location-on"}),e.Settings.registerSettingExtension({storageType:"Synced",settingName:"emulation.locations",settingType:"array",defaultValue:[{title:"Berlin",lat:52.520007,long:13.404954,timezoneId:"Europe/Berlin",locale:"de-DE"},{title:"London",lat:51.507351,long:-.127758,timezoneId:"Europe/London",locale:"en-GB"},{title:"Moscow",lat:55.755826,long:37.6173,timezoneId:"Europe/Moscow",locale:"ru-RU"},{title:"Mountain View",lat:37.386052,long:-122.083851,timezoneId:"America/Los_Angeles",locale:"en-US"},{title:"Mumbai",lat:19.075984,long:72.877656,timezoneId:"Asia/Kolkata",locale:"mr-IN"},{title:"San Francisco",lat:37.774929,long:-122.419416,timezoneId:"America/Los_Angeles",locale:"en-US"},{title:"Shanghai",lat:31.230416,long:121.473701,timezoneId:"Asia/Shanghai",locale:"zh-Hans-CN"},{title:"SÃ£o Paulo",lat:-23.55052,long:-46.633309,timezoneId:"America/Sao_Paulo",locale:"pt-BR"},{title:"Tokyo",lat:35.689487,long:139.691706,timezoneId:"Asia/Tokyo",locale:"ja-JP"}]}),e.Settings.registerSettingExtension({title:k(h.cpuPressure),reloadRequired:!0,settingName:"emulation.cpu-pressure",settingType:"enum",defaultValue:"none",options:[{value:"none",title:k(h.noPressureEmulation),text:k(h.noPressureEmulation)},{value:"nominal",title:k(h.nominal),text:k(h.nominal)},{value:"fair",title:k(h.fair),text:k(h.fair)},{value:"serious",title:k(h.serious),text:k(h.serious)},{value:"critical",title:k(h.critical),text:k(h.critical)}]}),e.Settings.registerSettingExtension({title:k(h.touch),reloadRequired:!0,settingName:"emulation.touch",settingType:"enum",defaultValue:"none",options:[{value:"none",title:k(h.devicebased),text:k(h.devicebased)},{value:"force",title:k(h.forceEnabled),text:k(h.forceEnabled)}]}),e.Settings.registerSettingExtension({title:k(h.emulateIdleDetectorState),settingName:"emulation.idle-detection",settingType:"enum",defaultValue:"none",options:[{value:"none",title:k(h.noIdleEmulation),text:k(h.noIdleEmulation)},{value:'{"isUserActive":true,"isScreenUnlocked":true}',title:k(h.userActiveScreenUnlocked),text:k(h.userActiveScreenUnlocked)},{value:'{"isUserActive":true,"isScreenUnlocked":false}',title:k(h.userActiveScreenLocked),text:k(h.userActiveScreenLocked)},{value:'{"isUserActive":false,"isScreenUnlocked":true}',title:k(h.userIdleScreenUnlocked),text:k(h.userIdleScreenUnlocked)},{value:'{"isUserActive":false,"isScreenUnlocked":false}',title:k(h.userIdleScreenLocked),text:k(h.userIdleScreenLocked)}]});const N={developerResources:"Developer resources",showDeveloperResources:"Show Developer resources"},f=t.i18n.registerUIStrings("panels/developer_resources/developer_resources-meta.ts",N),A=t.i18n.getLazilyComputedLocalizedString.bind(void 0,f);let T;async function E(){return T||(T=await import("../../panels/developer_resources/developer_resources.js")),T}i.ViewManager.registerViewExtension({location:"drawer-view",id:"developer-resources",title:A(N.developerResources),commandPrompt:A(N.showDeveloperResources),order:100,persistence:"closeable",loadView:async()=>new((await E()).DeveloperResourcesView.DeveloperResourcesView)}),e.Revealer.registerRevealer({contextTypes:()=>[n.PageResourceLoader.ResourceKey],destination:e.Revealer.RevealerDestination.DEVELOPER_RESOURCES_PANEL,loadRevealer:async()=>new((await E()).DeveloperResourcesView.DeveloperResourcesRevealer)});const b={rendering:"Rendering",showRendering:"Show Rendering",paint:"paint",layout:"layout",fps:"fps",cssMediaType:"CSS media type",cssMediaFeature:"CSS media feature",visionDeficiency:"vision deficiency",colorVisionDeficiency:"color vision deficiency",reloadPage:"Reload page",hardReloadPage:"Hard reload page",forceAdBlocking:"Force ad blocking on this site",blockAds:"Block ads on this site",showAds:"Show ads on this site, if allowed",autoOpenDevTools:"Auto-open DevTools for popups",doNotAutoOpen:"Do not auto-open DevTools for popups",disablePaused:"Disable paused state overlay",toggleCssPrefersColorSchemeMedia:"Toggle CSS media feature prefers-color-scheme"},I=t.i18n.registerUIStrings("entrypoints/inspector_main/inspector_main-meta.ts",b),D=t.i18n.getLazilyComputedLocalizedString.bind(void 0,I);let P;async function x(){return P||(P=await import("../inspector_main/inspector_main.js")),P}i.ViewManager.registerViewExtension({location:"drawer-view",id:"rendering",title:D(b.rendering),commandPrompt:D(b.showRendering),persistence:"closeable",order:50,loadView:async()=>new((await x()).RenderingOptions.RenderingOptionsView),tags:[D(b.paint),D(b.layout),D(b.fps),D(b.cssMediaType),D(b.cssMediaFeature),D(b.visionDeficiency),D(b.colorVisionDeficiency)]}),i.ActionRegistration.registerActionExtension({category:"NAVIGATION",actionId:"inspector-main.reload",loadActionDelegate:async()=>new((await x()).InspectorMain.ReloadActionDelegate),iconClass:"refresh",title:D(b.reloadPage),bindings:[{platform:"windows,linux",shortcut:"Ctrl+R"},{platform:"windows,linux",shortcut:"F5"},{platform:"mac",shortcut:"Meta+R"}]}),i.ActionRegistration.registerActionExtension({category:"NAVIGATION",actionId:"inspector-main.hard-reload",loadActionDelegate:async()=>new((await x()).InspectorMain.ReloadActionDelegate),title:D(b.hardReloadPage),bindings:[{platform:"windows,linux",shortcut:"Shift+Ctrl+R"},{platform:"windows,linux",shortcut:"Shift+F5"},{platform:"windows,linux",shortcut:"Ctrl+F5"},{platform:"windows,linux",shortcut:"Ctrl+Shift+F5"},{platform:"mac",shortcut:"Shift+Meta+R"}]}),i.ActionRegistration.registerActionExtension({actionId:"rendering.toggle-prefers-color-scheme",category:"RENDERING",title:D(b.toggleCssPrefersColorSchemeMedia),loadActionDelegate:async()=>new((await x()).RenderingOptions.ReloadActionDelegate)}),e.Settings.registerSettingExtension({category:"NETWORK",title:D(b.forceAdBlocking),settingName:"network.ad-blocking-enabled",settingType:"boolean",storageType:"Session",defaultValue:!1,options:[{value:!0,title:D(b.blockAds)},{value:!1,title:D(b.showAds)}]}),e.Settings.registerSettingExtension({category:"GLOBAL",storageType:"Synced",title:D(b.autoOpenDevTools),settingName:"auto-attach-to-created-pages",settingType:"boolean",order:2,defaultValue:!1,options:[{value:!0,title:D(b.autoOpenDevTools)},{value:!1,title:D(b.doNotAutoOpen)}]}),e.Settings.registerSettingExtension({category:"APPEARANCE",storageType:"Synced",title:D(b.disablePaused),settingName:"disable-paused-state-overlay",settingType:"boolean",defaultValue:!1}),i.Toolbar.registerToolbarItem({loadItem:async()=>(await x()).InspectorMain.NodeIndicator.instance(),order:2,location:"main-toolbar-left"}),i.Toolbar.registerToolbarItem({loadItem:async()=>(await x()).OutermostTargetSelector.OutermostTargetSelector.instance(),order:98,location:"main-toolbar-right"});const L={issues:"Issues",showIssues:"Show Issues"},M=t.i18n.registerUIStrings("panels/issues/issues-meta.ts",L),C=t.i18n.getLazilyComputedLocalizedString.bind(void 0,M);let V;async function U(){return V||(V=await import("../../panels/issues/issues.js")),V}i.ViewManager.registerViewExtension({location:"drawer-view",id:"issues-pane",title:C(L.issues),commandPrompt:C(L.showIssues),order:100,persistence:"closeable",loadView:async()=>new((await U()).IssuesPane.IssuesPane)}),e.Revealer.registerRevealer({contextTypes:()=>[r.Issue.Issue],destination:e.Revealer.RevealerDestination.ISSUES_VIEW,loadRevealer:async()=>new((await U()).IssueRevealer.IssueRevealer)});const O={throttling:"Throttling",showThrottling:"Show Throttling",goOffline:"Go offline",device:"device",throttlingTag:"throttling",enableSlowGThrottling:"Enable slow `3G` throttling",enableFastGThrottling:"Enable fast `3G` throttling",goOnline:"Go online"},W=t.i18n.registerUIStrings("panels/mobile_throttling/mobile_throttling-meta.ts",O),B=t.i18n.getLazilyComputedLocalizedString.bind(void 0,W);let z;async function q(){return z||(z=await import("../../panels/mobile_throttling/mobile_throttling.js")),z}i.ViewManager.registerViewExtension({location:"settings-view",id:"throttling-conditions",title:B(O.throttling),commandPrompt:B(O.showThrottling),order:35,loadView:async()=>new((await q()).ThrottlingSettingsTab.ThrottlingSettingsTab),settings:["custom-network-conditions","calibrated-cpu-throttling"],iconName:"performance"}),i.ActionRegistration.registerActionExtension({actionId:"network-conditions.network-offline",category:"NETWORK",title:B(O.goOffline),loadActionDelegate:async()=>new((await q()).ThrottlingManager.ActionDelegate),tags:[B(O.device),B(O.throttlingTag)]}),i.ActionRegistration.registerActionExtension({actionId:"network-conditions.network-low-end-mobile",category:"NETWORK",title:B(O.enableSlowGThrottling),loadActionDelegate:async()=>new((await q()).ThrottlingManager.ActionDelegate),tags:[B(O.device),B(O.throttlingTag)]}),i.ActionRegistration.registerActionExtension({actionId:"network-conditions.network-mid-tier-mobile",category:"NETWORK",title:B(O.enableFastGThrottling),loadActionDelegate:async()=>new((await q()).ThrottlingManager.ActionDelegate),tags:[B(O.device),B(O.throttlingTag)]}),i.ActionRegistration.registerActionExtension({actionId:"network-conditions.network-online",category:"NETWORK",title:B(O.goOnline),loadActionDelegate:async()=>new((await q()).ThrottlingManager.ActionDelegate),tags:[B(O.device),B(O.throttlingTag)]}),e.Settings.registerSettingExtension({storageType:"Synced",settingName:"custom-network-conditions",settingType:"array",defaultValue:[]});const _={showNetwork:"Show Network",network:"Network",networkExpoUnstable:"Network (Expo, unstable)",showNetworkRequestBlocking:"Show Network request blocking",networkRequestBlocking:"Network request blocking",showNetworkConditions:"Show Network conditions",networkConditions:"Network conditions",diskCache:"disk cache",networkThrottling:"network throttling",showSearch:"Show Search",search:"Search",recordNetworkLog:"Record network log",stopRecordingNetworkLog:"Stop recording network log",hideRequestDetails:"Hide request details",colorcodeResourceTypes:"Color-code resource types",colorCode:"color code",resourceType:"resource type",colorCodeByResourceType:"Color code by resource type",useDefaultColors:"Use default colors",groupNetworkLogByFrame:"Group network log by frame",netWork:"network",frame:"frame",group:"group",groupNetworkLogItemsByFrame:"Group network log items by frame",dontGroupNetworkLogItemsByFrame:"Don't group network log items by frame",clear:"Clear network log",addNetworkRequestBlockingPattern:"Add network request blocking pattern",removeAllNetworkRequestBlockingPatterns:"Remove all network request blocking patterns",allowToGenerateHarWithSensitiveData:"Allow to generate `HAR` with sensitive data",dontAllowToGenerateHarWithSensitiveData:"Don't allow to generate `HAR` with sensitive data",allowToGenerateHarWithSensitiveDataDocumentation:"By default generated HAR logs are sanitized and don't include `Cookie`, `Set-Cookie`, or `Authorization` HTTP headers. When this setting is enabled, options to export/copy HAR with sensitive data are provided."},F=t.i18n.registerUIStrings("panels/network/network-meta.ts",_),j=t.i18n.getLazilyComputedLocalizedString.bind(void 0,F),G=t.i18n.getLocalizedString.bind(void 0,F);let H;async function K(){return H||(H=await import("../../panels/network/network.js")),H}function Q(e){return void 0===H?[]:e(H)}i.ViewManager.registerViewExtension({location:"panel",id:"network",commandPrompt:j(_.showNetwork),title:()=>o.Runtime.experiments.isEnabled(o.Runtime.RNExperimentName.ENABLE_NETWORK_PANEL)?G(_.network):G(_.networkExpoUnstable),order:40,isPreviewFeature:!0,condition:o.Runtime.conditions.reactNativeUnstableNetworkPanel,loadView:async()=>(await K()).NetworkPanel.NetworkPanel.instance()}),i.ViewManager.registerViewExtension({location:"drawer-view",id:"network.blocked-urls",commandPrompt:j(_.showNetworkRequestBlocking),title:j(_.networkRequestBlocking),persistence:"closeable",order:60,loadView:async()=>new((await K()).BlockedURLsPane.BlockedURLsPane)}),i.ViewManager.registerViewExtension({location:"drawer-view",id:"network.config",commandPrompt:j(_.showNetworkConditions),title:j(_.networkConditions),persistence:"closeable",order:40,tags:[j(_.diskCache),j(_.networkThrottling),t.i18n.lockedLazyString("useragent"),t.i18n.lockedLazyString("user agent"),t.i18n.lockedLazyString("user-agent")],loadView:async()=>(await K()).NetworkConfigView.NetworkConfigView.instance()}),i.ViewManager.registerViewExtension({location:"network-sidebar",id:"network.search-network-tab",commandPrompt:j(_.showSearch),title:j(_.search),persistence:"permanent",loadView:async()=>(await K()).NetworkPanel.SearchNetworkView.instance()}),i.ActionRegistration.registerActionExtension({actionId:"network.toggle-recording",category:"NETWORK",iconClass:"record-start",toggleable:!0,toggledIconClass:"record-stop",toggleWithRedColor:!0,contextTypes:()=>Q((e=>[e.NetworkPanel.NetworkPanel])),loadActionDelegate:async()=>new((await K()).NetworkPanel.ActionDelegate),options:[{value:!0,title:j(_.recordNetworkLog)},{value:!1,title:j(_.stopRecordingNetworkLog)}],bindings:[{shortcut:"Ctrl+E",platform:"windows,linux"},{shortcut:"Meta+E",platform:"mac"}]}),i.ActionRegistration.registerActionExtension({actionId:"network.clear",category:"NETWORK",title:j(_.clear),iconClass:"clear",loadActionDelegate:async()=>new((await K()).NetworkPanel.ActionDelegate),contextTypes:()=>Q((e=>[e.NetworkPanel.NetworkPanel])),bindings:[{shortcut:"Ctrl+L"},{shortcut:"Meta+K",platform:"mac"}]}),i.ActionRegistration.registerActionExtension({actionId:"network.hide-request-details",category:"NETWORK",title:j(_.hideRequestDetails),contextTypes:()=>Q((e=>[e.NetworkPanel.NetworkPanel])),loadActionDelegate:async()=>new((await K()).NetworkPanel.ActionDelegate),bindings:[{shortcut:"Esc"}]}),i.ActionRegistration.registerActionExtension({actionId:"network.search",category:"NETWORK",title:j(_.search),contextTypes:()=>Q((e=>[e.NetworkPanel.NetworkPanel])),loadActionDelegate:async()=>new((await K()).NetworkPanel.ActionDelegate),bindings:[{platform:"mac",shortcut:"Meta+F",keybindSets:["devToolsDefault","vsCode"]},{platform:"windows,linux",shortcut:"Ctrl+F",keybindSets:["devToolsDefault","vsCode"]}]}),i.ActionRegistration.registerActionExtension({actionId:"network.add-network-request-blocking-pattern",category:"NETWORK",title:j(_.addNetworkRequestBlockingPattern),iconClass:"plus",contextTypes:()=>Q((e=>[e.BlockedURLsPane.BlockedURLsPane])),loadActionDelegate:async()=>new((await K()).BlockedURLsPane.ActionDelegate)}),i.ActionRegistration.registerActionExtension({actionId:"network.remove-all-network-request-blocking-patterns",category:"NETWORK",title:j(_.removeAllNetworkRequestBlockingPatterns),iconClass:"clear",contextTypes:()=>Q((e=>[e.BlockedURLsPane.BlockedURLsPane])),loadActionDelegate:async()=>new((await K()).BlockedURLsPane.ActionDelegate)}),e.Settings.registerSettingExtension({category:"NETWORK",storageType:"Synced",title:j(_.allowToGenerateHarWithSensitiveData),settingName:"network.show-options-to-generate-har-with-sensitive-data",settingType:"boolean",defaultValue:!1,tags:[t.i18n.lockedLazyString("HAR")],options:[{value:!0,title:j(_.allowToGenerateHarWithSensitiveData)},{value:!1,title:j(_.dontAllowToGenerateHarWithSensitiveData)}],learnMore:{url:"https://goo.gle/devtools-export-hars",tooltip:j(_.allowToGenerateHarWithSensitiveDataDocumentation)}}),e.Settings.registerSettingExtension({category:"NETWORK",storageType:"Synced",title:j(_.colorcodeResourceTypes),settingName:"network-color-code-resource-types",settingType:"boolean",defaultValue:!1,tags:[j(_.colorCode),j(_.resourceType)],options:[{value:!0,title:j(_.colorCodeByResourceType)},{value:!1,title:j(_.useDefaultColors)}]}),e.Settings.registerSettingExtension({category:"NETWORK",storageType:"Synced",title:j(_.groupNetworkLogByFrame),settingName:"network.group-by-frame",settingType:"boolean",defaultValue:!1,tags:[j(_.netWork),j(_.frame),j(_.group)],options:[{value:!0,title:j(_.groupNetworkLogItemsByFrame)},{value:!1,title:j(_.dontGroupNetworkLogItemsByFrame)}]}),i.ViewManager.registerLocationResolver({name:"network-sidebar",category:"NETWORK",loadResolver:async()=>(await K()).NetworkPanel.NetworkPanel.instance()}),i.ContextMenu.registerProvider({contextTypes:()=>[n.NetworkRequest.NetworkRequest,n.Resource.Resource,s.UISourceCode.UISourceCode,n.TraceObject.RevealableNetworkRequest],loadProvider:async()=>(await K()).NetworkPanel.NetworkPanel.instance(),experiment:void 0}),e.Revealer.registerRevealer({contextTypes:()=>[n.NetworkRequest.NetworkRequest],destination:e.Revealer.RevealerDestination.NETWORK_PANEL,loadRevealer:async()=>new((await K()).NetworkPanel.RequestRevealer)}),e.Revealer.registerRevealer({contextTypes:()=>[l.UIRequestLocation.UIRequestLocation],destination:void 0,loadRevealer:async()=>new((await K()).NetworkPanel.RequestLocationRevealer)}),e.Revealer.registerRevealer({contextTypes:()=>[l.NetworkRequestId.NetworkRequestId],destination:e.Revealer.RevealerDestination.NETWORK_PANEL,loadRevealer:async()=>new((await K()).NetworkPanel.RequestIdRevealer)}),e.Revealer.registerRevealer({contextTypes:()=>[l.UIFilter.UIRequestFilter,a.ExtensionServer.RevealableNetworkRequestFilter],destination:e.Revealer.RevealerDestination.NETWORK_PANEL,loadRevealer:async()=>new((await K()).NetworkPanel.NetworkLogWithFilterRevealer)});const J={rnWelcome:"âï¸ Welcome",showRnWelcome:"Show React Native Welcome panel",debuggerBrandName:"React Native JS Inspector"},X=t.i18n.registerUIStrings("panels/rn_welcome/rn_welcome-legacy-meta.ts",J),Y=t.i18n.getLazilyComputedLocalizedString.bind(void 0,X);let Z;i.ViewManager.registerViewExtension({location:"panel",id:"rn-welcome",title:Y(J.rnWelcome),commandPrompt:Y(J.showRnWelcome),order:-10,persistence:"permanent",loadView:async()=>(await async function(){return Z||(Z=await import("../../panels/rn_welcome/rn_welcome.js")),Z}()).RNWelcome.RNWelcomeImpl.instance({debuggerBrandName:Y(J.debuggerBrandName),showTechPreviewLabel:!0}),experiment:"react-native-specific-ui"}),c.rnPerfMetrics.registerPerfMetricsGlobalPostMessageHandler(),c.rnPerfMetrics.setLaunchId(o.Runtime.Runtime.queryParam("launchId")),c.rnPerfMetrics.setAppId(o.Runtime.Runtime.queryParam("appId")),c.rnPerfMetrics.setTelemetryInfo(JSON.parse(o.Runtime.Runtime.queryParam("telemetryInfo")||"{}")),c.rnPerfMetrics.entryPointLoadingStarted("rn_inspector"),d.RNExperimentsImpl.setIsReactNativeEntryPoint(!0),d.RNExperimentsImpl.Instance.enableExperimentsByDefault(["js-heap-profiler-enable","react-native-specific-ui"]);const $={networkTitle:"React Native",showReactNative:"Show React Native"},ee=t.i18n.registerUIStrings("entrypoints/rn_inspector/rn_inspector.ts",$),te=t.i18n.getLazilyComputedLocalizedString.bind(void 0,ee);let oe;i.ViewManager.registerViewExtension({location:"navigator-view",id:"navigator-network",title:te($.networkTitle),commandPrompt:te($.showReactNative),order:2,persistence:"permanent",loadView:async()=>(await async function(){return oe||(oe=await import("../../panels/sources/sources.js")),oe}()).SourcesNavigator.NetworkNavigatorView.instance()}),self.runtime=o.Runtime.Runtime.instance({forceNew:!0}),new g.MainImpl.MainImpl,c.rnPerfMetrics.entryPointLoadingFinished("rn_inspector");
