import"../shell/shell.js";import*as e from"../../core/common/common.js";import*as t from"../../core/i18n/i18n.js";import*as o from"../../core/root/root.js";import*as n from"../../ui/legacy/legacy.js";import*as i from"../../core/sdk/sdk.js";import*as a from"../../models/issues_manager/issues_manager.js";import*as r from"../../models/extensions/extensions.js";import*as s from"../../models/workspace/workspace.js";import*as l from"../../panels/network/forward/forward.js";import*as c from"../../core/host/host.js";import*as d from"../../core/rn_experiments/rn_experiments.js";import*as g from"../main/main.js";const m={toggleDeviceToolbar:"Toggle device toolbar",captureScreenshot:"Capture screenshot",captureFullSizeScreenshot:"Capture full size screenshot",captureNodeScreenshot:"Capture node screenshot",showMediaQueries:"Show media queries",device:"device",hideMediaQueries:"Hide media queries",showRulers:"Show rulers in the Device Mode toolbar",hideRulers:"Hide rulers in the Device Mode toolbar",showDeviceFrame:"Show device frame",hideDeviceFrame:"Hide device frame"},u=t.i18n.registerUIStrings("panels/emulation/emulation-meta.ts",m),w=t.i18n.getLazilyComputedLocalizedString.bind(void 0,u);let p;async function v(){return p||(p=await import("../../panels/emulation/emulation.js")),p}n.ActionRegistration.registerActionExtension({category:"MOBILE",actionId:"emulation.toggle-device-mode",toggleable:!0,loadActionDelegate:async()=>new((await v()).DeviceModeWrapper.ActionDelegate),condition:o.Runtime.conditions.canDock,title:w(m.toggleDeviceToolbar),iconClass:"devices",bindings:[{platform:"windows,linux",shortcut:"Shift+Ctrl+M"},{platform:"mac",shortcut:"Shift+Meta+M"}]}),n.ActionRegistration.registerActionExtension({actionId:"emulation.capture-screenshot",category:"SCREENSHOT",loadActionDelegate:async()=>new((await v()).DeviceModeWrapper.ActionDelegate),condition:o.Runtime.conditions.canDock,title:w(m.captureScreenshot)}),n.ActionRegistration.registerActionExtension({actionId:"emulation.capture-full-height-screenshot",category:"SCREENSHOT",loadActionDelegate:async()=>new((await v()).DeviceModeWrapper.ActionDelegate),condition:o.Runtime.conditions.canDock,title:w(m.captureFullSizeScreenshot)}),n.ActionRegistration.registerActionExtension({actionId:"emulation.capture-node-screenshot",category:"SCREENSHOT",loadActionDelegate:async()=>new((await v()).DeviceModeWrapper.ActionDelegate),condition:o.Runtime.conditions.canDock,title:w(m.captureNodeScreenshot)}),e.Settings.registerSettingExtension({category:"MOBILE",settingName:"show-media-query-inspector",settingType:"boolean",defaultValue:!1,options:[{value:!0,title:w(m.showMediaQueries)},{value:!1,title:w(m.hideMediaQueries)}],tags:[w(m.device)]}),e.Settings.registerSettingExtension({category:"MOBILE",settingName:"emulation.show-rulers",settingType:"boolean",defaultValue:!1,options:[{value:!0,title:w(m.showRulers)},{value:!1,title:w(m.hideRulers)}],tags:[w(m.device)]}),e.Settings.registerSettingExtension({category:"MOBILE",settingName:"emulation.show-device-outline",settingType:"boolean",defaultValue:!1,options:[{value:!0,title:w(m.showDeviceFrame)},{value:!1,title:w(m.hideDeviceFrame)}],tags:[w(m.device)]}),n.Toolbar.registerToolbarItem({actionId:"emulation.toggle-device-mode",condition:o.Runtime.conditions.canDock,location:"main-toolbar-left",order:1,loadItem:void 0,separator:void 0}),e.AppProvider.registerAppProvider({loadAppProvider:async()=>(await v()).AdvancedApp.AdvancedAppProvider.instance(),condition:o.Runtime.conditions.canDock,order:0}),n.ContextMenu.registerItem({location:"deviceModeMenu/save",order:12,actionId:"emulation.capture-screenshot"}),n.ContextMenu.registerItem({location:"deviceModeMenu/save",order:13,actionId:"emulation.capture-full-height-screenshot"});const h={sensors:"Sensors",geolocation:"geolocation",timezones:"timezones",locale:"locale",locales:"locales",accelerometer:"accelerometer",deviceOrientation:"device orientation",locations:"Locations",touch:"Touch",devicebased:"Device-based",forceEnabled:"Force enabled",emulateIdleDetectorState:"Emulate Idle Detector state",noIdleEmulation:"No idle emulation",userActiveScreenUnlocked:"User active, screen unlocked",userActiveScreenLocked:"User active, screen locked",userIdleScreenUnlocked:"User idle, screen unlocked",userIdleScreenLocked:"User idle, screen locked",showSensors:"Show Sensors",showLocations:"Show Locations",cpuPressure:"CPU Pressure",noPressureEmulation:"No override",nominal:"Nominal",fair:"Fair",serious:"Serious",critical:"Critical"},R=t.i18n.registerUIStrings("panels/sensors/sensors-meta.ts",h),y=t.i18n.getLazilyComputedLocalizedString.bind(void 0,R);let f;async function k(){return f||(f=await import("../../panels/sensors/sensors.js")),f}n.ViewManager.registerViewExtension({location:"drawer-view",commandPrompt:y(h.showSensors),title:y(h.sensors),id:"sensors",persistence:"closeable",order:100,loadView:async()=>new((await k()).SensorsView.SensorsView),tags:[y(h.geolocation),y(h.timezones),y(h.locale),y(h.locales),y(h.accelerometer),y(h.deviceOrientation)]}),n.ViewManager.registerViewExtension({location:"settings-view",id:"emulation-locations",commandPrompt:y(h.showLocations),title:y(h.locations),order:40,loadView:async()=>new((await k()).LocationsSettingsTab.LocationsSettingsTab),settings:["emulation.locations"],iconName:"location-on"}),e.Settings.registerSettingExtension({storageType:"Synced",settingName:"emulation.locations",settingType:"array",defaultValue:[{title:"Berlin",lat:52.520007,long:13.404954,timezoneId:"Europe/Berlin",locale:"de-DE"},{title:"London",lat:51.507351,long:-.127758,timezoneId:"Europe/London",locale:"en-GB"},{title:"Moscow",lat:55.755826,long:37.6173,timezoneId:"Europe/Moscow",locale:"ru-RU"},{title:"Mountain View",lat:37.386052,long:-122.083851,timezoneId:"America/Los_Angeles",locale:"en-US"},{title:"Mumbai",lat:19.075984,long:72.877656,timezoneId:"Asia/Kolkata",locale:"mr-IN"},{title:"San Francisco",lat:37.774929,long:-122.419416,timezoneId:"America/Los_Angeles",locale:"en-US"},{title:"Shanghai",lat:31.230416,long:121.473701,timezoneId:"Asia/Shanghai",locale:"zh-Hans-CN"},{title:"SÃ£o Paulo",lat:-23.55052,long:-46.633309,timezoneId:"America/Sao_Paulo",locale:"pt-BR"},{title:"Tokyo",lat:35.689487,long:139.691706,timezoneId:"Asia/Tokyo",locale:"ja-JP"}]}),e.Settings.registerSettingExtension({title:y(h.cpuPressure),reloadRequired:!0,settingName:"emulation.cpu-pressure",settingType:"enum",defaultValue:"none",options:[{value:"none",title:y(h.noPressureEmulation),text:y(h.noPressureEmulation)},{value:"nominal",title:y(h.nominal),text:y(h.nominal)},{value:"fair",title:y(h.fair),text:y(h.fair)},{value:"serious",title:y(h.serious),text:y(h.serious)},{value:"critical",title:y(h.critical),text:y(h.critical)}]}),e.Settings.registerSettingExtension({title:y(h.touch),reloadRequired:!0,settingName:"emulation.touch",settingType:"enum",defaultValue:"none",options:[{value:"none",title:y(h.devicebased),text:y(h.devicebased)},{value:"force",title:y(h.forceEnabled),text:y(h.forceEnabled)}]}),e.Settings.registerSettingExtension({title:y(h.emulateIdleDetectorState),settingName:"emulation.idle-detection",settingType:"enum",defaultValue:"none",options:[{value:"none",title:y(h.noIdleEmulation),text:y(h.noIdleEmulation)},{value:'{"isUserActive":true,"isScreenUnlocked":true}',title:y(h.userActiveScreenUnlocked),text:y(h.userActiveScreenUnlocked)},{value:'{"isUserActive":true,"isScreenUnlocked":false}',title:y(h.userActiveScreenLocked),text:y(h.userActiveScreenLocked)},{value:'{"isUserActive":false,"isScreenUnlocked":true}',title:y(h.userIdleScreenUnlocked),text:y(h.userIdleScreenUnlocked)},{value:'{"isUserActive":false,"isScreenUnlocked":false}',title:y(h.userIdleScreenLocked),text:y(h.userIdleScreenLocked)}]});const b={developerResources:"Developer resources",showDeveloperResources:"Show Developer resources"},T=t.i18n.registerUIStrings("panels/developer_resources/developer_resources-meta.ts",b),S=t.i18n.getLazilyComputedLocalizedString.bind(void 0,T);let E;async function A(){return E||(E=await import("../../panels/developer_resources/developer_resources.js")),E}n.ViewManager.registerViewExtension({location:"drawer-view",id:"developer-resources",title:S(b.developerResources),commandPrompt:S(b.showDeveloperResources),order:100,persistence:"closeable",loadView:async()=>new((await A()).DeveloperResourcesView.DeveloperResourcesView)}),e.Revealer.registerRevealer({contextTypes:()=>[i.PageResourceLoader.ResourceKey],destination:e.Revealer.RevealerDestination.DEVELOPER_RESOURCES_PANEL,loadRevealer:async()=>new((await A()).DeveloperResourcesView.DeveloperResourcesRevealer)});const N={rendering:"Rendering",showRendering:"Show Rendering",paint:"paint",layout:"layout",fps:"fps",cssMediaType:"CSS media type",cssMediaFeature:"CSS media feature",visionDeficiency:"vision deficiency",colorVisionDeficiency:"color vision deficiency",reloadPage:"Reload page",hardReloadPage:"Hard reload page",forceAdBlocking:"Force ad blocking on this site",blockAds:"Block ads on this site",showAds:"Show ads on this site, if allowed",autoOpenDevTools:"Auto-open DevTools for popups",doNotAutoOpen:"Do not auto-open DevTools for popups",disablePaused:"Disable paused state overlay",toggleCssPrefersColorSchemeMedia:"Toggle CSS media feature prefers-color-scheme"},P=t.i18n.registerUIStrings("entrypoints/inspector_main/inspector_main-meta.ts",N),x=t.i18n.getLazilyComputedLocalizedString.bind(void 0,P);let I;async function M(){return I||(I=await import("../inspector_main/inspector_main.js")),I}n.ViewManager.registerViewExtension({location:"drawer-view",id:"rendering",title:x(N.rendering),commandPrompt:x(N.showRendering),persistence:"closeable",order:50,loadView:async()=>new((await M()).RenderingOptions.RenderingOptionsView),tags:[x(N.paint),x(N.layout),x(N.fps),x(N.cssMediaType),x(N.cssMediaFeature),x(N.visionDeficiency),x(N.colorVisionDeficiency)]}),n.ActionRegistration.registerActionExtension({category:"NAVIGATION",actionId:"inspector-main.reload",loadActionDelegate:async()=>new((await M()).InspectorMain.ReloadActionDelegate),iconClass:"refresh",title:x(N.reloadPage),bindings:[{platform:"windows,linux",shortcut:"Ctrl+R"},{platform:"windows,linux",shortcut:"F5"},{platform:"mac",shortcut:"Meta+R"}]}),n.ActionRegistration.registerActionExtension({category:"NAVIGATION",actionId:"inspector-main.hard-reload",loadActionDelegate:async()=>new((await M()).InspectorMain.ReloadActionDelegate),title:x(N.hardReloadPage),bindings:[{platform:"windows,linux",shortcut:"Shift+Ctrl+R"},{platform:"windows,linux",shortcut:"Shift+F5"},{platform:"windows,linux",shortcut:"Ctrl+F5"},{platform:"windows,linux",shortcut:"Ctrl+Shift+F5"},{platform:"mac",shortcut:"Shift+Meta+R"}]}),n.ActionRegistration.registerActionExtension({actionId:"rendering.toggle-prefers-color-scheme",category:"RENDERING",title:x(N.toggleCssPrefersColorSchemeMedia),loadActionDelegate:async()=>new((await M()).RenderingOptions.ReloadActionDelegate)}),e.Settings.registerSettingExtension({category:"NETWORK",title:x(N.forceAdBlocking),settingName:"network.ad-blocking-enabled",settingType:"boolean",storageType:"Session",defaultValue:!1,options:[{value:!0,title:x(N.blockAds)},{value:!1,title:x(N.showAds)}]}),e.Settings.registerSettingExtension({category:"GLOBAL",storageType:"Synced",title:x(N.autoOpenDevTools),settingName:"auto-attach-to-created-pages",settingType:"boolean",order:2,defaultValue:!1,options:[{value:!0,title:x(N.autoOpenDevTools)},{value:!1,title:x(N.doNotAutoOpen)}]}),e.Settings.registerSettingExtension({category:"APPEARANCE",storageType:"Synced",title:x(N.disablePaused),settingName:"disable-paused-state-overlay",settingType:"boolean",defaultValue:!1}),n.Toolbar.registerToolbarItem({loadItem:async()=>(await M()).InspectorMain.NodeIndicator.instance(),order:2,location:"main-toolbar-left"}),n.Toolbar.registerToolbarItem({loadItem:async()=>(await M()).OutermostTargetSelector.OutermostTargetSelector.instance(),order:98,location:"main-toolbar-right"});const D={issues:"Issues",showIssues:"Show Issues"},L=t.i18n.registerUIStrings("panels/issues/issues-meta.ts",D),V=t.i18n.getLazilyComputedLocalizedString.bind(void 0,L);let C;async function O(){return C||(C=await import("../../panels/issues/issues.js")),C}n.ViewManager.registerViewExtension({location:"drawer-view",id:"issues-pane",title:V(D.issues),commandPrompt:V(D.showIssues),order:100,persistence:"closeable",loadView:async()=>new((await O()).IssuesPane.IssuesPane)}),e.Revealer.registerRevealer({contextTypes:()=>[a.Issue.Issue],destination:e.Revealer.RevealerDestination.ISSUES_VIEW,loadRevealer:async()=>new((await O()).IssueRevealer.IssueRevealer)});const F={throttling:"Throttling",showThrottling:"Show Throttling",goOffline:"Go offline",device:"device",throttlingTag:"throttling",enableSlowGThrottling:"Enable slow `3G` throttling",enableFastGThrottling:"Enable fast `3G` throttling",goOnline:"Go online"},U=t.i18n.registerUIStrings("panels/mobile_throttling/mobile_throttling-meta.ts",F),_=t.i18n.getLazilyComputedLocalizedString.bind(void 0,U);let B;async function z(){return B||(B=await import("../../panels/mobile_throttling/mobile_throttling.js")),B}n.ViewManager.registerViewExtension({location:"settings-view",id:"throttling-conditions",title:_(F.throttling),commandPrompt:_(F.showThrottling),order:35,loadView:async()=>new((await z()).ThrottlingSettingsTab.ThrottlingSettingsTab),settings:["custom-network-conditions","calibrated-cpu-throttling"],iconName:"performance"}),n.ActionRegistration.registerActionExtension({actionId:"network-conditions.network-offline",category:"NETWORK",title:_(F.goOffline),loadActionDelegate:async()=>new((await z()).ThrottlingManager.ActionDelegate),tags:[_(F.device),_(F.throttlingTag)]}),n.ActionRegistration.registerActionExtension({actionId:"network-conditions.network-low-end-mobile",category:"NETWORK",title:_(F.enableSlowGThrottling),loadActionDelegate:async()=>new((await z()).ThrottlingManager.ActionDelegate),tags:[_(F.device),_(F.throttlingTag)]}),n.ActionRegistration.registerActionExtension({actionId:"network-conditions.network-mid-tier-mobile",category:"NETWORK",title:_(F.enableFastGThrottling),loadActionDelegate:async()=>new((await z()).ThrottlingManager.ActionDelegate),tags:[_(F.device),_(F.throttlingTag)]}),n.ActionRegistration.registerActionExtension({actionId:"network-conditions.network-online",category:"NETWORK",title:_(F.goOnline),loadActionDelegate:async()=>new((await z()).ThrottlingManager.ActionDelegate),tags:[_(F.device),_(F.throttlingTag)]}),e.Settings.registerSettingExtension({storageType:"Synced",settingName:"custom-network-conditions",settingType:"array",defaultValue:[]});const W={showNetwork:"Show Network",network:"Network",networkExpoUnstable:"Network (Expo, unstable)",showNetworkRequestBlocking:"Show Network request blocking",networkRequestBlocking:"Network request blocking",showNetworkConditions:"Show Network conditions",networkConditions:"Network conditions",diskCache:"disk cache",networkThrottling:"network throttling",showSearch:"Show Search",search:"Search",recordNetworkLog:"Record network log",stopRecordingNetworkLog:"Stop recording network log",hideRequestDetails:"Hide request details",colorcodeResourceTypes:"Color-code resource types",colorCode:"color code",resourceType:"resource type",colorCodeByResourceType:"Color code by resource type",useDefaultColors:"Use default colors",groupNetworkLogByFrame:"Group network log by frame",netWork:"network",frame:"frame",group:"group",groupNetworkLogItemsByFrame:"Group network log items by frame",dontGroupNetworkLogItemsByFrame:"Don't group network log items by frame",clear:"Clear network log",addNetworkRequestBlockingPattern:"Add network request blocking pattern",removeAllNetworkRequestBlockingPatterns:"Remove all network request blocking patterns",allowToGenerateHarWithSensitiveData:"Allow to generate `HAR` with sensitive data",dontAllowToGenerateHarWithSensitiveData:"Don't allow to generate `HAR` with sensitive data",allowToGenerateHarWithSensitiveDataDocumentation:"By default generated HAR logs are sanitized and don't include `Cookie`, `Set-Cookie`, or `Authorization` HTTP headers. When this setting is enabled, options to export/copy HAR with sensitive data are provided."},q=t.i18n.registerUIStrings("panels/network/network-meta.ts",W),j=t.i18n.getLazilyComputedLocalizedString.bind(void 0,q),G=t.i18n.getLocalizedString.bind(void 0,q);let H;async function K(){return H||(H=await import("../../panels/network/network.js")),H}function Y(e){return void 0===H?[]:e(H)}n.ViewManager.registerViewExtension({location:"panel",id:"network",commandPrompt:j(W.showNetwork),title:()=>o.Runtime.experiments.isEnabled(o.Runtime.RNExperimentName.ENABLE_NETWORK_PANEL)?G(W.network):G(W.networkExpoUnstable),order:40,isPreviewFeature:!0,condition:o.Runtime.conditions.reactNativeUnstableNetworkPanel,loadView:async()=>(await K()).NetworkPanel.NetworkPanel.instance()}),n.ViewManager.registerViewExtension({location:"drawer-view",id:"network.blocked-urls",commandPrompt:j(W.showNetworkRequestBlocking),title:j(W.networkRequestBlocking),persistence:"closeable",order:60,loadView:async()=>new((await K()).BlockedURLsPane.BlockedURLsPane)}),n.ViewManager.registerViewExtension({location:"drawer-view",id:"network.config",commandPrompt:j(W.showNetworkConditions),title:j(W.networkConditions),persistence:"closeable",order:40,tags:[j(W.diskCache),j(W.networkThrottling),t.i18n.lockedLazyString("useragent"),t.i18n.lockedLazyString("user agent"),t.i18n.lockedLazyString("user-agent")],loadView:async()=>(await K()).NetworkConfigView.NetworkConfigView.instance()}),n.ViewManager.registerViewExtension({location:"network-sidebar",id:"network.search-network-tab",commandPrompt:j(W.showSearch),title:j(W.search),persistence:"permanent",loadView:async()=>(await K()).NetworkPanel.SearchNetworkView.instance()}),n.ActionRegistration.registerActionExtension({actionId:"network.toggle-recording",category:"NETWORK",iconClass:"record-start",toggleable:!0,toggledIconClass:"record-stop",toggleWithRedColor:!0,contextTypes:()=>Y((e=>[e.NetworkPanel.NetworkPanel])),loadActionDelegate:async()=>new((await K()).NetworkPanel.ActionDelegate),options:[{value:!0,title:j(W.recordNetworkLog)},{value:!1,title:j(W.stopRecordingNetworkLog)}],bindings:[{shortcut:"Ctrl+E",platform:"windows,linux"},{shortcut:"Meta+E",platform:"mac"}]}),n.ActionRegistration.registerActionExtension({actionId:"network.clear",category:"NETWORK",title:j(W.clear),iconClass:"clear",loadActionDelegate:async()=>new((await K()).NetworkPanel.ActionDelegate),contextTypes:()=>Y((e=>[e.NetworkPanel.NetworkPanel])),bindings:[{shortcut:"Ctrl+L"},{shortcut:"Meta+K",platform:"mac"}]}),n.ActionRegistration.registerActionExtension({actionId:"network.hide-request-details",category:"NETWORK",title:j(W.hideRequestDetails),contextTypes:()=>Y((e=>[e.NetworkPanel.NetworkPanel])),loadActionDelegate:async()=>new((await K()).NetworkPanel.ActionDelegate),bindings:[{shortcut:"Esc"}]}),n.ActionRegistration.registerActionExtension({actionId:"network.search",category:"NETWORK",title:j(W.search),contextTypes:()=>Y((e=>[e.NetworkPanel.NetworkPanel])),loadActionDelegate:async()=>new((await K()).NetworkPanel.ActionDelegate),bindings:[{platform:"mac",shortcut:"Meta+F",keybindSets:["devToolsDefault","vsCode"]},{platform:"windows,linux",shortcut:"Ctrl+F",keybindSets:["devToolsDefault","vsCode"]}]}),n.ActionRegistration.registerActionExtension({actionId:"network.add-network-request-blocking-pattern",category:"NETWORK",title:j(W.addNetworkRequestBlockingPattern),iconClass:"plus",contextTypes:()=>Y((e=>[e.BlockedURLsPane.BlockedURLsPane])),loadActionDelegate:async()=>new((await K()).BlockedURLsPane.ActionDelegate)}),n.ActionRegistration.registerActionExtension({actionId:"network.remove-all-network-request-blocking-patterns",category:"NETWORK",title:j(W.removeAllNetworkRequestBlockingPatterns),iconClass:"clear",contextTypes:()=>Y((e=>[e.BlockedURLsPane.BlockedURLsPane])),loadActionDelegate:async()=>new((await K()).BlockedURLsPane.ActionDelegate)}),e.Settings.registerSettingExtension({category:"NETWORK",storageType:"Synced",title:j(W.allowToGenerateHarWithSensitiveData),settingName:"network.show-options-to-generate-har-with-sensitive-data",settingType:"boolean",defaultValue:!1,tags:[t.i18n.lockedLazyString("HAR")],options:[{value:!0,title:j(W.allowToGenerateHarWithSensitiveData)},{value:!1,title:j(W.dontAllowToGenerateHarWithSensitiveData)}],learnMore:{url:"https://goo.gle/devtools-export-hars",tooltip:j(W.allowToGenerateHarWithSensitiveDataDocumentation)}}),e.Settings.registerSettingExtension({category:"NETWORK",storageType:"Synced",title:j(W.colorcodeResourceTypes),settingName:"network-color-code-resource-types",settingType:"boolean",defaultValue:!1,tags:[j(W.colorCode),j(W.resourceType)],options:[{value:!0,title:j(W.colorCodeByResourceType)},{value:!1,title:j(W.useDefaultColors)}]}),e.Settings.registerSettingExtension({category:"NETWORK",storageType:"Synced",title:j(W.groupNetworkLogByFrame),settingName:"network.group-by-frame",settingType:"boolean",defaultValue:!1,tags:[j(W.netWork),j(W.frame),j(W.group)],options:[{value:!0,title:j(W.groupNetworkLogItemsByFrame)},{value:!1,title:j(W.dontGroupNetworkLogItemsByFrame)}]}),n.ViewManager.registerLocationResolver({name:"network-sidebar",category:"NETWORK",loadResolver:async()=>(await K()).NetworkPanel.NetworkPanel.instance()}),n.ContextMenu.registerProvider({contextTypes:()=>[i.NetworkRequest.NetworkRequest,i.Resource.Resource,s.UISourceCode.UISourceCode,i.TraceObject.RevealableNetworkRequest],loadProvider:async()=>(await K()).NetworkPanel.NetworkPanel.instance(),experiment:void 0}),e.Revealer.registerRevealer({contextTypes:()=>[i.NetworkRequest.NetworkRequest],destination:e.Revealer.RevealerDestination.NETWORK_PANEL,loadRevealer:async()=>new((await K()).NetworkPanel.RequestRevealer)}),e.Revealer.registerRevealer({contextTypes:()=>[l.UIRequestLocation.UIRequestLocation],destination:void 0,loadRevealer:async()=>new((await K()).NetworkPanel.RequestLocationRevealer)}),e.Revealer.registerRevealer({contextTypes:()=>[l.NetworkRequestId.NetworkRequestId],destination:e.Revealer.RevealerDestination.NETWORK_PANEL,loadRevealer:async()=>new((await K()).NetworkPanel.RequestIdRevealer)}),e.Revealer.registerRevealer({contextTypes:()=>[l.UIFilter.UIRequestFilter,r.ExtensionServer.RevealableNetworkRequestFilter],destination:e.Revealer.RevealerDestination.NETWORK_PANEL,loadRevealer:async()=>new((await K()).NetworkPanel.NetworkLogWithFilterRevealer)});const Q={title:"Components â",command:"Show React DevTools Components panel"},J=t.i18n.registerUIStrings("panels/react_devtools/react_devtools_components-meta.ts",Q),$=t.i18n.getLazilyComputedLocalizedString.bind(void 0,J);let X;n.ViewManager.registerViewExtension({location:"panel",id:"react-devtools-components",title:$(Q.title),commandPrompt:$(Q.command),persistence:"permanent",order:1e3,loadView:async()=>new((await async function(){return X||(X=await import("../../panels/react_devtools/react_devtools.js")),X}()).ReactDevToolsComponentsView.ReactDevToolsComponentsViewImpl)});const Z={title:"Profiler â",command:"Show React DevTools Profiler panel"},ee=t.i18n.registerUIStrings("panels/react_devtools/react_devtools_profiler-meta.ts",Z),te=t.i18n.getLazilyComputedLocalizedString.bind(void 0,ee);let oe;n.ViewManager.registerViewExtension({location:"panel",id:"react-devtools-profiler",title:te(Z.title),commandPrompt:te(Z.command),persistence:"permanent",order:1e3,loadView:async()=>new((await async function(){return oe||(oe=await import("../../panels/react_devtools/react_devtools.js")),oe}()).ReactDevToolsProfilerView.ReactDevToolsProfilerViewImpl)});const ne={rnWelcome:"Welcome",showRnWelcome:"Show React Native Welcome panel",debuggerBrandName:"React Native DevTools"},ie=t.i18n.registerUIStrings("panels/rn_welcome/rn_welcome-meta.ts",ne),ae=t.i18n.getLazilyComputedLocalizedString.bind(void 0,ie);let re;n.ViewManager.registerViewExtension({location:"panel",id:"rn-welcome",title:ae(ne.rnWelcome),commandPrompt:ae(ne.showRnWelcome),order:-10,persistence:"permanent",loadView:async()=>(await async function(){return re||(re=await import("../../panels/rn_welcome/rn_welcome.js")),re}()).RNWelcome.RNWelcomeImpl.instance({debuggerBrandName:ae(ne.debuggerBrandName),showBetaLabel:!1,showDocs:!0}),experiment:"react-native-specific-ui"});const se={performance:"Performance",showPerformance:"Show Performance",record:"Record",stop:"Stop",recordAndReload:"Record and reload",saveProfile:"Save profileâ¦",loadProfile:"Load profileâ¦",previousFrame:"Previous frame",nextFrame:"Next frame",showRecentTimelineSessions:"Show recent timeline sessions",previousRecording:"Previous recording",nextRecording:"Next recording",hideChromeFrameInLayersView:"Hide `chrome` frame in Layers view"},le=t.i18n.registerUIStrings("panels/timeline/timeline-meta.ts",se),ce=t.i18n.getLazilyComputedLocalizedString.bind(void 0,le);let de;async function ge(){return de||(de=await import("../../panels/timeline/timeline.js")),de}function me(e){return void 0===de?[]:e(de)}n.ViewManager.registerViewExtension({location:"panel",id:"timeline",title:ce(se.performance),commandPrompt:ce(se.showPerformance),order:50,experiment:!0===globalThis.FB_ONLY__enablePerformance?void 0:"enable-performance-panel",loadView:async()=>(await ge()).TimelinePanel.TimelinePanel.instance()}),n.ActionRegistration.registerActionExtension({actionId:"timeline.toggle-recording",category:"PERFORMANCE",iconClass:"record-start",toggleable:!0,toggledIconClass:"record-stop",toggleWithRedColor:!0,contextTypes:()=>me((e=>[e.TimelinePanel.TimelinePanel])),loadActionDelegate:async()=>new((await ge()).TimelinePanel.ActionDelegate),options:[{value:!0,title:ce(se.record)},{value:!1,title:ce(se.stop)}],bindings:[{platform:"windows,linux",shortcut:"Ctrl+E"},{platform:"mac",shortcut:"Meta+E"}]}),n.ActionRegistration.registerActionExtension({actionId:"timeline.record-reload",iconClass:"refresh",contextTypes:()=>me((e=>[e.TimelinePanel.TimelinePanel])),category:"PERFORMANCE",title:ce(se.recordAndReload),loadActionDelegate:async()=>new((await ge()).TimelinePanel.ActionDelegate),bindings:[{platform:"windows,linux",shortcut:"Ctrl+Shift+E"},{platform:"mac",shortcut:"Meta+Shift+E"}],experiment:"!react-native-specific-ui"}),n.ActionRegistration.registerActionExtension({category:"PERFORMANCE",actionId:"timeline.save-to-file",contextTypes:()=>me((e=>[e.TimelinePanel.TimelinePanel])),loadActionDelegate:async()=>new((await ge()).TimelinePanel.ActionDelegate),title:ce(se.saveProfile),bindings:[{platform:"windows,linux",shortcut:"Ctrl+S"},{platform:"mac",shortcut:"Meta+S"}]}),n.ActionRegistration.registerActionExtension({category:"PERFORMANCE",actionId:"timeline.load-from-file",contextTypes:()=>me((e=>[e.TimelinePanel.TimelinePanel])),loadActionDelegate:async()=>new((await ge()).TimelinePanel.ActionDelegate),title:ce(se.loadProfile),bindings:[{platform:"windows,linux",shortcut:"Ctrl+O"},{platform:"mac",shortcut:"Meta+O"}]}),n.ActionRegistration.registerActionExtension({actionId:"timeline.jump-to-previous-frame",category:"PERFORMANCE",title:ce(se.previousFrame),contextTypes:()=>me((e=>[e.TimelinePanel.TimelinePanel])),loadActionDelegate:async()=>new((await ge()).TimelinePanel.ActionDelegate),bindings:[{shortcut:"["}]}),n.ActionRegistration.registerActionExtension({actionId:"timeline.jump-to-next-frame",category:"PERFORMANCE",title:ce(se.nextFrame),contextTypes:()=>me((e=>[e.TimelinePanel.TimelinePanel])),loadActionDelegate:async()=>new((await ge()).TimelinePanel.ActionDelegate),bindings:[{shortcut:"]"}]}),n.ActionRegistration.registerActionExtension({actionId:"timeline.show-history",loadActionDelegate:async()=>new((await ge()).TimelinePanel.ActionDelegate),category:"PERFORMANCE",title:ce(se.showRecentTimelineSessions),contextTypes:()=>me((e=>[e.TimelinePanel.TimelinePanel])),bindings:[{platform:"windows,linux",shortcut:"Ctrl+H"},{platform:"mac",shortcut:"Meta+Y"}]}),n.ActionRegistration.registerActionExtension({actionId:"timeline.previous-recording",category:"PERFORMANCE",loadActionDelegate:async()=>new((await ge()).TimelinePanel.ActionDelegate),title:ce(se.previousRecording),contextTypes:()=>me((e=>[e.TimelinePanel.TimelinePanel])),bindings:[{platform:"windows,linux",shortcut:"Alt+Left"},{platform:"mac",shortcut:"Meta+Left"}]}),n.ActionRegistration.registerActionExtension({actionId:"timeline.next-recording",category:"PERFORMANCE",loadActionDelegate:async()=>new((await ge()).TimelinePanel.ActionDelegate),title:ce(se.nextRecording),contextTypes:()=>me((e=>[e.TimelinePanel.TimelinePanel])),bindings:[{platform:"windows,linux",shortcut:"Alt+Right"},{platform:"mac",shortcut:"Meta+Right"}]}),e.Settings.registerSettingExtension({category:"PERFORMANCE",storageType:"Synced",title:ce(se.hideChromeFrameInLayersView),settingName:"frame-viewer-hide-chrome-window",settingType:"boolean",defaultValue:!1}),e.Settings.registerSettingExtension({category:"PERFORMANCE",storageType:"Synced",settingName:"annotations-hidden",settingType:"boolean",defaultValue:!1}),e.Linkifier.registerLinkifier({contextTypes:()=>me((e=>[e.CLSLinkifier.CLSRect])),loadLinkifier:async()=>(await ge()).CLSLinkifier.Linkifier.instance()}),n.ContextMenu.registerItem({location:"timelineMenu/open",actionId:"timeline.load-from-file",order:10}),n.ContextMenu.registerItem({location:"timelineMenu/open",actionId:"timeline.save-to-file",order:15}),e.Revealer.registerRevealer({contextTypes:()=>[i.TraceObject.TraceObject],destination:e.Revealer.RevealerDestination.TIMELINE_PANEL,loadRevealer:async()=>new((await ge()).TimelinePanel.TraceRevealer)}),e.Revealer.registerRevealer({contextTypes:()=>[i.TraceObject.RevealableEvent],destination:e.Revealer.RevealerDestination.TIMELINE_PANEL,loadRevealer:async()=>new((await ge()).TimelinePanel.EventRevealer)});class ue{static#e;#t;#o;#n;constructor(){}static instance(){return this.#e||(this.#e=new ue),this.#e}setAppInfo(e,t){this.#t=e,this.#o=t,this.#i()}setSuffix(e){this.#n=e,this.#i()}#i(){const e=[];this.#t&&e.push(this.#t),this.#o&&e.push(`(${this.#o})`),this.#n&&e.push(this.#n),e.push("- React Native DevTools"),document.title=e.join(" ")}}const we={reloadRequiredForPerformancePanelMessage:"[Profiling build first run] One or more settings have changed. Please reload to access the Performance panel.",reloadRequiredForNetworkPanelMessage:"Network panel is now available for dogfooding. Please reload to access it."},pe=t.i18n.registerUIStrings("entrypoints/rn_fusebox/FuseboxExperimentsObserver.ts",we),ve=t.i18n.getLocalizedString.bind(void 0,pe);const he={connectionStatusDisconnectedTooltip:"Debugging connection was closed",connectionStatusDisconnectedLabel:"Reconnect DevTools"},Re=t.i18n.registerUIStrings("entrypoints/rn_fusebox/FuseboxReconnectDeviceButton.ts",he),ye=t.i18n.getLazilyComputedLocalizedString.bind(void 0,Re);let fe;class ke extends i.TargetManager.Observer{#a=new n.Toolbar.ToolbarButton("");constructor(){super(),this.#a.setVisible(!1),this.#a.setGlyph("refresh"),this.#a.addEventListener("Click",this.#r.bind(this)),i.TargetManager.TargetManager.instance().observeTargets(this,{scoped:!0})}static instance(){return fe||(fe=new ke),fe}targetAdded(e){this.#s(e)}targetRemoved(e){this.#s(e)}#s(e){const t=i.TargetManager.TargetManager.instance().rootTarget();this.#a.setTitle(ye(he.connectionStatusDisconnectedTooltip)()),this.#a.setText(ye(he.connectionStatusDisconnectedLabel)()),this.#a.setVisible(!t),t||this.#l(e)}#l(t){e.Settings.Settings.instance().moduleSetting("preserve-console-log").get()||t.model(i.ConsoleModel.ConsoleModel)?.addMessage(new i.ConsoleModel.ConsoleMessage(t.model(i.RuntimeModel.RuntimeModel),"recommendation","info","[React Native] Console messages are currently cleared upon DevTools disconnection. You can preserve logs in settings: ",{type:i.ConsoleModel.FrontendMessageType.System,context:"fusebox_preserve_log_rec"}))}#r(){window.location.reload()}item(){return this.#a}}c.rnPerfMetrics.registerPerfMetricsGlobalPostMessageHandler(),c.rnPerfMetrics.registerGlobalErrorReporting(),c.rnPerfMetrics.setLaunchId(o.Runtime.Runtime.queryParam("launchId")),c.rnPerfMetrics.setAppId(o.Runtime.Runtime.queryParam("appId")),c.rnPerfMetrics.setTelemetryInfo(JSON.parse(o.Runtime.Runtime.queryParam("telemetryInfo")||"{}")),c.rnPerfMetrics.entryPointLoadingStarted("rn_fusebox");const be={networkTitle:"React Native",showReactNative:"Show React Native",sendFeedback:"[FB-only] Send feedback"},Te=t.i18n.registerUIStrings("entrypoints/rn_fusebox/rn_fusebox.ts",be),Se=t.i18n.getLazilyComputedLocalizedString.bind(void 0,Te);let Ee;if(n.ViewManager.maybeRemoveViewExtension("network.blocked-urls"),n.ViewManager.maybeRemoveViewExtension("network.config"),n.ViewManager.maybeRemoveViewExtension("coverage"),n.ViewManager.maybeRemoveViewExtension("linear-memory-inspector"),n.ViewManager.maybeRemoveViewExtension("rendering"),n.ViewManager.maybeRemoveViewExtension("issues-pane"),n.ViewManager.maybeRemoveViewExtension("sensors"),n.ViewManager.maybeRemoveViewExtension("devices"),n.ViewManager.maybeRemoveViewExtension("emulation-locations"),n.ViewManager.maybeRemoveViewExtension("throttling-conditions"),d.RNExperimentsImpl.setIsReactNativeEntryPoint(!0),d.RNExperimentsImpl.Instance.enableExperimentsByDefault(["js-heap-profiler-enable","react-native-specific-ui"]),document.addEventListener("visibilitychange",(()=>{c.rnPerfMetrics.browserVisibilityChanged(document.visibilityState)})),i.SDKModel.SDKModel.register(i.ReactNativeApplicationModel.ReactNativeApplicationModel,{capabilities:0,autostart:!0,early:!0}),n.ViewManager.registerViewExtension({location:"navigator-view",id:"navigator-network",title:Se(be.networkTitle),commandPrompt:Se(be.showReactNative),order:2,persistence:"permanent",loadView:async()=>(await async function(){return Ee||(Ee=await import("../../panels/sources/sources.js")),Ee}()).SourcesNavigator.NetworkNavigatorView.instance()}),self.runtime=o.Runtime.Runtime.instance({forceNew:!0}),new g.MainImpl.MainImpl,globalThis.FB_ONLY__reactNativeFeedbackLink){const e=globalThis.FB_ONLY__reactNativeFeedbackLink,t="react-native-send-feedback",o={handleAction:(o,n)=>n===t&&(c.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(e),!0)};n.ActionRegistration.registerActionExtension({category:"GLOBAL",actionId:t,title:Se(be.sendFeedback),loadActionDelegate:async()=>o,iconClass:"bug"}),n.Toolbar.registerToolbarItem({location:"main-toolbar-right",actionId:t,label:Se(be.sendFeedback)})}n.Toolbar.registerToolbarItem({location:"main-toolbar-right",loadItem:async()=>ke.instance()}),new class{constructor(e){e.observeModels(i.ReactNativeApplicationModel.ReactNativeApplicationModel,this)}modelAdded(e){e.ensureEnabled(),e.addEventListener("MetadataUpdated",this.#c,this)}modelRemoved(e){e.removeEventListener("MetadataUpdated",this.#c,this)}#c(e){const{appDisplayName:t,deviceName:o}=e.data;ue.instance().setAppInfo(t,o)}}(i.TargetManager.TargetManager.instance()),new class{constructor(e){e.observeModels(i.ReactNativeApplicationModel.ReactNativeApplicationModel,this)}modelAdded(e){e.ensureEnabled(),e.addEventListener("MetadataUpdated",this.#c,this)}modelRemoved(e){e.removeEventListener("MetadataUpdated",this.#c,this)}#c(e){const{unstable_isProfilingBuild:t,unstable_networkInspectionEnabled:o}=e.data;t&&(ue.instance().setSuffix("[PROFILING]"),this.#d(),this.#g()),o&&this.#m()}#d(){n.InspectorView.InspectorView.instance().closeDrawer();const e=n.ViewManager.ViewManager.instance(),t=e.resolveLocation("panel"),o=e.resolveLocation("drawer-view");Promise.all([t,o]).then((([e,t])=>{n.ViewManager.getRegisteredViewExtensions().forEach((o=>{if("drawer-view"===o.location())t?.removeView(o);else switch(o.viewId()){case"console":case"heap-profiler":case"live-heap-profile":case"sources":case"network":case"react-devtools-components":case"react-devtools-profiler":e?.removeView(o)}}))}))}#g(){if(!o.Runtime.experiments.isEnabled("enable-performance-panel")){o.Runtime.experiments.setEnabled("enable-performance-panel",!0);const e=n.InspectorView?.InspectorView?.instance();e&&e.displayReloadRequiredWarning(ve(we.reloadRequiredForPerformancePanelMessage))}}#m(){o.Runtime.experiments.isEnabled("enable-network-panel")||(o.Runtime.experiments.setEnabled("enable-network-panel",!0),n.InspectorView?.InspectorView?.instance()?.displayReloadRequiredWarning(ve(we.reloadRequiredForNetworkPanelMessage)))}}(i.TargetManager.TargetManager.instance()),c.rnPerfMetrics.entryPointLoadingFinished("rn_fusebox");
